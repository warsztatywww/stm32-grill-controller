
Project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a08c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800a22c  0800a22c  0001a22c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a350  0800a350  00020220  2**0
                  CONTENTS
  4 .ARM          00000008  0800a350  0800a350  0001a350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a358  0800a358  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a358  0800a358  0001a358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a35c  0800a35c  0001a35c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0800a360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c90  20000220  0800a580  00020220  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002eb0  0800a580  00022eb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d53b  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000456a  00000000  00000000  0003d78b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  00041cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e8  00000000  00000000  000430c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac4a  00000000  00000000  000442b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018903  00000000  00000000  0005eefa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090ac7  00000000  00000000  000777fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001082c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057d0  00000000  00000000  00108318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000220 	.word	0x20000220
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a214 	.word	0x0800a214

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000224 	.word	0x20000224
 80001dc:	0800a214 	.word	0x0800a214

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <HueToRGB>:
#include "progress_bar.h"

float HueToRGB(float v1, float v2, float vH) {
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000582:	edc7 0a02 	vstr	s1, [r7, #8]
 8000586:	ed87 1a01 	vstr	s2, [r7, #4]
	if (vH < 0)
 800058a:	edd7 7a01 	vldr	s15, [r7, #4]
 800058e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000596:	d507      	bpl.n	80005a8 <HueToRGB+0x30>
		vH += 1;
 8000598:	edd7 7a01 	vldr	s15, [r7, #4]
 800059c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80005a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80005a4:	edc7 7a01 	vstr	s15, [r7, #4]

	if (vH > 1)
 80005a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80005ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80005b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005b8:	dd07      	ble.n	80005ca <HueToRGB+0x52>
		vH -= 1;
 80005ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80005be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80005c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80005c6:	edc7 7a01 	vstr	s15, [r7, #4]

	if ((6 * vH) < 1)
 80005ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80005ce:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80005d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80005da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005e2:	d512      	bpl.n	800060a <HueToRGB+0x92>
		return (v1 + (v2 - v1) * 6 * vH);
 80005e4:	ed97 7a02 	vldr	s14, [r7, #8]
 80005e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80005ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005f0:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80005f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80005f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80005fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000600:	edd7 7a03 	vldr	s15, [r7, #12]
 8000604:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000608:	e033      	b.n	8000672 <HueToRGB+0xfa>

	if ((2 * vH) < 1)
 800060a:	edd7 7a01 	vldr	s15, [r7, #4]
 800060e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000612:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000616:	eef4 7ac7 	vcmpe.f32	s15, s14
 800061a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800061e:	d502      	bpl.n	8000626 <HueToRGB+0xae>
		return v2;
 8000620:	edd7 7a02 	vldr	s15, [r7, #8]
 8000624:	e025      	b.n	8000672 <HueToRGB+0xfa>

	if ((3 * vH) < 2)
 8000626:	edd7 7a01 	vldr	s15, [r7, #4]
 800062a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800062e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000632:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000636:	eef4 7ac7 	vcmpe.f32	s15, s14
 800063a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800063e:	d516      	bpl.n	800066e <HueToRGB+0xf6>
		return (v1 + (v2 - v1) * ((2.0f / 3) - vH) * 6);
 8000640:	ed97 7a02 	vldr	s14, [r7, #8]
 8000644:	edd7 7a03 	vldr	s15, [r7, #12]
 8000648:	ee37 7a67 	vsub.f32	s14, s14, s15
 800064c:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000680 <HueToRGB+0x108>
 8000650:	edd7 7a01 	vldr	s15, [r7, #4]
 8000654:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800065c:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8000660:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000664:	edd7 7a03 	vldr	s15, [r7, #12]
 8000668:	ee77 7a27 	vadd.f32	s15, s14, s15
 800066c:	e001      	b.n	8000672 <HueToRGB+0xfa>

	return v1;
 800066e:	edd7 7a03 	vldr	s15, [r7, #12]
}
 8000672:	eeb0 0a67 	vmov.f32	s0, s15
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	3f2aaaab 	.word	0x3f2aaaab

08000684 <HSLToRGB>:

void HSLToRGB(Color hsl, Color rgb) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
	unsigned char r = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	unsigned char g = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	unsigned char b = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	unsigned char H = hsl[0];
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	float S = (float)hsl[1] / 255;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	3301      	adds	r3, #1
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	ee07 3a90 	vmov	s15, r3
 80006b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006b6:	eddf 6a63 	vldr	s13, [pc, #396]	; 8000844 <HSLToRGB+0x1c0>
 80006ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006be:	edc7 7a08 	vstr	s15, [r7, #32]
	float L = (float)hsl[2] / 255;
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	3302      	adds	r3, #2
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	ee07 3a90 	vmov	s15, r3
 80006cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006d0:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8000844 <HSLToRGB+0x1c0>
 80006d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006d8:	edc7 7a07 	vstr	s15, [r7, #28]

	if (S == 0)
 80006dc:	edd7 7a08 	vldr	s15, [r7, #32]
 80006e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80006e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006e8:	d115      	bne.n	8000716 <HSLToRGB+0x92>
	{
		r = g = b = (unsigned char)(L * 255);
 80006ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80006ee:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8000844 <HSLToRGB+0x1c0>
 80006f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006fa:	edc7 7a01 	vstr	s15, [r7, #4]
 80006fe:	793b      	ldrb	r3, [r7, #4]
 8000700:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000704:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000708:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800070c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000714:	e084      	b.n	8000820 <HSLToRGB+0x19c>
	}
	else
	{
		float v1, v2;
		float hue = (float)H / 255;
 8000716:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800071a:	ee07 3a90 	vmov	s15, r3
 800071e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000722:	eddf 6a48 	vldr	s13, [pc, #288]	; 8000844 <HSLToRGB+0x1c0>
 8000726:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800072a:	edc7 7a06 	vstr	s15, [r7, #24]

		v2 = (L < 0.5) ? (L * (1 + S)) : ((L + S) - (L * S));
 800072e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000732:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000736:	eef4 7ac7 	vcmpe.f32	s15, s14
 800073a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800073e:	d50a      	bpl.n	8000756 <HSLToRGB+0xd2>
 8000740:	edd7 7a08 	vldr	s15, [r7, #32]
 8000744:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000748:	ee37 7a87 	vadd.f32	s14, s15, s14
 800074c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000754:	e00d      	b.n	8000772 <HSLToRGB+0xee>
 8000756:	ed97 7a07 	vldr	s14, [r7, #28]
 800075a:	edd7 7a08 	vldr	s15, [r7, #32]
 800075e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000762:	edd7 6a07 	vldr	s13, [r7, #28]
 8000766:	edd7 7a08 	vldr	s15, [r7, #32]
 800076a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800076e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000772:	edc7 7a05 	vstr	s15, [r7, #20]
		v1 = 2 * L - v2;
 8000776:	edd7 7a07 	vldr	s15, [r7, #28]
 800077a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800077e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000782:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000786:	edc7 7a04 	vstr	s15, [r7, #16]

		r = (unsigned char)(255 * HueToRGB(v1, v2, hue + (1.0f / 3)));
 800078a:	edd7 7a06 	vldr	s15, [r7, #24]
 800078e:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8000848 <HSLToRGB+0x1c4>
 8000792:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000796:	eeb0 1a67 	vmov.f32	s2, s15
 800079a:	edd7 0a05 	vldr	s1, [r7, #20]
 800079e:	ed97 0a04 	vldr	s0, [r7, #16]
 80007a2:	f7ff fee9 	bl	8000578 <HueToRGB>
 80007a6:	eef0 7a40 	vmov.f32	s15, s0
 80007aa:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8000844 <HSLToRGB+0x1c0>
 80007ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007b6:	edc7 7a01 	vstr	s15, [r7, #4]
 80007ba:	793b      	ldrb	r3, [r7, #4]
 80007bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		g = (unsigned char)(255 * HueToRGB(v1, v2, hue));
 80007c0:	ed97 1a06 	vldr	s2, [r7, #24]
 80007c4:	edd7 0a05 	vldr	s1, [r7, #20]
 80007c8:	ed97 0a04 	vldr	s0, [r7, #16]
 80007cc:	f7ff fed4 	bl	8000578 <HueToRGB>
 80007d0:	eef0 7a40 	vmov.f32	s15, s0
 80007d4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000844 <HSLToRGB+0x1c0>
 80007d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007e0:	edc7 7a01 	vstr	s15, [r7, #4]
 80007e4:	793b      	ldrb	r3, [r7, #4]
 80007e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		b = (unsigned char)(255 * HueToRGB(v1, v2, hue - (1.0f / 3)));
 80007ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80007ee:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000848 <HSLToRGB+0x1c4>
 80007f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80007f6:	eeb0 1a67 	vmov.f32	s2, s15
 80007fa:	edd7 0a05 	vldr	s1, [r7, #20]
 80007fe:	ed97 0a04 	vldr	s0, [r7, #16]
 8000802:	f7ff feb9 	bl	8000578 <HueToRGB>
 8000806:	eef0 7a40 	vmov.f32	s15, s0
 800080a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000844 <HSLToRGB+0x1c0>
 800080e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000812:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000816:	edc7 7a01 	vstr	s15, [r7, #4]
 800081a:	793b      	ldrb	r3, [r7, #4]
 800081c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	rgb[0] = r;
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000826:	701a      	strb	r2, [r3, #0]
	rgb[1] = g;
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	3301      	adds	r3, #1
 800082c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000830:	701a      	strb	r2, [r3, #0]
	rgb[2] = b;
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	3302      	adds	r3, #2
 8000836:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800083a:	701a      	strb	r2, [r3, #0]
}
 800083c:	bf00      	nop
 800083e:	3728      	adds	r7, #40	; 0x28
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	437f0000 	.word	0x437f0000
 8000848:	3eaaaaab 	.word	0x3eaaaaab

0800084c <scan>:
			};

uint16_t pinsOut[3] = {GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10};
uint16_t pinsIn[4] = {GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14, GPIO_PIN_15};

char scan() {
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
	char ret = 'x';
 8000852:	2378      	movs	r3, #120	; 0x78
 8000854:	71fb      	strb	r3, [r7, #7]
	for(uint16_t pinOut = 0; pinOut <= 2; pinOut++) {
 8000856:	2300      	movs	r3, #0
 8000858:	80bb      	strh	r3, [r7, #4]
 800085a:	e033      	b.n	80008c4 <scan+0x78>
		HAL_GPIO_WritePin(GPIOA, pinsOut[pinOut], GPIO_PIN_SET);
 800085c:	88bb      	ldrh	r3, [r7, #4]
 800085e:	4a1d      	ldr	r2, [pc, #116]	; (80008d4 <scan+0x88>)
 8000860:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000864:	2201      	movs	r2, #1
 8000866:	4619      	mov	r1, r3
 8000868:	481b      	ldr	r0, [pc, #108]	; (80008d8 <scan+0x8c>)
 800086a:	f002 f8cd 	bl	8002a08 <HAL_GPIO_WritePin>
		for(uint16_t pinIn = 0; pinIn <= 3; pinIn++) {
 800086e:	2300      	movs	r3, #0
 8000870:	807b      	strh	r3, [r7, #2]
 8000872:	e015      	b.n	80008a0 <scan+0x54>
			if( HAL_GPIO_ReadPin(GPIOB, pinsIn[pinIn]) ) {
 8000874:	887b      	ldrh	r3, [r7, #2]
 8000876:	4a19      	ldr	r2, [pc, #100]	; (80008dc <scan+0x90>)
 8000878:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800087c:	4619      	mov	r1, r3
 800087e:	4818      	ldr	r0, [pc, #96]	; (80008e0 <scan+0x94>)
 8000880:	f002 f8aa 	bl	80029d8 <HAL_GPIO_ReadPin>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d007      	beq.n	800089a <scan+0x4e>
				ret = keys[pinOut][pinIn];
 800088a:	88ba      	ldrh	r2, [r7, #4]
 800088c:	887b      	ldrh	r3, [r7, #2]
 800088e:	4915      	ldr	r1, [pc, #84]	; (80008e4 <scan+0x98>)
 8000890:	0092      	lsls	r2, r2, #2
 8000892:	440a      	add	r2, r1
 8000894:	4413      	add	r3, r2
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	71fb      	strb	r3, [r7, #7]
		for(uint16_t pinIn = 0; pinIn <= 3; pinIn++) {
 800089a:	887b      	ldrh	r3, [r7, #2]
 800089c:	3301      	adds	r3, #1
 800089e:	807b      	strh	r3, [r7, #2]
 80008a0:	887b      	ldrh	r3, [r7, #2]
 80008a2:	2b03      	cmp	r3, #3
 80008a4:	d9e6      	bls.n	8000874 <scan+0x28>
			}
		}
		HAL_GPIO_WritePin(GPIOA, pinsOut[pinOut], GPIO_PIN_RESET);
 80008a6:	88bb      	ldrh	r3, [r7, #4]
 80008a8:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <scan+0x88>)
 80008aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008ae:	2200      	movs	r2, #0
 80008b0:	4619      	mov	r1, r3
 80008b2:	4809      	ldr	r0, [pc, #36]	; (80008d8 <scan+0x8c>)
 80008b4:	f002 f8a8 	bl	8002a08 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80008b8:	2001      	movs	r0, #1
 80008ba:	f001 fa63 	bl	8001d84 <HAL_Delay>
	for(uint16_t pinOut = 0; pinOut <= 2; pinOut++) {
 80008be:	88bb      	ldrh	r3, [r7, #4]
 80008c0:	3301      	adds	r3, #1
 80008c2:	80bb      	strh	r3, [r7, #4]
 80008c4:	88bb      	ldrh	r3, [r7, #4]
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d9c8      	bls.n	800085c <scan+0x10>
	}

	return ret;
 80008ca:	79fb      	ldrb	r3, [r7, #7]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	2000000c 	.word	0x2000000c
 80008d8:	40020000 	.word	0x40020000
 80008dc:	20000014 	.word	0x20000014
 80008e0:	40020400 	.word	0x40020400
 80008e4:	20000000 	.word	0x20000000

080008e8 <updateKeypad>:
int letter = 0;
int powers[4] = {1000, 100, 10, 1};
int ready = 0;
int setTime = 0;

void updateKeypad() {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
	char currentKey = scan();
 80008ee:	f7ff ffad 	bl	800084c <scan>
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]

	if(currentKey != lastKey && currentKey != 'x') {
 80008f6:	4b21      	ldr	r3, [pc, #132]	; (800097c <updateKeypad+0x94>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	79fa      	ldrb	r2, [r7, #7]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d035      	beq.n	800096c <updateKeypad+0x84>
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	2b78      	cmp	r3, #120	; 0x78
 8000904:	d032      	beq.n	800096c <updateKeypad+0x84>
		if(currentKey == '*') {
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b2a      	cmp	r3, #42	; 0x2a
 800090a:	d106      	bne.n	800091a <updateKeypad+0x32>
			enteredNumber = 0;
 800090c:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <updateKeypad+0x98>)
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
			letter = 0;
 8000912:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <updateKeypad+0x9c>)
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	e028      	b.n	800096c <updateKeypad+0x84>
		} else if(currentKey == '#') {
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	2b23      	cmp	r3, #35	; 0x23
 800091e:	d103      	bne.n	8000928 <updateKeypad+0x40>
			ready = 1;
 8000920:	4b19      	ldr	r3, [pc, #100]	; (8000988 <updateKeypad+0xa0>)
 8000922:	2201      	movs	r2, #1
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	e021      	b.n	800096c <updateKeypad+0x84>
		} else if(letter < 4) {
 8000928:	4b16      	ldr	r3, [pc, #88]	; (8000984 <updateKeypad+0x9c>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b03      	cmp	r3, #3
 800092e:	dc1d      	bgt.n	800096c <updateKeypad+0x84>
			if(setTime == 0 || (!(letter == 2 && currentKey >= '6'))) {
 8000930:	4b16      	ldr	r3, [pc, #88]	; (800098c <updateKeypad+0xa4>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d006      	beq.n	8000946 <updateKeypad+0x5e>
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <updateKeypad+0x9c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b02      	cmp	r3, #2
 800093e:	d102      	bne.n	8000946 <updateKeypad+0x5e>
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	2b35      	cmp	r3, #53	; 0x35
 8000944:	d812      	bhi.n	800096c <updateKeypad+0x84>
				enteredNumber += powers[letter] * (currentKey - '0');
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <updateKeypad+0x9c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a11      	ldr	r2, [pc, #68]	; (8000990 <updateKeypad+0xa8>)
 800094c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000950:	79fa      	ldrb	r2, [r7, #7]
 8000952:	3a30      	subs	r2, #48	; 0x30
 8000954:	fb02 f203 	mul.w	r2, r2, r3
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <updateKeypad+0x98>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4413      	add	r3, r2
 800095e:	4a08      	ldr	r2, [pc, #32]	; (8000980 <updateKeypad+0x98>)
 8000960:	6013      	str	r3, [r2, #0]
				letter++;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <updateKeypad+0x9c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	3301      	adds	r3, #1
 8000968:	4a06      	ldr	r2, [pc, #24]	; (8000984 <updateKeypad+0x9c>)
 800096a:	6013      	str	r3, [r2, #0]
			}
		}
	}
	lastKey = currentKey;
 800096c:	4a03      	ldr	r2, [pc, #12]	; (800097c <updateKeypad+0x94>)
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	7013      	strb	r3, [r2, #0]
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	2000001c 	.word	0x2000001c
 8000980:	2000023c 	.word	0x2000023c
 8000984:	20000240 	.word	0x20000240
 8000988:	20000244 	.word	0x20000244
 800098c:	20000248 	.word	0x20000248
 8000990:	20000020 	.word	0x20000020

08000994 <resetKeypad>:

void resetKeypad() {
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
	letter = 0;
 8000998:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <resetKeypad+0x1c>)
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
	enteredNumber = 0;
 800099e:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <resetKeypad+0x20>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	20000240 	.word	0x20000240
 80009b4:	2000023c 	.word	0x2000023c

080009b8 <checkReadiness>:

int checkReadiness() {
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
	if(ready) {
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <checkReadiness+0x28>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d005      	beq.n	80009d0 <checkReadiness+0x18>
		ready = 0;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <checkReadiness+0x28>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
		return enteredNumber;
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <checkReadiness+0x2c>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	e001      	b.n	80009d4 <checkReadiness+0x1c>
	} else {
		return -1;
 80009d0:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	20000244 	.word	0x20000244
 80009e4:	2000023c 	.word	0x2000023c

080009e8 <checkNumber>:

int checkNumber() {
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
	return enteredNumber;
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <checkNumber+0x14>)
 80009ee:	681b      	ldr	r3, [r3, #0]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	2000023c 	.word	0x2000023c

08000a00 <checkLetter>:

int checkLetter() {
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
	return letter;
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <checkLetter+0x14>)
 8000a06:	681b      	ldr	r3, [r3, #0]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	20000240 	.word	0x20000240

08000a18 <keypadEnterTime>:

void keypadEnterTime(int x) {
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	setTime = x;
 8000a20:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <keypadEnterTime+0x1c>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6013      	str	r3, [r2, #0]
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20000248 	.word	0x20000248

08000a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3e:	f001 f92f 	bl	8001ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a42:	f000 f8d3 	bl	8000bec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a46:	f000 fa6d 	bl	8000f24 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a4a:	f000 fa4b 	bl	8000ee4 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000a4e:	f007 ff49 	bl	80088e4 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8000a52:	f000 f9ab 	bl	8000dac <MX_TIM3_Init>
  MX_TIM5_Init();
 8000a56:	f000 f9f7 	bl	8000e48 <MX_TIM5_Init>
  MX_TIM2_Init();
 8000a5a:	f000 f933 	bl	8000cc4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  tosterDisplayInit(3);
 8000a5e:	2003      	movs	r0, #3
 8000a60:	f000 ffe2 	bl	8001a28 <tosterDisplayInit>
  initialize_bar();
 8000a64:	f000 fb0a 	bl	800107c <initialize_bar>
  HAL_TIM_Base_Start_IT(&htim5);
 8000a68:	4859      	ldr	r0, [pc, #356]	; (8000bd0 <main+0x198>)
 8000a6a:	f003 fdd9 	bl	8004620 <HAL_TIM_Base_Start_IT>

  enum State state = enterPass;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	73fb      	strb	r3, [r7, #15]
  tosterTimerBlinkMode(1);
 8000a72:	2001      	movs	r0, #1
 8000a74:	f001 f836 	bl	8001ae4 <tosterTimerBlinkMode>
  int password = 1235;
 8000a78:	f240 43d3 	movw	r3, #1235	; 0x4d3
 8000a7c:	60bb      	str	r3, [r7, #8]
  int cookingTime = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2110      	movs	r1, #16
 8000a86:	4853      	ldr	r0, [pc, #332]	; (8000bd4 <main+0x19c>)
 8000a88:	f001 ffbe 	bl	8002a08 <HAL_GPIO_WritePin>

  set_color_all(COL_OFF);
 8000a8c:	4852      	ldr	r0, [pc, #328]	; (8000bd8 <main+0x1a0>)
 8000a8e:	f000 fb6f 	bl	8001170 <set_color_all>
  update_bar();
 8000a92:	f000 fb5d 	bl	8001150 <update_bar>
    /* USER CODE BEGIN 3 */

//	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
//	  HAL_Delay(1000);

	  updateKeypad();
 8000a96:	f7ff ff27 	bl	80008e8 <updateKeypad>
	  int tmp = checkReadiness();
 8000a9a:	f7ff ff8d 	bl	80009b8 <checkReadiness>
 8000a9e:	6038      	str	r0, [r7, #0]
	  if(tmp != -1) {
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa6:	d035      	beq.n	8000b14 <main+0xdc>
		  resetKeypad();
 8000aa8:	f7ff ff74 	bl	8000994 <resetKeypad>
		  if(state == enterPass) {
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d113      	bne.n	8000ada <main+0xa2>
			  if(tmp == password) {
 8000ab2:	683a      	ldr	r2, [r7, #0]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d10a      	bne.n	8000ad0 <main+0x98>
				  state = enterTime;
 8000aba:	2301      	movs	r3, #1
 8000abc:	73fb      	strb	r3, [r7, #15]
				  keypadEnterTime(1);
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f7ff ffaa 	bl	8000a18 <keypadEnterTime>
				  set_color_all(COL_GREEN);
 8000ac4:	4845      	ldr	r0, [pc, #276]	; (8000bdc <main+0x1a4>)
 8000ac6:	f000 fb53 	bl	8001170 <set_color_all>
				  update_bar();
 8000aca:	f000 fb41 	bl	8001150 <update_bar>
 8000ace:	e021      	b.n	8000b14 <main+0xdc>
			  } else {
				  blink(3, COL_RED);
 8000ad0:	4943      	ldr	r1, [pc, #268]	; (8000be0 <main+0x1a8>)
 8000ad2:	2003      	movs	r0, #3
 8000ad4:	f000 fb6c 	bl	80011b0 <blink>
 8000ad8:	e01c      	b.n	8000b14 <main+0xdc>
			  }
		  } else if(state == enterTime) {
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d112      	bne.n	8000b06 <main+0xce>
			  state = cooking;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	73fb      	strb	r3, [r7, #15]
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2110      	movs	r1, #16
 8000ae8:	483a      	ldr	r0, [pc, #232]	; (8000bd4 <main+0x19c>)
 8000aea:	f001 ff8d 	bl	8002a08 <HAL_GPIO_WritePin>
			  HAL_TIM_Base_Start_IT(&htim3);
 8000aee:	483d      	ldr	r0, [pc, #244]	; (8000be4 <main+0x1ac>)
 8000af0:	f003 fd96 	bl	8004620 <HAL_TIM_Base_Start_IT>

			  cookingTime = getTime();
 8000af4:	f000 ffde 	bl	8001ab4 <getTime>
 8000af8:	6078      	str	r0, [r7, #4]
			  tosterTimerStart();
 8000afa:	f000 ffe7 	bl	8001acc <tosterTimerStart>
			  run_progress_bar(cookingTime);
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f000 fbd6 	bl	80012b0 <run_progress_bar>
 8000b04:	e006      	b.n	8000b14 <main+0xdc>
		  } else if(state == cookingEnd) {
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
 8000b08:	2b03      	cmp	r3, #3
 8000b0a:	d103      	bne.n	8000b14 <main+0xdc>
			  state = enterTime;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	73fb      	strb	r3, [r7, #15]
			  resetTimer();
 8000b10:	f000 ff9a 	bl	8001a48 <resetTimer>
		  }
	  }
	  if(tosterTimerHasFinished() && state != cookingEnd) {
 8000b14:	f000 ffc2 	bl	8001a9c <tosterTimerHasFinished>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d013      	beq.n	8000b46 <main+0x10e>
 8000b1e:	7bfb      	ldrb	r3, [r7, #15]
 8000b20:	2b03      	cmp	r3, #3
 8000b22:	d010      	beq.n	8000b46 <main+0x10e>
		  state = cookingEnd;
 8000b24:	2303      	movs	r3, #3
 8000b26:	73fb      	strb	r3, [r7, #15]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2110      	movs	r1, #16
 8000b2c:	4829      	ldr	r0, [pc, #164]	; (8000bd4 <main+0x19c>)
 8000b2e:	f001 ff6b 	bl	8002a08 <HAL_GPIO_WritePin>
		  clear_progress();
 8000b32:	f000 fb61 	bl	80011f8 <clear_progress>
		  update_bar();
 8000b36:	f000 fb0b 	bl	8001150 <update_bar>
		  blink(10, COL_GREEN);
 8000b3a:	4928      	ldr	r1, [pc, #160]	; (8000bdc <main+0x1a4>)
 8000b3c:	200a      	movs	r0, #10
 8000b3e:	f000 fb37 	bl	80011b0 <blink>
		  resetKeypad();
 8000b42:	f7ff ff27 	bl	8000994 <resetKeypad>
	  }

	  if(state == cooking) {
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
 8000b48:	2b02      	cmp	r3, #2
 8000b4a:	d106      	bne.n	8000b5a <main+0x122>
		  tosterDisplayTime(1, 5);
 8000b4c:	2105      	movs	r1, #5
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f000 ffd8 	bl	8001b04 <tosterDisplayTime>
		  dupa();
 8000b54:	f000 fbda 	bl	800130c <dupa>
 8000b58:	e79d      	b.n	8000a96 <main+0x5e>
	  } else if(state == enterTime) {
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d126      	bne.n	8000bae <main+0x176>
		  tosterSetTime( (checkNumber() % 100) + (checkNumber() / 100) * 60 );
 8000b60:	f7ff ff42 	bl	80009e8 <checkNumber>
 8000b64:	4603      	mov	r3, r0
 8000b66:	4a20      	ldr	r2, [pc, #128]	; (8000be8 <main+0x1b0>)
 8000b68:	fb82 1203 	smull	r1, r2, r2, r3
 8000b6c:	1151      	asrs	r1, r2, #5
 8000b6e:	17da      	asrs	r2, r3, #31
 8000b70:	1a8c      	subs	r4, r1, r2
 8000b72:	2264      	movs	r2, #100	; 0x64
 8000b74:	fb02 f204 	mul.w	r2, r2, r4
 8000b78:	1a9c      	subs	r4, r3, r2
 8000b7a:	f7ff ff35 	bl	80009e8 <checkNumber>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	4a19      	ldr	r2, [pc, #100]	; (8000be8 <main+0x1b0>)
 8000b82:	fb82 1203 	smull	r1, r2, r2, r3
 8000b86:	1152      	asrs	r2, r2, #5
 8000b88:	17db      	asrs	r3, r3, #31
 8000b8a:	1ad2      	subs	r2, r2, r3
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	011b      	lsls	r3, r3, #4
 8000b90:	1a9b      	subs	r3, r3, r2
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	4423      	add	r3, r4
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 ff6c 	bl	8001a74 <tosterSetTime>
		  tosterDisplayTime(1, checkLetter()+1);
 8000b9c:	f7ff ff30 	bl	8000a00 <checkLetter>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f000 ffac 	bl	8001b04 <tosterDisplayTime>
 8000bac:	e773      	b.n	8000a96 <main+0x5e>
	  } else if(state == enterPass) {
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	f47f af70 	bne.w	8000a96 <main+0x5e>
		  tosterDisplayNumber( checkNumber(), checkLetter()+1);
 8000bb6:	f7ff ff17 	bl	80009e8 <checkNumber>
 8000bba:	4604      	mov	r4, r0
 8000bbc:	f7ff ff20 	bl	8000a00 <checkLetter>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4620      	mov	r0, r4
 8000bc8:	f000 ffe6 	bl	8001b98 <tosterDisplayNumber>
  {
 8000bcc:	e763      	b.n	8000a96 <main+0x5e>
 8000bce:	bf00      	nop
 8000bd0:	200004f4 	.word	0x200004f4
 8000bd4:	40020400 	.word	0x40020400
 8000bd8:	2000024c 	.word	0x2000024c
 8000bdc:	20000034 	.word	0x20000034
 8000be0:	20000030 	.word	0x20000030
 8000be4:	2000053c 	.word	0x2000053c
 8000be8:	51eb851f 	.word	0x51eb851f

08000bec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b094      	sub	sp, #80	; 0x50
 8000bf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bf2:	f107 0320 	add.w	r3, r7, #32
 8000bf6:	2230      	movs	r2, #48	; 0x30
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f008 fbac 	bl	8009358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c00:	f107 030c 	add.w	r3, r7, #12
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c10:	2300      	movs	r3, #0
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	4b29      	ldr	r3, [pc, #164]	; (8000cbc <SystemClock_Config+0xd0>)
 8000c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c18:	4a28      	ldr	r2, [pc, #160]	; (8000cbc <SystemClock_Config+0xd0>)
 8000c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c20:	4b26      	ldr	r3, [pc, #152]	; (8000cbc <SystemClock_Config+0xd0>)
 8000c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	4b23      	ldr	r3, [pc, #140]	; (8000cc0 <SystemClock_Config+0xd4>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c38:	4a21      	ldr	r2, [pc, #132]	; (8000cc0 <SystemClock_Config+0xd4>)
 8000c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c3e:	6013      	str	r3, [r2, #0]
 8000c40:	4b1f      	ldr	r3, [pc, #124]	; (8000cc0 <SystemClock_Config+0xd4>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c56:	2302      	movs	r3, #2
 8000c58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c60:	2319      	movs	r3, #25
 8000c62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c64:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c68:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c6a:	2304      	movs	r3, #4
 8000c6c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c6e:	2307      	movs	r3, #7
 8000c70:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c72:	f107 0320 	add.w	r3, r7, #32
 8000c76:	4618      	mov	r0, r3
 8000c78:	f003 f862 	bl	8003d40 <HAL_RCC_OscConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c82:	f000 f9f5 	bl	8001070 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c86:	230f      	movs	r3, #15
 8000c88:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c9c:	f107 030c 	add.w	r3, r7, #12
 8000ca0:	2102      	movs	r1, #2
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f003 fac4 	bl	8004230 <HAL_RCC_ClockConfig>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000cae:	f000 f9df 	bl	8001070 <Error_Handler>
  }
}
 8000cb2:	bf00      	nop
 8000cb4:	3750      	adds	r7, #80	; 0x50
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40007000 	.word	0x40007000

08000cc4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08e      	sub	sp, #56	; 0x38
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd8:	f107 0320 	add.w	r3, r7, #32
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
 8000cf0:	615a      	str	r2, [r3, #20]
 8000cf2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cf4:	4b2c      	ldr	r3, [pc, #176]	; (8000da8 <MX_TIM2_Init+0xe4>)
 8000cf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000cfc:	4b2a      	ldr	r3, [pc, #168]	; (8000da8 <MX_TIM2_Init+0xe4>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d02:	4b29      	ldr	r3, [pc, #164]	; (8000da8 <MX_TIM2_Init+0xe4>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 104;
 8000d08:	4b27      	ldr	r3, [pc, #156]	; (8000da8 <MX_TIM2_Init+0xe4>)
 8000d0a:	2268      	movs	r2, #104	; 0x68
 8000d0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0e:	4b26      	ldr	r3, [pc, #152]	; (8000da8 <MX_TIM2_Init+0xe4>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d14:	4b24      	ldr	r3, [pc, #144]	; (8000da8 <MX_TIM2_Init+0xe4>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d1a:	4823      	ldr	r0, [pc, #140]	; (8000da8 <MX_TIM2_Init+0xe4>)
 8000d1c:	f003 fc30 	bl	8004580 <HAL_TIM_Base_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000d26:	f000 f9a3 	bl	8001070 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d34:	4619      	mov	r1, r3
 8000d36:	481c      	ldr	r0, [pc, #112]	; (8000da8 <MX_TIM2_Init+0xe4>)
 8000d38:	f004 f8a8 	bl	8004e8c <HAL_TIM_ConfigClockSource>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000d42:	f000 f995 	bl	8001070 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d46:	4818      	ldr	r0, [pc, #96]	; (8000da8 <MX_TIM2_Init+0xe4>)
 8000d48:	f003 fccc 	bl	80046e4 <HAL_TIM_PWM_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000d52:	f000 f98d 	bl	8001070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d56:	2300      	movs	r3, #0
 8000d58:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d5e:	f107 0320 	add.w	r3, r7, #32
 8000d62:	4619      	mov	r1, r3
 8000d64:	4810      	ldr	r0, [pc, #64]	; (8000da8 <MX_TIM2_Init+0xe4>)
 8000d66:	f004 fd31 	bl	80057cc <HAL_TIMEx_MasterConfigSynchronization>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000d70:	f000 f97e 	bl	8001070 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d74:	2360      	movs	r3, #96	; 0x60
 8000d76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	2200      	movs	r2, #0
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4807      	ldr	r0, [pc, #28]	; (8000da8 <MX_TIM2_Init+0xe4>)
 8000d8c:	f003 ffbc 	bl	8004d08 <HAL_TIM_PWM_ConfigChannel>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000d96:	f000 f96b 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d9a:	4803      	ldr	r0, [pc, #12]	; (8000da8 <MX_TIM2_Init+0xe4>)
 8000d9c:	f000 fd12 	bl	80017c4 <HAL_TIM_MspPostInit>

}
 8000da0:	bf00      	nop
 8000da2:	3738      	adds	r7, #56	; 0x38
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000584 	.word	0x20000584

08000dac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000db2:	f107 0308 	add.w	r3, r7, #8
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dc8:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <MX_TIM3_Init+0x94>)
 8000dca:	4a1e      	ldr	r2, [pc, #120]	; (8000e44 <MX_TIM3_Init+0x98>)
 8000dcc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8000dce:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <MX_TIM3_Init+0x94>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <MX_TIM3_Init+0x94>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 41999;
 8000dda:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <MX_TIM3_Init+0x94>)
 8000ddc:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000de0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de2:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <MX_TIM3_Init+0x94>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de8:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <MX_TIM3_Init+0x94>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dee:	4814      	ldr	r0, [pc, #80]	; (8000e40 <MX_TIM3_Init+0x94>)
 8000df0:	f003 fbc6 	bl	8004580 <HAL_TIM_Base_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000dfa:	f000 f939 	bl	8001070 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e04:	f107 0308 	add.w	r3, r7, #8
 8000e08:	4619      	mov	r1, r3
 8000e0a:	480d      	ldr	r0, [pc, #52]	; (8000e40 <MX_TIM3_Init+0x94>)
 8000e0c:	f004 f83e 	bl	8004e8c <HAL_TIM_ConfigClockSource>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e16:	f000 f92b 	bl	8001070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e22:	463b      	mov	r3, r7
 8000e24:	4619      	mov	r1, r3
 8000e26:	4806      	ldr	r0, [pc, #24]	; (8000e40 <MX_TIM3_Init+0x94>)
 8000e28:	f004 fcd0 	bl	80057cc <HAL_TIMEx_MasterConfigSynchronization>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000e32:	f000 f91d 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	2000053c 	.word	0x2000053c
 8000e44:	40000400 	.word	0x40000400

08000e48 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e4e:	f107 0308 	add.w	r3, r7, #8
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e64:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <MX_TIM5_Init+0x94>)
 8000e66:	4a1e      	ldr	r2, [pc, #120]	; (8000ee0 <MX_TIM5_Init+0x98>)
 8000e68:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 4999;
 8000e6a:	4b1c      	ldr	r3, [pc, #112]	; (8000edc <MX_TIM5_Init+0x94>)
 8000e6c:	f241 3287 	movw	r2, #4999	; 0x1387
 8000e70:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e72:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <MX_TIM5_Init+0x94>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 8399;
 8000e78:	4b18      	ldr	r3, [pc, #96]	; (8000edc <MX_TIM5_Init+0x94>)
 8000e7a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000e7e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e80:	4b16      	ldr	r3, [pc, #88]	; (8000edc <MX_TIM5_Init+0x94>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <MX_TIM5_Init+0x94>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000e8c:	4813      	ldr	r0, [pc, #76]	; (8000edc <MX_TIM5_Init+0x94>)
 8000e8e:	f003 fb77 	bl	8004580 <HAL_TIM_Base_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000e98:	f000 f8ea 	bl	8001070 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000ea2:	f107 0308 	add.w	r3, r7, #8
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	480c      	ldr	r0, [pc, #48]	; (8000edc <MX_TIM5_Init+0x94>)
 8000eaa:	f003 ffef 	bl	8004e8c <HAL_TIM_ConfigClockSource>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000eb4:	f000 f8dc 	bl	8001070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_TIM5_Init+0x94>)
 8000ec6:	f004 fc81 	bl	80057cc <HAL_TIMEx_MasterConfigSynchronization>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000ed0:	f000 f8ce 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	200004f4 	.word	0x200004f4
 8000ee0:	40000c00 	.word	0x40000c00

08000ee4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <MX_DMA_Init+0x3c>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a0b      	ldr	r2, [pc, #44]	; (8000f20 <MX_DMA_Init+0x3c>)
 8000ef4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <MX_DMA_Init+0x3c>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2010      	movs	r0, #16
 8000f0c:	f001 f839 	bl	8001f82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f10:	2010      	movs	r0, #16
 8000f12:	f001 f852 	bl	8001fba <HAL_NVIC_EnableIRQ>

}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800

08000f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	; 0x28
 8000f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	4b48      	ldr	r3, [pc, #288]	; (8001060 <MX_GPIO_Init+0x13c>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a47      	ldr	r2, [pc, #284]	; (8001060 <MX_GPIO_Init+0x13c>)
 8000f44:	f043 0304 	orr.w	r3, r3, #4
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b45      	ldr	r3, [pc, #276]	; (8001060 <MX_GPIO_Init+0x13c>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0304 	and.w	r3, r3, #4
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	4b41      	ldr	r3, [pc, #260]	; (8001060 <MX_GPIO_Init+0x13c>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a40      	ldr	r2, [pc, #256]	; (8001060 <MX_GPIO_Init+0x13c>)
 8000f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b3e      	ldr	r3, [pc, #248]	; (8001060 <MX_GPIO_Init+0x13c>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	4b3a      	ldr	r3, [pc, #232]	; (8001060 <MX_GPIO_Init+0x13c>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a39      	ldr	r2, [pc, #228]	; (8001060 <MX_GPIO_Init+0x13c>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b37      	ldr	r3, [pc, #220]	; (8001060 <MX_GPIO_Init+0x13c>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	4b33      	ldr	r3, [pc, #204]	; (8001060 <MX_GPIO_Init+0x13c>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a32      	ldr	r2, [pc, #200]	; (8001060 <MX_GPIO_Init+0x13c>)
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b30      	ldr	r3, [pc, #192]	; (8001060 <MX_GPIO_Init+0x13c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fb0:	482c      	ldr	r0, [pc, #176]	; (8001064 <MX_GPIO_Init+0x140>)
 8000fb2:	f001 fd29 	bl	8002a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 8000fbc:	482a      	ldr	r0, [pc, #168]	; (8001068 <MX_GPIO_Init+0x144>)
 8000fbe:	f001 fd23 	bl	8002a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	21d0      	movs	r1, #208	; 0xd0
 8000fc6:	4829      	ldr	r0, [pc, #164]	; (800106c <MX_GPIO_Init+0x148>)
 8000fc8:	f001 fd1e 	bl	8002a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	481f      	ldr	r0, [pc, #124]	; (8001064 <MX_GPIO_Init+0x140>)
 8000fe6:	f001 fb73 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000fea:	f44f 63e2 	mov.w	r3, #1808	; 0x710
 8000fee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	4819      	ldr	r0, [pc, #100]	; (8001068 <MX_GPIO_Init+0x144>)
 8001004:	f001 fb64 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001008:	2320      	movs	r3, #32
 800100a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100c:	2300      	movs	r3, #0
 800100e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4619      	mov	r1, r3
 800101a:	4813      	ldr	r0, [pc, #76]	; (8001068 <MX_GPIO_Init+0x144>)
 800101c:	f001 fb58 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001020:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800102a:	2302      	movs	r3, #2
 800102c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	480d      	ldr	r0, [pc, #52]	; (800106c <MX_GPIO_Init+0x148>)
 8001036:	f001 fb4b 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 800103a:	23d0      	movs	r3, #208	; 0xd0
 800103c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103e:	2301      	movs	r3, #1
 8001040:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	4806      	ldr	r0, [pc, #24]	; (800106c <MX_GPIO_Init+0x148>)
 8001052:	f001 fb3d 	bl	80026d0 <HAL_GPIO_Init>

}
 8001056:	bf00      	nop
 8001058:	3728      	adds	r7, #40	; 0x28
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800
 8001064:	40020800 	.word	0x40020800
 8001068:	40020000 	.word	0x40020000
 800106c:	40020400 	.word	0x40020400

08001070 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001074:	b672      	cpsid	i
}
 8001076:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001078:	e7fe      	b.n	8001078 <Error_Handler+0x8>
	...

0800107c <initialize_bar>:
struct {
	uint32_t frame[FRAME_SIZE];
	uint32_t* diodes;
} progress_bar;

void initialize_bar() {
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
	progress_bar.diodes = progress_bar.frame + PADDING_SIZE;
 8001080:	4a05      	ldr	r2, [pc, #20]	; (8001098 <initialize_bar+0x1c>)
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <initialize_bar+0x20>)
 8001084:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8001088:	3310      	adds	r3, #16
 800108a:	601a      	str	r2, [r3, #0]
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000694 	.word	0x20000694
 800109c:	200005cc 	.word	0x200005cc

080010a0 <write_binary>:
		printf("%lu ", progress_bar.frame[i]);
	}
	printf("\n");
}

void write_binary(uint32_t * pos, char val) {
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < 8; ++i) {
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	e019      	b.n	80010e6 <write_binary+0x46>
		if (val >> i) pos[7 - i] = ON_VAL;
 80010b2:	78fa      	ldrb	r2, [r7, #3]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	fa42 f303 	asr.w	r3, r2, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d008      	beq.n	80010d0 <write_binary+0x30>
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f1c3 0307 	rsb	r3, r3, #7
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	2243      	movs	r2, #67	; 0x43
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	e007      	b.n	80010e0 <write_binary+0x40>
		else pos[7 - i] = OFF_VAL;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f1c3 0307 	rsb	r3, r3, #7
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	4413      	add	r3, r2
 80010dc:	2222      	movs	r2, #34	; 0x22
 80010de:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 8; ++i) {
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	3301      	adds	r3, #1
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2b07      	cmp	r3, #7
 80010ea:	dde2      	ble.n	80010b2 <write_binary+0x12>
	}
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <set_color>:

void set_color(int diode_id, Color color) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 3; ++i) {
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	e016      	b.n	800113a <set_color+0x3e>
		write_binary(progress_bar.diodes + diode_id * SLOTS_PER_DIODE + 8 * i, color[i]);
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <set_color+0x50>)
 800110e:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8001112:	3310      	adds	r3, #16
 8001114:	6819      	ldr	r1, [r3, #0]
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	4613      	mov	r3, r2
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	441a      	add	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4413      	add	r3, r2
 8001122:	015b      	lsls	r3, r3, #5
 8001124:	18c8      	adds	r0, r1, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	4413      	add	r3, r2
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	4619      	mov	r1, r3
 8001130:	f7ff ffb6 	bl	80010a0 <write_binary>
	for (int i = 0; i < 3; ++i) {
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	3301      	adds	r3, #1
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2b02      	cmp	r3, #2
 800113e:	dde5      	ble.n	800110c <set_color+0x10>
	}
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200005cc 	.word	0x200005cc

08001150 <update_bar>:

void update_bar() {
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, progress_bar.frame, FRAME_SIZE);
 8001154:	f240 6304 	movw	r3, #1540	; 0x604
 8001158:	4a03      	ldr	r2, [pc, #12]	; (8001168 <update_bar+0x18>)
 800115a:	2100      	movs	r1, #0
 800115c:	4803      	ldr	r0, [pc, #12]	; (800116c <update_bar+0x1c>)
 800115e:	f003 fb1b 	bl	8004798 <HAL_TIM_PWM_Start_DMA>
//	print_colors();
//	HAL_Delay(20);
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200005cc 	.word	0x200005cc
 800116c:	20000584 	.word	0x20000584

08001170 <set_color_all>:

void set_color_all(Color color) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < DIODES_CNT; ++i) {
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	e006      	b.n	800118c <set_color_all+0x1c>
		set_color(i, color);
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f7ff ffbb 	bl	80010fc <set_color>
	for (int i = 0; i < DIODES_CNT; ++i) {
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	3301      	adds	r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2b3b      	cmp	r3, #59	; 0x3b
 8001190:	ddf5      	ble.n	800117e <set_color_all+0xe>
	}
}
 8001192:	bf00      	nop
 8001194:	bf00      	nop
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <clear_bar>:

void clear_bar() {
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	set_color_all(COL_OFF);
 80011a0:	4802      	ldr	r0, [pc, #8]	; (80011ac <clear_bar+0x10>)
 80011a2:	f7ff ffe5 	bl	8001170 <set_color_all>
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	2000024c 	.word	0x2000024c

080011b0 <blink>:

void blink(int counts, Color color) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
	for(int i=0; i<counts; i++) {
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	e011      	b.n	80011e4 <blink+0x34>
		set_color_all(color);
 80011c0:	6838      	ldr	r0, [r7, #0]
 80011c2:	f7ff ffd5 	bl	8001170 <set_color_all>
		update_bar();
 80011c6:	f7ff ffc3 	bl	8001150 <update_bar>
		HAL_Delay(250);
 80011ca:	20fa      	movs	r0, #250	; 0xfa
 80011cc:	f000 fdda 	bl	8001d84 <HAL_Delay>
		clear_bar();
 80011d0:	f7ff ffe4 	bl	800119c <clear_bar>
		update_bar();
 80011d4:	f7ff ffbc 	bl	8001150 <update_bar>
		HAL_Delay(250);
 80011d8:	20fa      	movs	r0, #250	; 0xfa
 80011da:	f000 fdd3 	bl	8001d84 <HAL_Delay>
	for(int i=0; i<counts; i++) {
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	3301      	adds	r3, #1
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	dbe9      	blt.n	80011c0 <blink+0x10>
	}
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <clear_progress>:
int sleep_time;
int start_time;

int getTime();

void clear_progress() {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	current_bar_pos = 0;
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <clear_progress+0x14>)
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
	clear_bar();
 8001202:	f7ff ffcb 	bl	800119c <clear_bar>
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000250 	.word	0x20000250

08001210 <update_progress>:

Color COL_PROGRESS;
Color COL_PROGRESS_HSL = {100, 255, 10};

void update_progress() {
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af04      	add	r7, sp, #16
	COL_PROGRESS_HSL[0] += 6;
 8001216:	4b18      	ldr	r3, [pc, #96]	; (8001278 <update_progress+0x68>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	3306      	adds	r3, #6
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4b16      	ldr	r3, [pc, #88]	; (8001278 <update_progress+0x68>)
 8001220:	701a      	strb	r2, [r3, #0]
	HSLToRGB(COL_PROGRESS_HSL, COL_PROGRESS);
 8001222:	4916      	ldr	r1, [pc, #88]	; (800127c <update_progress+0x6c>)
 8001224:	4814      	ldr	r0, [pc, #80]	; (8001278 <update_progress+0x68>)
 8001226:	f7ff fa2d 	bl	8000684 <HSLToRGB>
	set_color(current_bar_pos++, COL_PROGRESS);
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <update_progress+0x70>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	1c5a      	adds	r2, r3, #1
 8001230:	4913      	ldr	r1, [pc, #76]	; (8001280 <update_progress+0x70>)
 8001232:	600a      	str	r2, [r1, #0]
 8001234:	4911      	ldr	r1, [pc, #68]	; (800127c <update_progress+0x6c>)
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ff60 	bl	80010fc <set_color>
	printf("%d %d %d | %d %d %d\n", COL_PROGRESS_HSL[0], COL_PROGRESS_HSL[1], COL_PROGRESS_HSL[2], COL_PROGRESS[0], COL_PROGRESS[1], COL_PROGRESS[2]);
 800123c:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <update_progress+0x68>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <update_progress+0x68>)
 8001244:	785b      	ldrb	r3, [r3, #1]
 8001246:	461c      	mov	r4, r3
 8001248:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <update_progress+0x68>)
 800124a:	789b      	ldrb	r3, [r3, #2]
 800124c:	461d      	mov	r5, r3
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <update_progress+0x6c>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	461a      	mov	r2, r3
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <update_progress+0x6c>)
 8001256:	785b      	ldrb	r3, [r3, #1]
 8001258:	4619      	mov	r1, r3
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <update_progress+0x6c>)
 800125c:	789b      	ldrb	r3, [r3, #2]
 800125e:	9302      	str	r3, [sp, #8]
 8001260:	9101      	str	r1, [sp, #4]
 8001262:	9200      	str	r2, [sp, #0]
 8001264:	462b      	mov	r3, r5
 8001266:	4622      	mov	r2, r4
 8001268:	4601      	mov	r1, r0
 800126a:	4806      	ldr	r0, [pc, #24]	; (8001284 <update_progress+0x74>)
 800126c:	f008 f87c 	bl	8009368 <iprintf>
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	bdb0      	pop	{r4, r5, r7, pc}
 8001276:	bf00      	nop
 8001278:	20000038 	.word	0x20000038
 800127c:	20001de4 	.word	0x20001de4
 8001280:	20000250 	.word	0x20000250
 8001284:	0800a22c 	.word	0x0800a22c

08001288 <update_up_to>:

void update_up_to(int pos) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	while (current_bar_pos < pos) {
 8001290:	e001      	b.n	8001296 <update_up_to+0xe>
		update_progress();
 8001292:	f7ff ffbd 	bl	8001210 <update_progress>
	while (current_bar_pos < pos) {
 8001296:	4b05      	ldr	r3, [pc, #20]	; (80012ac <update_up_to+0x24>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	429a      	cmp	r2, r3
 800129e:	dcf8      	bgt.n	8001292 <update_up_to+0xa>
	}
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000250 	.word	0x20000250

080012b0 <run_progress_bar>:

void run_progress_bar(int runtime) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	time_per_tick = (runtime) / DIODES_CNT;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a0f      	ldr	r2, [pc, #60]	; (80012f8 <run_progress_bar+0x48>)
 80012bc:	fb82 1203 	smull	r1, r2, r2, r3
 80012c0:	441a      	add	r2, r3
 80012c2:	1152      	asrs	r2, r2, #5
 80012c4:	17db      	asrs	r3, r3, #31
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	4a0c      	ldr	r2, [pc, #48]	; (80012fc <run_progress_bar+0x4c>)
 80012ca:	6013      	str	r3, [r2, #0]
	sleep_time = (runtime / 10) / DIODES_CNT;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a0c      	ldr	r2, [pc, #48]	; (8001300 <run_progress_bar+0x50>)
 80012d0:	fb82 1203 	smull	r1, r2, r2, r3
 80012d4:	1192      	asrs	r2, r2, #6
 80012d6:	17db      	asrs	r3, r3, #31
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <run_progress_bar+0x54>)
 80012dc:	6013      	str	r3, [r2, #0]
	start_time = getTime();
 80012de:	f000 fbe9 	bl	8001ab4 <getTime>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4a08      	ldr	r2, [pc, #32]	; (8001308 <run_progress_bar+0x58>)
 80012e6:	6013      	str	r3, [r2, #0]
	clear_progress();
 80012e8:	f7ff ff86 	bl	80011f8 <clear_progress>
	update_bar();
 80012ec:	f7ff ff30 	bl	8001150 <update_bar>
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	88888889 	.word	0x88888889
 80012fc:	20001de8 	.word	0x20001de8
 8001300:	1b4e81b5 	.word	0x1b4e81b5
 8001304:	20001dec 	.word	0x20001dec
 8001308:	20001de0 	.word	0x20001de0

0800130c <dupa>:

void dupa() {
 800130c:	b590      	push	{r4, r7, lr}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
	int enlapsed_time = start_time - getTime();
 8001312:	4b0a      	ldr	r3, [pc, #40]	; (800133c <dupa+0x30>)
 8001314:	681c      	ldr	r4, [r3, #0]
 8001316:	f000 fbcd 	bl	8001ab4 <getTime>
 800131a:	4603      	mov	r3, r0
 800131c:	1ae3      	subs	r3, r4, r3
 800131e:	607b      	str	r3, [r7, #4]
	update_up_to(enlapsed_time / time_per_tick);
 8001320:	4b07      	ldr	r3, [pc, #28]	; (8001340 <dupa+0x34>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	fb92 f3f3 	sdiv	r3, r2, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ffac 	bl	8001288 <update_up_to>
	update_bar();
 8001330:	f7ff ff0e 	bl	8001150 <update_bar>
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	bd90      	pop	{r4, r7, pc}
 800133c:	20001de0 	.word	0x20001de0
 8001340:	20001de8 	.word	0x20001de8

08001344 <tm1637Init>:
    0x00
};


void tm1637Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af00      	add	r7, sp, #0
    CLK_PORT_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <tm1637Init+0x88>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a1e      	ldr	r2, [pc, #120]	; (80013cc <tm1637Init+0x88>)
 8001354:	f043 0304 	orr.w	r3, r3, #4
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <tm1637Init+0x88>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
    DIO_PORT_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <tm1637Init+0x88>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a17      	ldr	r2, [pc, #92]	; (80013cc <tm1637Init+0x88>)
 8001370:	f043 0304 	orr.w	r3, r3, #4
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <tm1637Init+0x88>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
    GPIO_InitTypeDef g = {0};
 8001382:	f107 030c 	add.w	r3, r7, #12
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	611a      	str	r2, [r3, #16]
    g.Pull = GPIO_PULLUP;
 8001392:	2301      	movs	r3, #1
 8001394:	617b      	str	r3, [r7, #20]
    g.Mode = GPIO_MODE_OUTPUT_OD; // OD = open drain
 8001396:	2311      	movs	r3, #17
 8001398:	613b      	str	r3, [r7, #16]
    g.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	61bb      	str	r3, [r7, #24]
    g.Pin = CLK_PIN;
 800139e:	2340      	movs	r3, #64	; 0x40
 80013a0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(CLK_PORT, &g);
 80013a2:	f107 030c 	add.w	r3, r7, #12
 80013a6:	4619      	mov	r1, r3
 80013a8:	4809      	ldr	r0, [pc, #36]	; (80013d0 <tm1637Init+0x8c>)
 80013aa:	f001 f991 	bl	80026d0 <HAL_GPIO_Init>
    g.Pin = DIO_PIN;
 80013ae:	2380      	movs	r3, #128	; 0x80
 80013b0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DIO_PORT, &g);
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	4619      	mov	r1, r3
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <tm1637Init+0x8c>)
 80013ba:	f001 f989 	bl	80026d0 <HAL_GPIO_Init>

    tm1637SetBrightness(8);
 80013be:	2008      	movs	r0, #8
 80013c0:	f000 f88c 	bl	80014dc <tm1637SetBrightness>
}
 80013c4:	bf00      	nop
 80013c6:	3720      	adds	r7, #32
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020400 	.word	0x40020400

080013d4 <tm1637DisplayDecimal>:

void tm1637DisplayDecimal(int v, int displaySeparator, int n)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
    unsigned char digitArr[4];
    for (int i = 0; i < 4; ++i) {
 80013e0:	2300      	movs	r3, #0
 80013e2:	61fb      	str	r3, [r7, #28]
 80013e4:	e032      	b.n	800144c <tm1637DisplayDecimal+0x78>
        digitArr[i] = segmentMap[v % 10];
 80013e6:	68f9      	ldr	r1, [r7, #12]
 80013e8:	4b3a      	ldr	r3, [pc, #232]	; (80014d4 <tm1637DisplayDecimal+0x100>)
 80013ea:	fb83 2301 	smull	r2, r3, r3, r1
 80013ee:	109a      	asrs	r2, r3, #2
 80013f0:	17cb      	asrs	r3, r1, #31
 80013f2:	1ad2      	subs	r2, r2, r3
 80013f4:	4613      	mov	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	1aca      	subs	r2, r1, r3
 80013fe:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <tm1637DisplayDecimal+0x104>)
 8001400:	5c99      	ldrb	r1, [r3, r2]
 8001402:	f107 0210 	add.w	r2, r7, #16
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	4413      	add	r3, r2
 800140a:	460a      	mov	r2, r1
 800140c:	701a      	strb	r2, [r3, #0]
        if (i == 2 && displaySeparator) {
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	2b02      	cmp	r3, #2
 8001412:	d110      	bne.n	8001436 <tm1637DisplayDecimal+0x62>
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00d      	beq.n	8001436 <tm1637DisplayDecimal+0x62>
            digitArr[i] |= 1 << 7;
 800141a:	f107 0210 	add.w	r2, r7, #16
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	4413      	add	r3, r2
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001428:	b2d9      	uxtb	r1, r3
 800142a:	f107 0210 	add.w	r2, r7, #16
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	4413      	add	r3, r2
 8001432:	460a      	mov	r2, r1
 8001434:	701a      	strb	r2, [r3, #0]
        }
        v /= 10;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	4a26      	ldr	r2, [pc, #152]	; (80014d4 <tm1637DisplayDecimal+0x100>)
 800143a:	fb82 1203 	smull	r1, r2, r2, r3
 800143e:	1092      	asrs	r2, r2, #2
 8001440:	17db      	asrs	r3, r3, #31
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 4; ++i) {
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3301      	adds	r3, #1
 800144a:	61fb      	str	r3, [r7, #28]
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	2b03      	cmp	r3, #3
 8001450:	ddc9      	ble.n	80013e6 <tm1637DisplayDecimal+0x12>
    }

    _tm1637Start();
 8001452:	f000 f858 	bl	8001506 <_tm1637Start>
    _tm1637WriteByte(0x40);
 8001456:	2040      	movs	r0, #64	; 0x40
 8001458:	f000 f887 	bl	800156a <_tm1637WriteByte>
    _tm1637ReadResult();
 800145c:	f000 f875 	bl	800154a <_tm1637ReadResult>
    _tm1637Stop();
 8001460:	f000 f85e 	bl	8001520 <_tm1637Stop>

    _tm1637Start();
 8001464:	f000 f84f 	bl	8001506 <_tm1637Start>
    _tm1637WriteByte(0xc0);
 8001468:	20c0      	movs	r0, #192	; 0xc0
 800146a:	f000 f87e 	bl	800156a <_tm1637WriteByte>
    _tm1637ReadResult();
 800146e:	f000 f86c 	bl	800154a <_tm1637ReadResult>

    for (int i = 0; i < 4; ++i) {
 8001472:	2300      	movs	r3, #0
 8001474:	61bb      	str	r3, [r7, #24]
 8001476:	e023      	b.n	80014c0 <tm1637DisplayDecimal+0xec>
    	int toWrite;
    	if (n && (i + 1 == n)) {
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00d      	beq.n	800149a <tm1637DisplayDecimal+0xc6>
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	3301      	adds	r3, #1
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	429a      	cmp	r2, r3
 8001486:	d108      	bne.n	800149a <tm1637DisplayDecimal+0xc6>
    		if (n == 2) {
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b02      	cmp	r3, #2
 800148c:	d102      	bne.n	8001494 <tm1637DisplayDecimal+0xc0>
    			toWrite = 0x80;
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	617b      	str	r3, [r7, #20]
    		if (n == 2) {
 8001492:	e00b      	b.n	80014ac <tm1637DisplayDecimal+0xd8>
    		}
    		else {
    			toWrite = 0x00;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
    		if (n == 2) {
 8001498:	e008      	b.n	80014ac <tm1637DisplayDecimal+0xd8>
    		}
    	} else {
    		toWrite = digitArr[3 - i];
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	f1c3 0303 	rsb	r3, r3, #3
 80014a0:	f107 0220 	add.w	r2, r7, #32
 80014a4:	4413      	add	r3, r2
 80014a6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80014aa:	617b      	str	r3, [r7, #20]
    	}
    	_tm1637WriteByte(toWrite);
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 f85a 	bl	800156a <_tm1637WriteByte>
        _tm1637ReadResult();
 80014b6:	f000 f848 	bl	800154a <_tm1637ReadResult>
    for (int i = 0; i < 4; ++i) {
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	3301      	adds	r3, #1
 80014be:	61bb      	str	r3, [r7, #24]
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	2b03      	cmp	r3, #3
 80014c4:	ddd8      	ble.n	8001478 <tm1637DisplayDecimal+0xa4>
    }

    _tm1637Stop();
 80014c6:	f000 f82b 	bl	8001520 <_tm1637Stop>
}
 80014ca:	bf00      	nop
 80014cc:	3720      	adds	r7, #32
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	66666667 	.word	0x66666667
 80014d8:	0800a28c 	.word	0x0800a28c

080014dc <tm1637SetBrightness>:

// Valid brightness values: 0 - 8.
// 0 = display off.
void tm1637SetBrightness(char brightness)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
    // Brightness command:
    // 1000 0XXX = display off
    // 1000 1BBB = display on, brightness 0-7
    // X = don't care
    // B = brightness
    _tm1637Start();
 80014e6:	f000 f80e 	bl	8001506 <_tm1637Start>
    _tm1637WriteByte(0x87 + brightness);
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	3b79      	subs	r3, #121	; 0x79
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 f83a 	bl	800156a <_tm1637WriteByte>
    _tm1637ReadResult();
 80014f6:	f000 f828 	bl	800154a <_tm1637ReadResult>
    _tm1637Stop();
 80014fa:	f000 f811 	bl	8001520 <_tm1637Stop>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <_tm1637Start>:

void _tm1637Start(void)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	af00      	add	r7, sp, #0
    _tm1637ClkHigh();
 800150a:	f000 f875 	bl	80015f8 <_tm1637ClkHigh>
    _tm1637DioHigh();
 800150e:	f000 f88b 	bl	8001628 <_tm1637DioHigh>
    _tm1637DelayUsec(2);
 8001512:	2002      	movs	r0, #2
 8001514:	f000 f853 	bl	80015be <_tm1637DelayUsec>
    _tm1637DioLow();
 8001518:	f000 f892 	bl	8001640 <_tm1637DioLow>
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}

08001520 <_tm1637Stop>:

void _tm1637Stop(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
    _tm1637ClkLow();
 8001524:	f000 f874 	bl	8001610 <_tm1637ClkLow>
    _tm1637DelayUsec(2);
 8001528:	2002      	movs	r0, #2
 800152a:	f000 f848 	bl	80015be <_tm1637DelayUsec>
    _tm1637DioLow();
 800152e:	f000 f887 	bl	8001640 <_tm1637DioLow>
    _tm1637DelayUsec(2);
 8001532:	2002      	movs	r0, #2
 8001534:	f000 f843 	bl	80015be <_tm1637DelayUsec>
    _tm1637ClkHigh();
 8001538:	f000 f85e 	bl	80015f8 <_tm1637ClkHigh>
    _tm1637DelayUsec(2);
 800153c:	2002      	movs	r0, #2
 800153e:	f000 f83e 	bl	80015be <_tm1637DelayUsec>
    _tm1637DioHigh();
 8001542:	f000 f871 	bl	8001628 <_tm1637DioHigh>
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}

0800154a <_tm1637ReadResult>:

void _tm1637ReadResult(void)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	af00      	add	r7, sp, #0
    _tm1637ClkLow();
 800154e:	f000 f85f 	bl	8001610 <_tm1637ClkLow>
    _tm1637DelayUsec(5);
 8001552:	2005      	movs	r0, #5
 8001554:	f000 f833 	bl	80015be <_tm1637DelayUsec>
    // while (dio); // We're cheating here and not actually reading back the response.
    _tm1637ClkHigh();
 8001558:	f000 f84e 	bl	80015f8 <_tm1637ClkHigh>
    _tm1637DelayUsec(2);
 800155c:	2002      	movs	r0, #2
 800155e:	f000 f82e 	bl	80015be <_tm1637DelayUsec>
    _tm1637ClkLow();
 8001562:	f000 f855 	bl	8001610 <_tm1637ClkLow>
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}

0800156a <_tm1637WriteByte>:

void _tm1637WriteByte(unsigned char b)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b084      	sub	sp, #16
 800156e:	af00      	add	r7, sp, #0
 8001570:	4603      	mov	r3, r0
 8001572:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; ++i) {
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	e019      	b.n	80015ae <_tm1637WriteByte+0x44>
        _tm1637ClkLow();
 800157a:	f000 f849 	bl	8001610 <_tm1637ClkLow>
        if (b & 0x01) {
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b00      	cmp	r3, #0
 8001586:	d002      	beq.n	800158e <_tm1637WriteByte+0x24>
            _tm1637DioHigh();
 8001588:	f000 f84e 	bl	8001628 <_tm1637DioHigh>
 800158c:	e001      	b.n	8001592 <_tm1637WriteByte+0x28>
        }
        else {
            _tm1637DioLow();
 800158e:	f000 f857 	bl	8001640 <_tm1637DioLow>
        }
        _tm1637DelayUsec(3);
 8001592:	2003      	movs	r0, #3
 8001594:	f000 f813 	bl	80015be <_tm1637DelayUsec>
        b >>= 1;
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	085b      	lsrs	r3, r3, #1
 800159c:	71fb      	strb	r3, [r7, #7]
        _tm1637ClkHigh();
 800159e:	f000 f82b 	bl	80015f8 <_tm1637ClkHigh>
        _tm1637DelayUsec(3);
 80015a2:	2003      	movs	r0, #3
 80015a4:	f000 f80b 	bl	80015be <_tm1637DelayUsec>
    for (int i = 0; i < 8; ++i) {
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	3301      	adds	r3, #1
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2b07      	cmp	r3, #7
 80015b2:	dde2      	ble.n	800157a <_tm1637WriteByte+0x10>
    }
}
 80015b4:	bf00      	nop
 80015b6:	bf00      	nop
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <_tm1637DelayUsec>:

void _tm1637DelayUsec(unsigned int i)
{
 80015be:	b480      	push	{r7}
 80015c0:	b085      	sub	sp, #20
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
    for (; i>0; i--) {
 80015c6:	e00c      	b.n	80015e2 <_tm1637DelayUsec+0x24>
        for (int j = 0; j < 20; ++j) {
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	e003      	b.n	80015d6 <_tm1637DelayUsec+0x18>
            __asm__ __volatile__("nop\n\t":::"memory");
 80015ce:	bf00      	nop
        for (int j = 0; j < 20; ++j) {
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	3301      	adds	r3, #1
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2b13      	cmp	r3, #19
 80015da:	ddf8      	ble.n	80015ce <_tm1637DelayUsec+0x10>
    for (; i>0; i--) {
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1ef      	bne.n	80015c8 <_tm1637DelayUsec+0xa>
        }
    }
}
 80015e8:	bf00      	nop
 80015ea:	bf00      	nop
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <_tm1637ClkHigh>:

void _tm1637ClkHigh(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_SET);
 80015fc:	2201      	movs	r2, #1
 80015fe:	2140      	movs	r1, #64	; 0x40
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <_tm1637ClkHigh+0x14>)
 8001602:	f001 fa01 	bl	8002a08 <HAL_GPIO_WritePin>
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40020400 	.word	0x40020400

08001610 <_tm1637ClkLow>:

void _tm1637ClkLow(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_RESET);
 8001614:	2200      	movs	r2, #0
 8001616:	2140      	movs	r1, #64	; 0x40
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <_tm1637ClkLow+0x14>)
 800161a:	f001 f9f5 	bl	8002a08 <HAL_GPIO_WritePin>
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40020400 	.word	0x40020400

08001628 <_tm1637DioHigh>:

void _tm1637DioHigh(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_SET);
 800162c:	2201      	movs	r2, #1
 800162e:	2180      	movs	r1, #128	; 0x80
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <_tm1637DioHigh+0x14>)
 8001632:	f001 f9e9 	bl	8002a08 <HAL_GPIO_WritePin>
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40020400 	.word	0x40020400

08001640 <_tm1637DioLow>:

void _tm1637DioLow(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_RESET);
 8001644:	2200      	movs	r2, #0
 8001646:	2180      	movs	r1, #128	; 0x80
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <_tm1637DioLow+0x14>)
 800164a:	f001 f9dd 	bl	8002a08 <HAL_GPIO_WritePin>
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40020400 	.word	0x40020400

08001658 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <HAL_MspInit+0x4c>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	4a0f      	ldr	r2, [pc, #60]	; (80016a4 <HAL_MspInit+0x4c>)
 8001668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800166c:	6453      	str	r3, [r2, #68]	; 0x44
 800166e:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <HAL_MspInit+0x4c>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	603b      	str	r3, [r7, #0]
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <HAL_MspInit+0x4c>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	4a08      	ldr	r2, [pc, #32]	; (80016a4 <HAL_MspInit+0x4c>)
 8001684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001688:	6413      	str	r3, [r2, #64]	; 0x40
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_MspInit+0x4c>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800

080016a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016b8:	d13f      	bne.n	800173a <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	4b3c      	ldr	r3, [pc, #240]	; (80017b0 <HAL_TIM_Base_MspInit+0x108>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	4a3b      	ldr	r2, [pc, #236]	; (80017b0 <HAL_TIM_Base_MspInit+0x108>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ca:	4b39      	ldr	r3, [pc, #228]	; (80017b0 <HAL_TIM_Base_MspInit+0x108>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 80016d6:	4b37      	ldr	r3, [pc, #220]	; (80017b4 <HAL_TIM_Base_MspInit+0x10c>)
 80016d8:	4a37      	ldr	r2, [pc, #220]	; (80017b8 <HAL_TIM_Base_MspInit+0x110>)
 80016da:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 80016dc:	4b35      	ldr	r3, [pc, #212]	; (80017b4 <HAL_TIM_Base_MspInit+0x10c>)
 80016de:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80016e2:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016e4:	4b33      	ldr	r3, [pc, #204]	; (80017b4 <HAL_TIM_Base_MspInit+0x10c>)
 80016e6:	2240      	movs	r2, #64	; 0x40
 80016e8:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ea:	4b32      	ldr	r3, [pc, #200]	; (80017b4 <HAL_TIM_Base_MspInit+0x10c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80016f0:	4b30      	ldr	r3, [pc, #192]	; (80017b4 <HAL_TIM_Base_MspInit+0x10c>)
 80016f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016f6:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016f8:	4b2e      	ldr	r3, [pc, #184]	; (80017b4 <HAL_TIM_Base_MspInit+0x10c>)
 80016fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016fe:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001700:	4b2c      	ldr	r3, [pc, #176]	; (80017b4 <HAL_TIM_Base_MspInit+0x10c>)
 8001702:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001706:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001708:	4b2a      	ldr	r3, [pc, #168]	; (80017b4 <HAL_TIM_Base_MspInit+0x10c>)
 800170a:	2200      	movs	r2, #0
 800170c:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800170e:	4b29      	ldr	r3, [pc, #164]	; (80017b4 <HAL_TIM_Base_MspInit+0x10c>)
 8001710:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001714:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001716:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <HAL_TIM_Base_MspInit+0x10c>)
 8001718:	2200      	movs	r2, #0
 800171a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800171c:	4825      	ldr	r0, [pc, #148]	; (80017b4 <HAL_TIM_Base_MspInit+0x10c>)
 800171e:	f000 fc67 	bl	8001ff0 <HAL_DMA_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8001728:	f7ff fca2 	bl	8001070 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a21      	ldr	r2, [pc, #132]	; (80017b4 <HAL_TIM_Base_MspInit+0x10c>)
 8001730:	625a      	str	r2, [r3, #36]	; 0x24
 8001732:	4a20      	ldr	r2, [pc, #128]	; (80017b4 <HAL_TIM_Base_MspInit+0x10c>)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001738:	e036      	b.n	80017a8 <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM3)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a1f      	ldr	r2, [pc, #124]	; (80017bc <HAL_TIM_Base_MspInit+0x114>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d116      	bne.n	8001772 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001744:	2300      	movs	r3, #0
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <HAL_TIM_Base_MspInit+0x108>)
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	4a18      	ldr	r2, [pc, #96]	; (80017b0 <HAL_TIM_Base_MspInit+0x108>)
 800174e:	f043 0302 	orr.w	r3, r3, #2
 8001752:	6413      	str	r3, [r2, #64]	; 0x40
 8001754:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <HAL_TIM_Base_MspInit+0x108>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	613b      	str	r3, [r7, #16]
 800175e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	2100      	movs	r1, #0
 8001764:	201d      	movs	r0, #29
 8001766:	f000 fc0c 	bl	8001f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800176a:	201d      	movs	r0, #29
 800176c:	f000 fc25 	bl	8001fba <HAL_NVIC_EnableIRQ>
}
 8001770:	e01a      	b.n	80017a8 <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM5)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <HAL_TIM_Base_MspInit+0x118>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d115      	bne.n	80017a8 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800177c:	2300      	movs	r3, #0
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <HAL_TIM_Base_MspInit+0x108>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <HAL_TIM_Base_MspInit+0x108>)
 8001786:	f043 0308 	orr.w	r3, r3, #8
 800178a:	6413      	str	r3, [r2, #64]	; 0x40
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_TIM_Base_MspInit+0x108>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001798:	2200      	movs	r2, #0
 800179a:	2100      	movs	r1, #0
 800179c:	2032      	movs	r0, #50	; 0x32
 800179e:	f000 fbf0 	bl	8001f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80017a2:	2032      	movs	r0, #50	; 0x32
 80017a4:	f000 fc09 	bl	8001fba <HAL_NVIC_EnableIRQ>
}
 80017a8:	bf00      	nop
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40023800 	.word	0x40023800
 80017b4:	20000494 	.word	0x20000494
 80017b8:	40026088 	.word	0x40026088
 80017bc:	40000400 	.word	0x40000400
 80017c0:	40000c00 	.word	0x40000c00

080017c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 030c 	add.w	r3, r7, #12
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017e4:	d11d      	bne.n	8001822 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <HAL_TIM_MspPostInit+0x68>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a0f      	ldr	r2, [pc, #60]	; (800182c <HAL_TIM_MspPostInit+0x68>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b0d      	ldr	r3, [pc, #52]	; (800182c <HAL_TIM_MspPostInit+0x68>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001802:	2301      	movs	r3, #1
 8001804:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001812:	2301      	movs	r3, #1
 8001814:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001816:	f107 030c 	add.w	r3, r7, #12
 800181a:	4619      	mov	r1, r3
 800181c:	4804      	ldr	r0, [pc, #16]	; (8001830 <HAL_TIM_MspPostInit+0x6c>)
 800181e:	f000 ff57 	bl	80026d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001822:	bf00      	nop
 8001824:	3720      	adds	r7, #32
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800
 8001830:	40020000 	.word	0x40020000

08001834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <NMI_Handler+0x4>

0800183a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800183e:	e7fe      	b.n	800183e <HardFault_Handler+0x4>

08001840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <MemManage_Handler+0x4>

08001846 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800184a:	e7fe      	b.n	800184a <BusFault_Handler+0x4>

0800184c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <UsageFault_Handler+0x4>

08001852 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001880:	f000 fa60 	bl	8001d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}

08001888 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 800188c:	4802      	ldr	r0, [pc, #8]	; (8001898 <DMA1_Stream5_IRQHandler+0x10>)
 800188e:	f000 fcb5 	bl	80021fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000494 	.word	0x20000494

0800189c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018a0:	4802      	ldr	r0, [pc, #8]	; (80018ac <TIM3_IRQHandler+0x10>)
 80018a2:	f003 f929 	bl	8004af8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	2000053c 	.word	0x2000053c

080018b0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80018b4:	4802      	ldr	r0, [pc, #8]	; (80018c0 <TIM5_IRQHandler+0x10>)
 80018b6:	f003 f91f 	bl	8004af8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200004f4 	.word	0x200004f4

080018c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <OTG_FS_IRQHandler+0x10>)
 80018ca:	f001 fa06 	bl	8002cda <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20002a98 	.word	0x20002a98

080018d8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	e00a      	b.n	8001900 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018ea:	f3af 8000 	nop.w
 80018ee:	4601      	mov	r1, r0
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	60ba      	str	r2, [r7, #8]
 80018f6:	b2ca      	uxtb	r2, r1
 80018f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	3301      	adds	r3, #1
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	429a      	cmp	r2, r3
 8001906:	dbf0      	blt.n	80018ea <_read+0x12>
	}

return len;
 8001908:	687b      	ldr	r3, [r7, #4]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b084      	sub	sp, #16
 8001916:	af00      	add	r7, sp, #0
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS(ptr,len);
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	68b8      	ldr	r0, [r7, #8]
 8001922:	f007 f89d 	bl	8008a60 <CDC_Transmit_FS>

	for (DataIdx = 0; DataIdx < len; DataIdx++)
	{
		__io_putchar(*ptr++);
	}*/
	return 0;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <_close>:

int _close(int file)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
	return -1;
 8001938:	f04f 33ff 	mov.w	r3, #4294967295
}
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001958:	605a      	str	r2, [r3, #4]
	return 0;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <_isatty>:

int _isatty(int file)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
	return 1;
 8001970:	2301      	movs	r3, #1
}
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800197e:	b480      	push	{r7}
 8001980:	b085      	sub	sp, #20
 8001982:	af00      	add	r7, sp, #0
 8001984:	60f8      	str	r0, [r7, #12]
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	607a      	str	r2, [r7, #4]
	return 0;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a0:	4a14      	ldr	r2, [pc, #80]	; (80019f4 <_sbrk+0x5c>)
 80019a2:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <_sbrk+0x60>)
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019ac:	4b13      	ldr	r3, [pc, #76]	; (80019fc <_sbrk+0x64>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d102      	bne.n	80019ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <_sbrk+0x64>)
 80019b6:	4a12      	ldr	r2, [pc, #72]	; (8001a00 <_sbrk+0x68>)
 80019b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <_sbrk+0x64>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4413      	add	r3, r2
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d207      	bcs.n	80019d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019c8:	f007 fc9c 	bl	8009304 <__errno>
 80019cc:	4603      	mov	r3, r0
 80019ce:	220c      	movs	r2, #12
 80019d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295
 80019d6:	e009      	b.n	80019ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <_sbrk+0x64>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019de:	4b07      	ldr	r3, [pc, #28]	; (80019fc <_sbrk+0x64>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	4a05      	ldr	r2, [pc, #20]	; (80019fc <_sbrk+0x64>)
 80019e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ea:	68fb      	ldr	r3, [r7, #12]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20010000 	.word	0x20010000
 80019f8:	00000400 	.word	0x00000400
 80019fc:	20000254 	.word	0x20000254
 8001a00:	20002eb0 	.word	0x20002eb0

08001a04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <SystemInit+0x20>)
 8001a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a0e:	4a05      	ldr	r2, [pc, #20]	; (8001a24 <SystemInit+0x20>)
 8001a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <tosterDisplayInit>:
int _run = 0;
int _finished = 0;
int _segBlink = 0;
int _blinkEnabled = 0;

void tosterDisplayInit(int brightness) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
	tm1637Init();
 8001a30:	f7ff fc88 	bl	8001344 <tm1637Init>
	tm1637SetBrightness(brightness);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff fd4f 	bl	80014dc <tm1637SetBrightness>
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <resetTimer>:

void resetTimer() {
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
	_finished = 0;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <resetTimer+0x20>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
	_run = 0;
 8001a52:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <resetTimer+0x24>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
	_tosterTimer = 0;
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <resetTimer+0x28>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
}
 8001a5e:	bf00      	nop
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	2000025c 	.word	0x2000025c
 8001a6c:	20000258 	.word	0x20000258
 8001a70:	20001df0 	.word	0x20001df0

08001a74 <tosterSetTime>:

void tosterSetTime(int time) {
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
	_tosterTimer = time * 1000;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a82:	fb02 f303 	mul.w	r3, r2, r3
 8001a86:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <tosterSetTime+0x24>)
 8001a88:	6013      	str	r3, [r2, #0]
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	20001df0 	.word	0x20001df0

08001a9c <tosterTimerHasFinished>:

int tosterTimerHasFinished() {
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
	return _finished;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <tosterTimerHasFinished+0x14>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	2000025c 	.word	0x2000025c

08001ab4 <getTime>:

int getTime() {
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
	return _tosterTimer;
 8001ab8:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <getTime+0x14>)
 8001aba:	681b      	ldr	r3, [r3, #0]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20001df0 	.word	0x20001df0

08001acc <tosterTimerStart>:

void tosterTimerStart() {
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
	_run = 1;
 8001ad0:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <tosterTimerStart+0x14>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	20000258 	.word	0x20000258

08001ae4 <tosterTimerBlinkMode>:

void tosterTimerBlinkMode(int blinkEnabled) {
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	_blinkEnabled = blinkEnabled;
 8001aec:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <tosterTimerBlinkMode+0x1c>)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6013      	str	r3, [r2, #0]
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000264 	.word	0x20000264

08001b04 <tosterDisplayTime>:

void tosterDisplayTime(int separator, int blinkIndex) {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
	int tmp = _tosterTimer / 1000;
 8001b0e:	4b1e      	ldr	r3, [pc, #120]	; (8001b88 <tosterDisplayTime+0x84>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a1e      	ldr	r2, [pc, #120]	; (8001b8c <tosterDisplayTime+0x88>)
 8001b14:	fb82 1203 	smull	r1, r2, r2, r3
 8001b18:	1192      	asrs	r2, r2, #6
 8001b1a:	17db      	asrs	r3, r3, #31
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	617b      	str	r3, [r7, #20]
	int minutes = tmp / 60;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	4a1b      	ldr	r2, [pc, #108]	; (8001b90 <tosterDisplayTime+0x8c>)
 8001b24:	fb82 1203 	smull	r1, r2, r2, r3
 8001b28:	441a      	add	r2, r3
 8001b2a:	1152      	asrs	r2, r2, #5
 8001b2c:	17db      	asrs	r3, r3, #31
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	613b      	str	r3, [r7, #16]
	int seconds = tmp % 60;
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <tosterDisplayTime+0x8c>)
 8001b36:	fb83 1302 	smull	r1, r3, r3, r2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	1159      	asrs	r1, r3, #5
 8001b3e:	17d3      	asrs	r3, r2, #31
 8001b40:	1ac9      	subs	r1, r1, r3
 8001b42:	460b      	mov	r3, r1
 8001b44:	011b      	lsls	r3, r3, #4
 8001b46:	1a5b      	subs	r3, r3, r1
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	60fb      	str	r3, [r7, #12]
	if (!_segBlink) {
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <tosterDisplayTime+0x90>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <tosterDisplayTime+0x56>
		blinkIndex = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	603b      	str	r3, [r7, #0]
	}
	if(blinkIndex == 5) {
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2b05      	cmp	r3, #5
 8001b5e:	d104      	bne.n	8001b6a <tosterDisplayTime+0x66>
		blinkIndex = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	603b      	str	r3, [r7, #0]
		separator = _segBlink;
 8001b64:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <tosterDisplayTime+0x90>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	607b      	str	r3, [r7, #4]
	}
	tm1637DisplayDecimal(minutes*100 + seconds, separator, blinkIndex);
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	2264      	movs	r2, #100	; 0x64
 8001b6e:	fb02 f203 	mul.w	r2, r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4413      	add	r3, r2
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fc2a 	bl	80013d4 <tm1637DisplayDecimal>
}
 8001b80:	bf00      	nop
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20001df0 	.word	0x20001df0
 8001b8c:	10624dd3 	.word	0x10624dd3
 8001b90:	88888889 	.word	0x88888889
 8001b94:	20000260 	.word	0x20000260

08001b98 <tosterDisplayNumber>:

void tosterDisplayNumber(int number, int blinkIndex) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
	if (!_segBlink) {
 8001ba2:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <tosterDisplayNumber+0x28>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <tosterDisplayNumber+0x16>
		blinkIndex = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	603b      	str	r3, [r7, #0]
	}
	tm1637DisplayDecimal(number, 0, blinkIndex);
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff fc0e 	bl	80013d4 <tm1637DisplayDecimal>
}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000260 	.word	0x20000260

08001bc4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	if (_run) {
 8001bcc:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d014      	beq.n	8001bfe <HAL_TIM_PeriodElapsedCallback+0x3a>
		if (htim->Instance == TIM3) {
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a16      	ldr	r2, [pc, #88]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d10f      	bne.n	8001bfe <HAL_TIM_PeriodElapsedCallback+0x3a>

				if (_tosterTimer > 0) {
 8001bde:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	dd04      	ble.n	8001bf0 <HAL_TIM_PeriodElapsedCallback+0x2c>
					_tosterTimer--;
 8001be6:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	4a12      	ldr	r2, [pc, #72]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001bee:	6013      	str	r3, [r2, #0]
				}
				if (_tosterTimer <= 0) {
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	dc02      	bgt.n	8001bfe <HAL_TIM_PeriodElapsedCallback+0x3a>
					_finished = 1;
 8001bf8:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]
				}
		}
	}
	if (htim->Instance == TIM5) {
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a0f      	ldr	r2, [pc, #60]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d10d      	bne.n	8001c24 <HAL_TIM_PeriodElapsedCallback+0x60>
		if (_blinkEnabled) {
 8001c08:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d009      	beq.n	8001c24 <HAL_TIM_PeriodElapsedCallback+0x60>
			_segBlink = !_segBlink;
 8001c10:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	bf0c      	ite	eq
 8001c18:	2301      	moveq	r3, #1
 8001c1a:	2300      	movne	r3, #0
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001c22:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	20000258 	.word	0x20000258
 8001c34:	40000400 	.word	0x40000400
 8001c38:	20001df0 	.word	0x20001df0
 8001c3c:	2000025c 	.word	0x2000025c
 8001c40:	40000c00 	.word	0x40000c00
 8001c44:	20000264 	.word	0x20000264
 8001c48:	20000260 	.word	0x20000260

08001c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c50:	480d      	ldr	r0, [pc, #52]	; (8001c88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c52:	490e      	ldr	r1, [pc, #56]	; (8001c8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c54:	4a0e      	ldr	r2, [pc, #56]	; (8001c90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c58:	e002      	b.n	8001c60 <LoopCopyDataInit>

08001c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c5e:	3304      	adds	r3, #4

08001c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c64:	d3f9      	bcc.n	8001c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c66:	4a0b      	ldr	r2, [pc, #44]	; (8001c94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c68:	4c0b      	ldr	r4, [pc, #44]	; (8001c98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c6c:	e001      	b.n	8001c72 <LoopFillZerobss>

08001c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c70:	3204      	adds	r2, #4

08001c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c74:	d3fb      	bcc.n	8001c6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c76:	f7ff fec5 	bl	8001a04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c7a:	f007 fb49 	bl	8009310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c7e:	f7fe fedb 	bl	8000a38 <main>
  bx  lr    
 8001c82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c84:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c8c:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8001c90:	0800a360 	.word	0x0800a360
  ldr r2, =_sbss
 8001c94:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8001c98:	20002eb0 	.word	0x20002eb0

08001c9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c9c:	e7fe      	b.n	8001c9c <ADC_IRQHandler>
	...

08001ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ca4:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <HAL_Init+0x40>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a0d      	ldr	r2, [pc, #52]	; (8001ce0 <HAL_Init+0x40>)
 8001caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <HAL_Init+0x40>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <HAL_Init+0x40>)
 8001cb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cbc:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <HAL_Init+0x40>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a07      	ldr	r2, [pc, #28]	; (8001ce0 <HAL_Init+0x40>)
 8001cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc8:	2003      	movs	r0, #3
 8001cca:	f000 f94f 	bl	8001f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f000 f808 	bl	8001ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd4:	f7ff fcc0 	bl	8001658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40023c00 	.word	0x40023c00

08001ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cec:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <HAL_InitTick+0x54>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_InitTick+0x58>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 f967 	bl	8001fd6 <HAL_SYSTICK_Config>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e00e      	b.n	8001d30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b0f      	cmp	r3, #15
 8001d16:	d80a      	bhi.n	8001d2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d20:	f000 f92f 	bl	8001f82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d24:	4a06      	ldr	r2, [pc, #24]	; (8001d40 <HAL_InitTick+0x5c>)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	e000      	b.n	8001d30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	2000003c 	.word	0x2000003c
 8001d3c:	20000044 	.word	0x20000044
 8001d40:	20000040 	.word	0x20000040

08001d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_IncTick+0x20>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_IncTick+0x24>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4413      	add	r3, r2
 8001d54:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <HAL_IncTick+0x24>)
 8001d56:	6013      	str	r3, [r2, #0]
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	20000044 	.word	0x20000044
 8001d68:	20001df4 	.word	0x20001df4

08001d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d70:	4b03      	ldr	r3, [pc, #12]	; (8001d80 <HAL_GetTick+0x14>)
 8001d72:	681b      	ldr	r3, [r3, #0]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	20001df4 	.word	0x20001df4

08001d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d8c:	f7ff ffee 	bl	8001d6c <HAL_GetTick>
 8001d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9c:	d005      	beq.n	8001daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <HAL_Delay+0x44>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4413      	add	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001daa:	bf00      	nop
 8001dac:	f7ff ffde 	bl	8001d6c <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d8f7      	bhi.n	8001dac <HAL_Delay+0x28>
  {
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	bf00      	nop
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000044 	.word	0x20000044

08001dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <__NVIC_SetPriorityGrouping+0x44>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001de8:	4013      	ands	r3, r2
 8001dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfe:	4a04      	ldr	r2, [pc, #16]	; (8001e10 <__NVIC_SetPriorityGrouping+0x44>)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	60d3      	str	r3, [r2, #12]
}
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e18:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <__NVIC_GetPriorityGrouping+0x18>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	0a1b      	lsrs	r3, r3, #8
 8001e1e:	f003 0307 	and.w	r3, r3, #7
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	db0b      	blt.n	8001e5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	f003 021f 	and.w	r2, r3, #31
 8001e48:	4907      	ldr	r1, [pc, #28]	; (8001e68 <__NVIC_EnableIRQ+0x38>)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	095b      	lsrs	r3, r3, #5
 8001e50:	2001      	movs	r0, #1
 8001e52:	fa00 f202 	lsl.w	r2, r0, r2
 8001e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000e100 	.word	0xe000e100

08001e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	6039      	str	r1, [r7, #0]
 8001e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	db0a      	blt.n	8001e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	490c      	ldr	r1, [pc, #48]	; (8001eb8 <__NVIC_SetPriority+0x4c>)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	0112      	lsls	r2, r2, #4
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	440b      	add	r3, r1
 8001e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e94:	e00a      	b.n	8001eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	4908      	ldr	r1, [pc, #32]	; (8001ebc <__NVIC_SetPriority+0x50>)
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	3b04      	subs	r3, #4
 8001ea4:	0112      	lsls	r2, r2, #4
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	761a      	strb	r2, [r3, #24]
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000e100 	.word	0xe000e100
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b089      	sub	sp, #36	; 0x24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f1c3 0307 	rsb	r3, r3, #7
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	bf28      	it	cs
 8001ede:	2304      	movcs	r3, #4
 8001ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	2b06      	cmp	r3, #6
 8001ee8:	d902      	bls.n	8001ef0 <NVIC_EncodePriority+0x30>
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3b03      	subs	r3, #3
 8001eee:	e000      	b.n	8001ef2 <NVIC_EncodePriority+0x32>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43da      	mvns	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	401a      	ands	r2, r3
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f08:	f04f 31ff 	mov.w	r1, #4294967295
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f12:	43d9      	mvns	r1, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f18:	4313      	orrs	r3, r2
         );
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3724      	adds	r7, #36	; 0x24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f38:	d301      	bcc.n	8001f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e00f      	b.n	8001f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	; (8001f68 <SysTick_Config+0x40>)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f46:	210f      	movs	r1, #15
 8001f48:	f04f 30ff 	mov.w	r0, #4294967295
 8001f4c:	f7ff ff8e 	bl	8001e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <SysTick_Config+0x40>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f56:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <SysTick_Config+0x40>)
 8001f58:	2207      	movs	r2, #7
 8001f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	e000e010 	.word	0xe000e010

08001f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff ff29 	bl	8001dcc <__NVIC_SetPriorityGrouping>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b086      	sub	sp, #24
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	4603      	mov	r3, r0
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
 8001f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f94:	f7ff ff3e 	bl	8001e14 <__NVIC_GetPriorityGrouping>
 8001f98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68b9      	ldr	r1, [r7, #8]
 8001f9e:	6978      	ldr	r0, [r7, #20]
 8001fa0:	f7ff ff8e 	bl	8001ec0 <NVIC_EncodePriority>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001faa:	4611      	mov	r1, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff5d 	bl	8001e6c <__NVIC_SetPriority>
}
 8001fb2:	bf00      	nop
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff31 	bl	8001e30 <__NVIC_EnableIRQ>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff ffa2 	bl	8001f28 <SysTick_Config>
 8001fe4:	4603      	mov	r3, r0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ffc:	f7ff feb6 	bl	8001d6c <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e099      	b.n	8002140 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2202      	movs	r2, #2
 8002010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 0201 	bic.w	r2, r2, #1
 800202a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800202c:	e00f      	b.n	800204e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800202e:	f7ff fe9d 	bl	8001d6c <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b05      	cmp	r3, #5
 800203a:	d908      	bls.n	800204e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2220      	movs	r2, #32
 8002040:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2203      	movs	r2, #3
 8002046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e078      	b.n	8002140 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1e8      	bne.n	800202e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	4b38      	ldr	r3, [pc, #224]	; (8002148 <HAL_DMA_Init+0x158>)
 8002068:	4013      	ands	r3, r2
 800206a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800207a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002086:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002092:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	4313      	orrs	r3, r2
 800209e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	2b04      	cmp	r3, #4
 80020a6:	d107      	bne.n	80020b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	4313      	orrs	r3, r2
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	f023 0307 	bic.w	r3, r3, #7
 80020ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d117      	bne.n	8002112 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00e      	beq.n	8002112 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 fa6f 	bl	80025d8 <DMA_CheckFifoParam>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d008      	beq.n	8002112 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2240      	movs	r2, #64	; 0x40
 8002104:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800210e:	2301      	movs	r3, #1
 8002110:	e016      	b.n	8002140 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 fa26 	bl	800256c <DMA_CalcBaseAndBitshift>
 8002120:	4603      	mov	r3, r0
 8002122:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002128:	223f      	movs	r2, #63	; 0x3f
 800212a:	409a      	lsls	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	f010803f 	.word	0xf010803f

0800214c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
 8002158:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800215a:	2300      	movs	r3, #0
 800215c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002162:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800216a:	2b01      	cmp	r3, #1
 800216c:	d101      	bne.n	8002172 <HAL_DMA_Start_IT+0x26>
 800216e:	2302      	movs	r3, #2
 8002170:	e040      	b.n	80021f4 <HAL_DMA_Start_IT+0xa8>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b01      	cmp	r3, #1
 8002184:	d12f      	bne.n	80021e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2202      	movs	r2, #2
 800218a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	68b9      	ldr	r1, [r7, #8]
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f000 f9b8 	bl	8002510 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a4:	223f      	movs	r2, #63	; 0x3f
 80021a6:	409a      	lsls	r2, r3
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0216 	orr.w	r2, r2, #22
 80021ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d007      	beq.n	80021d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f042 0208 	orr.w	r2, r2, #8
 80021d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 0201 	orr.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	e005      	b.n	80021f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021ee:	2302      	movs	r3, #2
 80021f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002204:	2300      	movs	r3, #0
 8002206:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002208:	4b92      	ldr	r3, [pc, #584]	; (8002454 <HAL_DMA_IRQHandler+0x258>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a92      	ldr	r2, [pc, #584]	; (8002458 <HAL_DMA_IRQHandler+0x25c>)
 800220e:	fba2 2303 	umull	r2, r3, r2, r3
 8002212:	0a9b      	lsrs	r3, r3, #10
 8002214:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002226:	2208      	movs	r2, #8
 8002228:	409a      	lsls	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4013      	ands	r3, r2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d01a      	beq.n	8002268 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d013      	beq.n	8002268 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0204 	bic.w	r2, r2, #4
 800224e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002254:	2208      	movs	r2, #8
 8002256:	409a      	lsls	r2, r3
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002260:	f043 0201 	orr.w	r2, r3, #1
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226c:	2201      	movs	r2, #1
 800226e:	409a      	lsls	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4013      	ands	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d012      	beq.n	800229e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00b      	beq.n	800229e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228a:	2201      	movs	r2, #1
 800228c:	409a      	lsls	r2, r3
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002296:	f043 0202 	orr.w	r2, r3, #2
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a2:	2204      	movs	r2, #4
 80022a4:	409a      	lsls	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	4013      	ands	r3, r2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d012      	beq.n	80022d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00b      	beq.n	80022d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c0:	2204      	movs	r2, #4
 80022c2:	409a      	lsls	r2, r3
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022cc:	f043 0204 	orr.w	r2, r3, #4
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d8:	2210      	movs	r2, #16
 80022da:	409a      	lsls	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4013      	ands	r3, r2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d043      	beq.n	800236c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d03c      	beq.n	800236c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f6:	2210      	movs	r2, #16
 80022f8:	409a      	lsls	r2, r3
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d018      	beq.n	800233e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d108      	bne.n	800232c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	2b00      	cmp	r3, #0
 8002320:	d024      	beq.n	800236c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	4798      	blx	r3
 800232a:	e01f      	b.n	800236c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002330:	2b00      	cmp	r3, #0
 8002332:	d01b      	beq.n	800236c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	4798      	blx	r3
 800233c:	e016      	b.n	800236c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002348:	2b00      	cmp	r3, #0
 800234a:	d107      	bne.n	800235c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0208 	bic.w	r2, r2, #8
 800235a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002370:	2220      	movs	r2, #32
 8002372:	409a      	lsls	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4013      	ands	r3, r2
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 808e 	beq.w	800249a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 8086 	beq.w	800249a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002392:	2220      	movs	r2, #32
 8002394:	409a      	lsls	r2, r3
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b05      	cmp	r3, #5
 80023a4:	d136      	bne.n	8002414 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0216 	bic.w	r2, r2, #22
 80023b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	695a      	ldr	r2, [r3, #20]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d103      	bne.n	80023d6 <HAL_DMA_IRQHandler+0x1da>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d007      	beq.n	80023e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0208 	bic.w	r2, r2, #8
 80023e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ea:	223f      	movs	r2, #63	; 0x3f
 80023ec:	409a      	lsls	r2, r3
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002406:	2b00      	cmp	r3, #0
 8002408:	d07d      	beq.n	8002506 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	4798      	blx	r3
        }
        return;
 8002412:	e078      	b.n	8002506 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d01c      	beq.n	800245c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d108      	bne.n	8002442 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002434:	2b00      	cmp	r3, #0
 8002436:	d030      	beq.n	800249a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	4798      	blx	r3
 8002440:	e02b      	b.n	800249a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002446:	2b00      	cmp	r3, #0
 8002448:	d027      	beq.n	800249a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	4798      	blx	r3
 8002452:	e022      	b.n	800249a <HAL_DMA_IRQHandler+0x29e>
 8002454:	2000003c 	.word	0x2000003c
 8002458:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10f      	bne.n	800248a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0210 	bic.w	r2, r2, #16
 8002478:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d032      	beq.n	8002508 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d022      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2205      	movs	r2, #5
 80024b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0201 	bic.w	r2, r2, #1
 80024c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	3301      	adds	r3, #1
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d307      	bcc.n	80024e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1f2      	bne.n	80024c6 <HAL_DMA_IRQHandler+0x2ca>
 80024e0:	e000      	b.n	80024e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80024e2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d005      	beq.n	8002508 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	4798      	blx	r3
 8002504:	e000      	b.n	8002508 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002506:	bf00      	nop
    }
  }
}
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop

08002510 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
 800251c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800252c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	2b40      	cmp	r3, #64	; 0x40
 800253c:	d108      	bne.n	8002550 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800254e:	e007      	b.n	8002560 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	60da      	str	r2, [r3, #12]
}
 8002560:	bf00      	nop
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	3b10      	subs	r3, #16
 800257c:	4a14      	ldr	r2, [pc, #80]	; (80025d0 <DMA_CalcBaseAndBitshift+0x64>)
 800257e:	fba2 2303 	umull	r2, r3, r2, r3
 8002582:	091b      	lsrs	r3, r3, #4
 8002584:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002586:	4a13      	ldr	r2, [pc, #76]	; (80025d4 <DMA_CalcBaseAndBitshift+0x68>)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4413      	add	r3, r2
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	461a      	mov	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2b03      	cmp	r3, #3
 8002598:	d909      	bls.n	80025ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025a2:	f023 0303 	bic.w	r3, r3, #3
 80025a6:	1d1a      	adds	r2, r3, #4
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	659a      	str	r2, [r3, #88]	; 0x58
 80025ac:	e007      	b.n	80025be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025b6:	f023 0303 	bic.w	r3, r3, #3
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	aaaaaaab 	.word	0xaaaaaaab
 80025d4:	0800a2b0 	.word	0x0800a2b0

080025d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025e0:	2300      	movs	r3, #0
 80025e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d11f      	bne.n	8002632 <DMA_CheckFifoParam+0x5a>
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d856      	bhi.n	80026a6 <DMA_CheckFifoParam+0xce>
 80025f8:	a201      	add	r2, pc, #4	; (adr r2, 8002600 <DMA_CheckFifoParam+0x28>)
 80025fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025fe:	bf00      	nop
 8002600:	08002611 	.word	0x08002611
 8002604:	08002623 	.word	0x08002623
 8002608:	08002611 	.word	0x08002611
 800260c:	080026a7 	.word	0x080026a7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002614:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d046      	beq.n	80026aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002620:	e043      	b.n	80026aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002626:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800262a:	d140      	bne.n	80026ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002630:	e03d      	b.n	80026ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800263a:	d121      	bne.n	8002680 <DMA_CheckFifoParam+0xa8>
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	2b03      	cmp	r3, #3
 8002640:	d837      	bhi.n	80026b2 <DMA_CheckFifoParam+0xda>
 8002642:	a201      	add	r2, pc, #4	; (adr r2, 8002648 <DMA_CheckFifoParam+0x70>)
 8002644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002648:	08002659 	.word	0x08002659
 800264c:	0800265f 	.word	0x0800265f
 8002650:	08002659 	.word	0x08002659
 8002654:	08002671 	.word	0x08002671
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	73fb      	strb	r3, [r7, #15]
      break;
 800265c:	e030      	b.n	80026c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002662:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d025      	beq.n	80026b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800266e:	e022      	b.n	80026b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002674:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002678:	d11f      	bne.n	80026ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800267e:	e01c      	b.n	80026ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d903      	bls.n	800268e <DMA_CheckFifoParam+0xb6>
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2b03      	cmp	r3, #3
 800268a:	d003      	beq.n	8002694 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800268c:	e018      	b.n	80026c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	73fb      	strb	r3, [r7, #15]
      break;
 8002692:	e015      	b.n	80026c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002698:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00e      	beq.n	80026be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	73fb      	strb	r3, [r7, #15]
      break;
 80026a4:	e00b      	b.n	80026be <DMA_CheckFifoParam+0xe6>
      break;
 80026a6:	bf00      	nop
 80026a8:	e00a      	b.n	80026c0 <DMA_CheckFifoParam+0xe8>
      break;
 80026aa:	bf00      	nop
 80026ac:	e008      	b.n	80026c0 <DMA_CheckFifoParam+0xe8>
      break;
 80026ae:	bf00      	nop
 80026b0:	e006      	b.n	80026c0 <DMA_CheckFifoParam+0xe8>
      break;
 80026b2:	bf00      	nop
 80026b4:	e004      	b.n	80026c0 <DMA_CheckFifoParam+0xe8>
      break;
 80026b6:	bf00      	nop
 80026b8:	e002      	b.n	80026c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80026ba:	bf00      	nop
 80026bc:	e000      	b.n	80026c0 <DMA_CheckFifoParam+0xe8>
      break;
 80026be:	bf00      	nop
    }
  } 
  
  return status; 
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop

080026d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b089      	sub	sp, #36	; 0x24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026de:	2300      	movs	r3, #0
 80026e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
 80026ea:	e159      	b.n	80029a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026ec:	2201      	movs	r2, #1
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	4013      	ands	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	429a      	cmp	r2, r3
 8002706:	f040 8148 	bne.w	800299a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	2b01      	cmp	r3, #1
 8002714:	d005      	beq.n	8002722 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800271e:	2b02      	cmp	r3, #2
 8002720:	d130      	bne.n	8002784 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	2203      	movs	r2, #3
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002758:	2201      	movs	r2, #1
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	091b      	lsrs	r3, r3, #4
 800276e:	f003 0201 	and.w	r2, r3, #1
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	2b03      	cmp	r3, #3
 800278e:	d017      	beq.n	80027c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	2203      	movs	r2, #3
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 0303 	and.w	r3, r3, #3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d123      	bne.n	8002814 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	08da      	lsrs	r2, r3, #3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3208      	adds	r2, #8
 80027d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	220f      	movs	r2, #15
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	691a      	ldr	r2, [r3, #16]
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	08da      	lsrs	r2, r3, #3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3208      	adds	r2, #8
 800280e:	69b9      	ldr	r1, [r7, #24]
 8002810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	2203      	movs	r2, #3
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 0203 	and.w	r2, r3, #3
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 80a2 	beq.w	800299a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	4b57      	ldr	r3, [pc, #348]	; (80029b8 <HAL_GPIO_Init+0x2e8>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285e:	4a56      	ldr	r2, [pc, #344]	; (80029b8 <HAL_GPIO_Init+0x2e8>)
 8002860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002864:	6453      	str	r3, [r2, #68]	; 0x44
 8002866:	4b54      	ldr	r3, [pc, #336]	; (80029b8 <HAL_GPIO_Init+0x2e8>)
 8002868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002872:	4a52      	ldr	r2, [pc, #328]	; (80029bc <HAL_GPIO_Init+0x2ec>)
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	089b      	lsrs	r3, r3, #2
 8002878:	3302      	adds	r3, #2
 800287a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800287e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	220f      	movs	r2, #15
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a49      	ldr	r2, [pc, #292]	; (80029c0 <HAL_GPIO_Init+0x2f0>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d019      	beq.n	80028d2 <HAL_GPIO_Init+0x202>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a48      	ldr	r2, [pc, #288]	; (80029c4 <HAL_GPIO_Init+0x2f4>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d013      	beq.n	80028ce <HAL_GPIO_Init+0x1fe>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a47      	ldr	r2, [pc, #284]	; (80029c8 <HAL_GPIO_Init+0x2f8>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d00d      	beq.n	80028ca <HAL_GPIO_Init+0x1fa>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a46      	ldr	r2, [pc, #280]	; (80029cc <HAL_GPIO_Init+0x2fc>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d007      	beq.n	80028c6 <HAL_GPIO_Init+0x1f6>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a45      	ldr	r2, [pc, #276]	; (80029d0 <HAL_GPIO_Init+0x300>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d101      	bne.n	80028c2 <HAL_GPIO_Init+0x1f2>
 80028be:	2304      	movs	r3, #4
 80028c0:	e008      	b.n	80028d4 <HAL_GPIO_Init+0x204>
 80028c2:	2307      	movs	r3, #7
 80028c4:	e006      	b.n	80028d4 <HAL_GPIO_Init+0x204>
 80028c6:	2303      	movs	r3, #3
 80028c8:	e004      	b.n	80028d4 <HAL_GPIO_Init+0x204>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e002      	b.n	80028d4 <HAL_GPIO_Init+0x204>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <HAL_GPIO_Init+0x204>
 80028d2:	2300      	movs	r3, #0
 80028d4:	69fa      	ldr	r2, [r7, #28]
 80028d6:	f002 0203 	and.w	r2, r2, #3
 80028da:	0092      	lsls	r2, r2, #2
 80028dc:	4093      	lsls	r3, r2
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028e4:	4935      	ldr	r1, [pc, #212]	; (80029bc <HAL_GPIO_Init+0x2ec>)
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	089b      	lsrs	r3, r3, #2
 80028ea:	3302      	adds	r3, #2
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028f2:	4b38      	ldr	r3, [pc, #224]	; (80029d4 <HAL_GPIO_Init+0x304>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	43db      	mvns	r3, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4013      	ands	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002916:	4a2f      	ldr	r2, [pc, #188]	; (80029d4 <HAL_GPIO_Init+0x304>)
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800291c:	4b2d      	ldr	r3, [pc, #180]	; (80029d4 <HAL_GPIO_Init+0x304>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4313      	orrs	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002940:	4a24      	ldr	r2, [pc, #144]	; (80029d4 <HAL_GPIO_Init+0x304>)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002946:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <HAL_GPIO_Init+0x304>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4313      	orrs	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800296a:	4a1a      	ldr	r2, [pc, #104]	; (80029d4 <HAL_GPIO_Init+0x304>)
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002970:	4b18      	ldr	r3, [pc, #96]	; (80029d4 <HAL_GPIO_Init+0x304>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002994:	4a0f      	ldr	r2, [pc, #60]	; (80029d4 <HAL_GPIO_Init+0x304>)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	3301      	adds	r3, #1
 800299e:	61fb      	str	r3, [r7, #28]
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	2b0f      	cmp	r3, #15
 80029a4:	f67f aea2 	bls.w	80026ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029a8:	bf00      	nop
 80029aa:	bf00      	nop
 80029ac:	3724      	adds	r7, #36	; 0x24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40023800 	.word	0x40023800
 80029bc:	40013800 	.word	0x40013800
 80029c0:	40020000 	.word	0x40020000
 80029c4:	40020400 	.word	0x40020400
 80029c8:	40020800 	.word	0x40020800
 80029cc:	40020c00 	.word	0x40020c00
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40013c00 	.word	0x40013c00

080029d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	887b      	ldrh	r3, [r7, #2]
 80029ea:	4013      	ands	r3, r2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d002      	beq.n	80029f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029f0:	2301      	movs	r3, #1
 80029f2:	73fb      	strb	r3, [r7, #15]
 80029f4:	e001      	b.n	80029fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029f6:	2300      	movs	r3, #0
 80029f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	460b      	mov	r3, r1
 8002a12:	807b      	strh	r3, [r7, #2]
 8002a14:	4613      	mov	r3, r2
 8002a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a18:	787b      	ldrb	r3, [r7, #1]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a1e:	887a      	ldrh	r2, [r7, #2]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a24:	e003      	b.n	8002a2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a26:	887b      	ldrh	r3, [r7, #2]
 8002a28:	041a      	lsls	r2, r3, #16
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	619a      	str	r2, [r3, #24]
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a3c:	b08f      	sub	sp, #60	; 0x3c
 8002a3e:	af0a      	add	r7, sp, #40	; 0x28
 8002a40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e10f      	b.n	8002c6c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d106      	bne.n	8002a6c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f006 f942 	bl	8008cf0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2203      	movs	r2, #3
 8002a70:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d102      	bne.n	8002a86 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f003 f835 	bl	8005afa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	603b      	str	r3, [r7, #0]
 8002a96:	687e      	ldr	r6, [r7, #4]
 8002a98:	466d      	mov	r5, sp
 8002a9a:	f106 0410 	add.w	r4, r6, #16
 8002a9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aa6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002aaa:	e885 0003 	stmia.w	r5, {r0, r1}
 8002aae:	1d33      	adds	r3, r6, #4
 8002ab0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ab2:	6838      	ldr	r0, [r7, #0]
 8002ab4:	f002 ff0c 	bl	80058d0 <USB_CoreInit>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d005      	beq.n	8002aca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e0d0      	b.n	8002c6c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2100      	movs	r1, #0
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f003 f823 	bl	8005b1c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	73fb      	strb	r3, [r7, #15]
 8002ada:	e04a      	b.n	8002b72 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002adc:	7bfa      	ldrb	r2, [r7, #15]
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	1a9b      	subs	r3, r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	333d      	adds	r3, #61	; 0x3d
 8002aec:	2201      	movs	r2, #1
 8002aee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002af0:	7bfa      	ldrb	r2, [r7, #15]
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	333c      	adds	r3, #60	; 0x3c
 8002b00:	7bfa      	ldrb	r2, [r7, #15]
 8002b02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b04:	7bfa      	ldrb	r2, [r7, #15]
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
 8002b08:	b298      	uxth	r0, r3
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	1a9b      	subs	r3, r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	3342      	adds	r3, #66	; 0x42
 8002b18:	4602      	mov	r2, r0
 8002b1a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b1c:	7bfa      	ldrb	r2, [r7, #15]
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	4613      	mov	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	1a9b      	subs	r3, r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	333f      	adds	r3, #63	; 0x3f
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b30:	7bfa      	ldrb	r2, [r7, #15]
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	1a9b      	subs	r3, r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	3344      	adds	r3, #68	; 0x44
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b44:	7bfa      	ldrb	r2, [r7, #15]
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	1a9b      	subs	r3, r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	3348      	adds	r3, #72	; 0x48
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b58:	7bfa      	ldrb	r2, [r7, #15]
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	1a9b      	subs	r3, r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	3350      	adds	r3, #80	; 0x50
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	73fb      	strb	r3, [r7, #15]
 8002b72:	7bfa      	ldrb	r2, [r7, #15]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d3af      	bcc.n	8002adc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	73fb      	strb	r3, [r7, #15]
 8002b80:	e044      	b.n	8002c0c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b82:	7bfa      	ldrb	r2, [r7, #15]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	1a9b      	subs	r3, r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002b94:	2200      	movs	r2, #0
 8002b96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b98:	7bfa      	ldrb	r2, [r7, #15]
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	1a9b      	subs	r3, r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002baa:	7bfa      	ldrb	r2, [r7, #15]
 8002bac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bae:	7bfa      	ldrb	r2, [r7, #15]
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	1a9b      	subs	r3, r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bc4:	7bfa      	ldrb	r2, [r7, #15]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bda:	7bfa      	ldrb	r2, [r7, #15]
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	1a9b      	subs	r3, r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bf0:	7bfa      	ldrb	r2, [r7, #15]
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	1a9b      	subs	r3, r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c06:	7bfb      	ldrb	r3, [r7, #15]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	73fb      	strb	r3, [r7, #15]
 8002c0c:	7bfa      	ldrb	r2, [r7, #15]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d3b5      	bcc.n	8002b82 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	687e      	ldr	r6, [r7, #4]
 8002c1e:	466d      	mov	r5, sp
 8002c20:	f106 0410 	add.w	r4, r6, #16
 8002c24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c30:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c34:	1d33      	adds	r3, r6, #4
 8002c36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c38:	6838      	ldr	r0, [r7, #0]
 8002c3a:	f002 ffbb 	bl	8005bb4 <USB_DevInit>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2202      	movs	r2, #2
 8002c48:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e00d      	b.n	8002c6c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f004 f837 	bl	8006cd8 <USB_DevDisconnect>

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c74 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <HAL_PCD_Start+0x1c>
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	e020      	b.n	8002cd2 <HAL_PCD_Start+0x5e>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d109      	bne.n	8002cb4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d005      	beq.n	8002cb4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f002 ff0d 	bl	8005ad8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f003 ffe7 	bl	8006c96 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002cda:	b590      	push	{r4, r7, lr}
 8002cdc:	b08d      	sub	sp, #52	; 0x34
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f004 f8a5 	bl	8006e40 <USB_GetMode>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f040 839d 	bne.w	8003438 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f004 f809 	bl	8006d1a <USB_ReadInterrupts>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 8393 	beq.w	8003436 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f004 f800 	bl	8006d1a <USB_ReadInterrupts>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d107      	bne.n	8002d34 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695a      	ldr	r2, [r3, #20]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f002 0202 	and.w	r2, r2, #2
 8002d32:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f003 ffee 	bl	8006d1a <USB_ReadInterrupts>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	f003 0310 	and.w	r3, r3, #16
 8002d44:	2b10      	cmp	r3, #16
 8002d46:	d161      	bne.n	8002e0c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699a      	ldr	r2, [r3, #24]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0210 	bic.w	r2, r2, #16
 8002d56:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	f003 020f 	and.w	r2, r3, #15
 8002d64:	4613      	mov	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	4413      	add	r3, r2
 8002d74:	3304      	adds	r3, #4
 8002d76:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	0c5b      	lsrs	r3, r3, #17
 8002d7c:	f003 030f 	and.w	r3, r3, #15
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d124      	bne.n	8002dce <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d035      	beq.n	8002dfc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	091b      	lsrs	r3, r3, #4
 8002d98:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	461a      	mov	r2, r3
 8002da2:	6a38      	ldr	r0, [r7, #32]
 8002da4:	f003 fe25 	bl	80069f2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	091b      	lsrs	r3, r3, #4
 8002db0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002db4:	441a      	add	r2, r3
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	699a      	ldr	r2, [r3, #24]
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	091b      	lsrs	r3, r3, #4
 8002dc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dc6:	441a      	add	r2, r3
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	619a      	str	r2, [r3, #24]
 8002dcc:	e016      	b.n	8002dfc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	0c5b      	lsrs	r3, r3, #17
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	2b06      	cmp	r3, #6
 8002dd8:	d110      	bne.n	8002dfc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002de0:	2208      	movs	r2, #8
 8002de2:	4619      	mov	r1, r3
 8002de4:	6a38      	ldr	r0, [r7, #32]
 8002de6:	f003 fe04 	bl	80069f2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	699a      	ldr	r2, [r3, #24]
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	091b      	lsrs	r3, r3, #4
 8002df2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002df6:	441a      	add	r2, r3
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699a      	ldr	r2, [r3, #24]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0210 	orr.w	r2, r2, #16
 8002e0a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f003 ff82 	bl	8006d1a <USB_ReadInterrupts>
 8002e16:	4603      	mov	r3, r0
 8002e18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e1c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e20:	d16e      	bne.n	8002f00 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f003 ff88 	bl	8006d40 <USB_ReadDevAllOutEpInterrupt>
 8002e30:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002e32:	e062      	b.n	8002efa <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d057      	beq.n	8002eee <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	4611      	mov	r1, r2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f003 ffad 	bl	8006da8 <USB_ReadDevOutEPInterrupt>
 8002e4e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00c      	beq.n	8002e74 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e66:	461a      	mov	r2, r3
 8002e68:	2301      	movs	r3, #1
 8002e6a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002e6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 fdb0 	bl	80039d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00c      	beq.n	8002e98 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	015a      	lsls	r2, r3, #5
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	4413      	add	r3, r2
 8002e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	2308      	movs	r3, #8
 8002e8e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002e90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 feaa 	bl	8003bec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	f003 0310 	and.w	r3, r3, #16
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d008      	beq.n	8002eb4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	015a      	lsls	r2, r3, #5
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eae:	461a      	mov	r2, r3
 8002eb0:	2310      	movs	r3, #16
 8002eb2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	f003 0320 	and.w	r3, r3, #32
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d008      	beq.n	8002ed0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	015a      	lsls	r2, r3, #5
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eca:	461a      	mov	r2, r3
 8002ecc:	2320      	movs	r3, #32
 8002ece:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d009      	beq.n	8002eee <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	015a      	lsls	r2, r3, #5
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002eec:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef6:	085b      	lsrs	r3, r3, #1
 8002ef8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d199      	bne.n	8002e34 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f003 ff08 	bl	8006d1a <USB_ReadInterrupts>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f14:	f040 80c0 	bne.w	8003098 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f003 ff29 	bl	8006d74 <USB_ReadDevAllInEpInterrupt>
 8002f22:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002f28:	e0b2      	b.n	8003090 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 80a7 	beq.w	8003084 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	4611      	mov	r1, r2
 8002f40:	4618      	mov	r0, r3
 8002f42:	f003 ff4f 	bl	8006de4 <USB_ReadDevInEPInterrupt>
 8002f46:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d057      	beq.n	8003002 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	f003 030f 	and.w	r3, r3, #15
 8002f58:	2201      	movs	r2, #1
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	69f9      	ldr	r1, [r7, #28]
 8002f6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f72:	4013      	ands	r3, r2
 8002f74:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	015a      	lsls	r2, r3, #5
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f82:	461a      	mov	r2, r3
 8002f84:	2301      	movs	r3, #1
 8002f86:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d132      	bne.n	8002ff6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f94:	4613      	mov	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	1a9b      	subs	r3, r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	3348      	adds	r3, #72	; 0x48
 8002fa0:	6819      	ldr	r1, [r3, #0]
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	1a9b      	subs	r3, r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4403      	add	r3, r0
 8002fb0:	3344      	adds	r3, #68	; 0x44
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4419      	add	r1, r3
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fba:	4613      	mov	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	1a9b      	subs	r3, r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4403      	add	r3, r0
 8002fc4:	3348      	adds	r3, #72	; 0x48
 8002fc6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d113      	bne.n	8002ff6 <HAL_PCD_IRQHandler+0x31c>
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	1a9b      	subs	r3, r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	440b      	add	r3, r1
 8002fdc:	3350      	adds	r3, #80	; 0x50
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d108      	bne.n	8002ff6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6818      	ldr	r0, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fee:	461a      	mov	r2, r3
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	f003 ff57 	bl	8006ea4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f005 fef8 	bl	8008df2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b00      	cmp	r3, #0
 800300a:	d008      	beq.n	800301e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	4413      	add	r3, r2
 8003014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003018:	461a      	mov	r2, r3
 800301a:	2308      	movs	r3, #8
 800301c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	2b00      	cmp	r3, #0
 8003026:	d008      	beq.n	800303a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	015a      	lsls	r2, r3, #5
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	4413      	add	r3, r2
 8003030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003034:	461a      	mov	r2, r3
 8003036:	2310      	movs	r3, #16
 8003038:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	015a      	lsls	r2, r3, #5
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	4413      	add	r3, r2
 800304c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003050:	461a      	mov	r2, r3
 8003052:	2340      	movs	r3, #64	; 0x40
 8003054:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	4413      	add	r3, r2
 8003068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800306c:	461a      	mov	r2, r3
 800306e:	2302      	movs	r3, #2
 8003070:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800307c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 fc1b 	bl	80038ba <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003086:	3301      	adds	r3, #1
 8003088:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800308a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308c:	085b      	lsrs	r3, r3, #1
 800308e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003092:	2b00      	cmp	r3, #0
 8003094:	f47f af49 	bne.w	8002f2a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f003 fe3c 	bl	8006d1a <USB_ReadInterrupts>
 80030a2:	4603      	mov	r3, r0
 80030a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030ac:	d122      	bne.n	80030f4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	69fa      	ldr	r2, [r7, #28]
 80030b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030bc:	f023 0301 	bic.w	r3, r3, #1
 80030c0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d108      	bne.n	80030de <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80030d4:	2100      	movs	r1, #0
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 fe26 	bl	8003d28 <HAL_PCDEx_LPM_Callback>
 80030dc:	e002      	b.n	80030e4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f005 fef4 	bl	8008ecc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695a      	ldr	r2, [r3, #20]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80030f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f003 fe0e 	bl	8006d1a <USB_ReadInterrupts>
 80030fe:	4603      	mov	r3, r0
 8003100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003104:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003108:	d112      	bne.n	8003130 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b01      	cmp	r3, #1
 8003118:	d102      	bne.n	8003120 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f005 feb0 	bl	8008e80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800312e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f003 fdf0 	bl	8006d1a <USB_ReadInterrupts>
 800313a:	4603      	mov	r3, r0
 800313c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003144:	f040 80c7 	bne.w	80032d6 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	69fa      	ldr	r2, [r7, #28]
 8003152:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003156:	f023 0301 	bic.w	r3, r3, #1
 800315a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2110      	movs	r1, #16
 8003162:	4618      	mov	r0, r3
 8003164:	f002 fe8a 	bl	8005e7c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003168:	2300      	movs	r3, #0
 800316a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800316c:	e056      	b.n	800321c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800316e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003170:	015a      	lsls	r2, r3, #5
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	4413      	add	r3, r2
 8003176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800317a:	461a      	mov	r2, r3
 800317c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003180:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003184:	015a      	lsls	r2, r3, #5
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	4413      	add	r3, r2
 800318a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003192:	0151      	lsls	r1, r2, #5
 8003194:	69fa      	ldr	r2, [r7, #28]
 8003196:	440a      	add	r2, r1
 8003198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800319c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031a0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80031a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031b2:	0151      	lsls	r1, r2, #5
 80031b4:	69fa      	ldr	r2, [r7, #28]
 80031b6:	440a      	add	r2, r1
 80031b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80031c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80031c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ce:	461a      	mov	r2, r3
 80031d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031d4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80031d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d8:	015a      	lsls	r2, r3, #5
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	4413      	add	r3, r2
 80031de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031e6:	0151      	lsls	r1, r2, #5
 80031e8:	69fa      	ldr	r2, [r7, #28]
 80031ea:	440a      	add	r2, r1
 80031ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80031f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f8:	015a      	lsls	r2, r3, #5
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	4413      	add	r3, r2
 80031fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003206:	0151      	lsls	r1, r2, #5
 8003208:	69fa      	ldr	r2, [r7, #28]
 800320a:	440a      	add	r2, r1
 800320c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003210:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003214:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003218:	3301      	adds	r3, #1
 800321a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003222:	429a      	cmp	r2, r3
 8003224:	d3a3      	bcc.n	800316e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	69fa      	ldr	r2, [r7, #28]
 8003230:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003234:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003238:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	2b00      	cmp	r3, #0
 8003240:	d016      	beq.n	8003270 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003248:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800324c:	69fa      	ldr	r2, [r7, #28]
 800324e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003252:	f043 030b 	orr.w	r3, r3, #11
 8003256:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003262:	69fa      	ldr	r2, [r7, #28]
 8003264:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003268:	f043 030b 	orr.w	r3, r3, #11
 800326c:	6453      	str	r3, [r2, #68]	; 0x44
 800326e:	e015      	b.n	800329c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	69fa      	ldr	r2, [r7, #28]
 800327a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800327e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003282:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003286:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	69fa      	ldr	r2, [r7, #28]
 8003292:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003296:	f043 030b 	orr.w	r3, r3, #11
 800329a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	69fa      	ldr	r2, [r7, #28]
 80032a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032aa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80032ae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6818      	ldr	r0, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032c0:	461a      	mov	r2, r3
 80032c2:	f003 fdef 	bl	8006ea4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695a      	ldr	r2, [r3, #20]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80032d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f003 fd1d 	bl	8006d1a <USB_ReadInterrupts>
 80032e0:	4603      	mov	r3, r0
 80032e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ea:	d124      	bne.n	8003336 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f003 fdb3 	bl	8006e5c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f002 fe1b 	bl	8005f36 <USB_GetDevSpeed>
 8003300:	4603      	mov	r3, r0
 8003302:	461a      	mov	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681c      	ldr	r4, [r3, #0]
 800330c:	f001 f92c 	bl	8004568 <HAL_RCC_GetHCLKFreq>
 8003310:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003316:	b2db      	uxtb	r3, r3
 8003318:	461a      	mov	r2, r3
 800331a:	4620      	mov	r0, r4
 800331c:	f002 fb3a 	bl	8005994 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f005 fd8e 	bl	8008e42 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	695a      	ldr	r2, [r3, #20]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003334:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f003 fced 	bl	8006d1a <USB_ReadInterrupts>
 8003340:	4603      	mov	r3, r0
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b08      	cmp	r3, #8
 8003348:	d10a      	bne.n	8003360 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f005 fd6b 	bl	8008e26 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695a      	ldr	r2, [r3, #20]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f002 0208 	and.w	r2, r2, #8
 800335e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f003 fcd8 	bl	8006d1a <USB_ReadInterrupts>
 800336a:	4603      	mov	r3, r0
 800336c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003370:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003374:	d10f      	bne.n	8003396 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003376:	2300      	movs	r3, #0
 8003378:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	b2db      	uxtb	r3, r3
 800337e:	4619      	mov	r1, r3
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f005 fdc3 	bl	8008f0c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695a      	ldr	r2, [r3, #20]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003394:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f003 fcbd 	bl	8006d1a <USB_ReadInterrupts>
 80033a0:	4603      	mov	r3, r0
 80033a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033aa:	d10f      	bne.n	80033cc <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	4619      	mov	r1, r3
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f005 fd96 	bl	8008ee8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	695a      	ldr	r2, [r3, #20]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80033ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f003 fca2 	bl	8006d1a <USB_ReadInterrupts>
 80033d6:	4603      	mov	r3, r0
 80033d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80033dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e0:	d10a      	bne.n	80033f8 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f005 fda4 	bl	8008f30 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	695a      	ldr	r2, [r3, #20]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80033f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f003 fc8c 	bl	8006d1a <USB_ReadInterrupts>
 8003402:	4603      	mov	r3, r0
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b04      	cmp	r3, #4
 800340a:	d115      	bne.n	8003438 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	f003 0304 	and.w	r3, r3, #4
 800341a:	2b00      	cmp	r3, #0
 800341c:	d002      	beq.n	8003424 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f005 fd94 	bl	8008f4c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6859      	ldr	r1, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	430a      	orrs	r2, r1
 8003432:	605a      	str	r2, [r3, #4]
 8003434:	e000      	b.n	8003438 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003436:	bf00      	nop
    }
  }
}
 8003438:	3734      	adds	r7, #52	; 0x34
 800343a:	46bd      	mov	sp, r7
 800343c:	bd90      	pop	{r4, r7, pc}

0800343e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b082      	sub	sp, #8
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
 8003446:	460b      	mov	r3, r1
 8003448:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003450:	2b01      	cmp	r3, #1
 8003452:	d101      	bne.n	8003458 <HAL_PCD_SetAddress+0x1a>
 8003454:	2302      	movs	r3, #2
 8003456:	e013      	b.n	8003480 <HAL_PCD_SetAddress+0x42>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	78fa      	ldrb	r2, [r7, #3]
 8003464:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	78fa      	ldrb	r2, [r7, #3]
 800346e:	4611      	mov	r1, r2
 8003470:	4618      	mov	r0, r3
 8003472:	f003 fbea 	bl	8006c4a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	4608      	mov	r0, r1
 8003492:	4611      	mov	r1, r2
 8003494:	461a      	mov	r2, r3
 8003496:	4603      	mov	r3, r0
 8003498:	70fb      	strb	r3, [r7, #3]
 800349a:	460b      	mov	r3, r1
 800349c:	803b      	strh	r3, [r7, #0]
 800349e:	4613      	mov	r3, r2
 80034a0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80034a2:	2300      	movs	r3, #0
 80034a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	da0f      	bge.n	80034ce <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034ae:	78fb      	ldrb	r3, [r7, #3]
 80034b0:	f003 020f 	and.w	r2, r3, #15
 80034b4:	4613      	mov	r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	1a9b      	subs	r3, r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	3338      	adds	r3, #56	; 0x38
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	4413      	add	r3, r2
 80034c2:	3304      	adds	r3, #4
 80034c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2201      	movs	r2, #1
 80034ca:	705a      	strb	r2, [r3, #1]
 80034cc:	e00f      	b.n	80034ee <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034ce:	78fb      	ldrb	r3, [r7, #3]
 80034d0:	f003 020f 	and.w	r2, r3, #15
 80034d4:	4613      	mov	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	4413      	add	r3, r2
 80034e4:	3304      	adds	r3, #4
 80034e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034ee:	78fb      	ldrb	r3, [r7, #3]
 80034f0:	f003 030f 	and.w	r3, r3, #15
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80034fa:	883a      	ldrh	r2, [r7, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	78ba      	ldrb	r2, [r7, #2]
 8003504:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	785b      	ldrb	r3, [r3, #1]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d004      	beq.n	8003518 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	b29a      	uxth	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003518:	78bb      	ldrb	r3, [r7, #2]
 800351a:	2b02      	cmp	r3, #2
 800351c:	d102      	bne.n	8003524 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800352a:	2b01      	cmp	r3, #1
 800352c:	d101      	bne.n	8003532 <HAL_PCD_EP_Open+0xaa>
 800352e:	2302      	movs	r3, #2
 8003530:	e00e      	b.n	8003550 <HAL_PCD_EP_Open+0xc8>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68f9      	ldr	r1, [r7, #12]
 8003540:	4618      	mov	r0, r3
 8003542:	f002 fd1d 	bl	8005f80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800354e:	7afb      	ldrb	r3, [r7, #11]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	460b      	mov	r3, r1
 8003562:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003564:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003568:	2b00      	cmp	r3, #0
 800356a:	da0f      	bge.n	800358c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800356c:	78fb      	ldrb	r3, [r7, #3]
 800356e:	f003 020f 	and.w	r2, r3, #15
 8003572:	4613      	mov	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	1a9b      	subs	r3, r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	3338      	adds	r3, #56	; 0x38
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	4413      	add	r3, r2
 8003580:	3304      	adds	r3, #4
 8003582:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2201      	movs	r2, #1
 8003588:	705a      	strb	r2, [r3, #1]
 800358a:	e00f      	b.n	80035ac <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800358c:	78fb      	ldrb	r3, [r7, #3]
 800358e:	f003 020f 	and.w	r2, r3, #15
 8003592:	4613      	mov	r3, r2
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	1a9b      	subs	r3, r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	4413      	add	r3, r2
 80035a2:	3304      	adds	r3, #4
 80035a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80035ac:	78fb      	ldrb	r3, [r7, #3]
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d101      	bne.n	80035c6 <HAL_PCD_EP_Close+0x6e>
 80035c2:	2302      	movs	r3, #2
 80035c4:	e00e      	b.n	80035e4 <HAL_PCD_EP_Close+0x8c>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68f9      	ldr	r1, [r7, #12]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f002 fd5b 	bl	8006090 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	607a      	str	r2, [r7, #4]
 80035f6:	603b      	str	r3, [r7, #0]
 80035f8:	460b      	mov	r3, r1
 80035fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035fc:	7afb      	ldrb	r3, [r7, #11]
 80035fe:	f003 020f 	and.w	r2, r3, #15
 8003602:	4613      	mov	r3, r2
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	1a9b      	subs	r3, r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	4413      	add	r3, r2
 8003612:	3304      	adds	r3, #4
 8003614:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2200      	movs	r2, #0
 8003626:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	2200      	movs	r2, #0
 800362c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800362e:	7afb      	ldrb	r3, [r7, #11]
 8003630:	f003 030f 	and.w	r3, r3, #15
 8003634:	b2da      	uxtb	r2, r3
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d102      	bne.n	8003648 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003648:	7afb      	ldrb	r3, [r7, #11]
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	2b00      	cmp	r3, #0
 8003650:	d109      	bne.n	8003666 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	b2db      	uxtb	r3, r3
 800365c:	461a      	mov	r2, r3
 800365e:	6979      	ldr	r1, [r7, #20]
 8003660:	f003 f836 	bl	80066d0 <USB_EP0StartXfer>
 8003664:	e008      	b.n	8003678 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6818      	ldr	r0, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	b2db      	uxtb	r3, r3
 8003670:	461a      	mov	r2, r3
 8003672:	6979      	ldr	r1, [r7, #20]
 8003674:	f002 fde8 	bl	8006248 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	460b      	mov	r3, r1
 800368c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800368e:	78fb      	ldrb	r3, [r7, #3]
 8003690:	f003 020f 	and.w	r2, r3, #15
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	1a9b      	subs	r3, r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80036a4:	681b      	ldr	r3, [r3, #0]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b086      	sub	sp, #24
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	60f8      	str	r0, [r7, #12]
 80036ba:	607a      	str	r2, [r7, #4]
 80036bc:	603b      	str	r3, [r7, #0]
 80036be:	460b      	mov	r3, r1
 80036c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036c2:	7afb      	ldrb	r3, [r7, #11]
 80036c4:	f003 020f 	and.w	r2, r3, #15
 80036c8:	4613      	mov	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	1a9b      	subs	r3, r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	3338      	adds	r3, #56	; 0x38
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	4413      	add	r3, r2
 80036d6:	3304      	adds	r3, #4
 80036d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	2200      	movs	r2, #0
 80036ea:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	2201      	movs	r2, #1
 80036f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036f2:	7afb      	ldrb	r3, [r7, #11]
 80036f4:	f003 030f 	and.w	r3, r3, #15
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d102      	bne.n	800370c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800370c:	7afb      	ldrb	r3, [r7, #11]
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	2b00      	cmp	r3, #0
 8003714:	d109      	bne.n	800372a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6818      	ldr	r0, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	b2db      	uxtb	r3, r3
 8003720:	461a      	mov	r2, r3
 8003722:	6979      	ldr	r1, [r7, #20]
 8003724:	f002 ffd4 	bl	80066d0 <USB_EP0StartXfer>
 8003728:	e008      	b.n	800373c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6818      	ldr	r0, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	b2db      	uxtb	r3, r3
 8003734:	461a      	mov	r2, r3
 8003736:	6979      	ldr	r1, [r7, #20]
 8003738:	f002 fd86 	bl	8006248 <USB_EPStartXfer>
  }

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b084      	sub	sp, #16
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	460b      	mov	r3, r1
 8003750:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003752:	78fb      	ldrb	r3, [r7, #3]
 8003754:	f003 020f 	and.w	r2, r3, #15
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	429a      	cmp	r2, r3
 800375e:	d901      	bls.n	8003764 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e050      	b.n	8003806 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003764:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003768:	2b00      	cmp	r3, #0
 800376a:	da0f      	bge.n	800378c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800376c:	78fb      	ldrb	r3, [r7, #3]
 800376e:	f003 020f 	and.w	r2, r3, #15
 8003772:	4613      	mov	r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	1a9b      	subs	r3, r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	3338      	adds	r3, #56	; 0x38
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	4413      	add	r3, r2
 8003780:	3304      	adds	r3, #4
 8003782:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2201      	movs	r2, #1
 8003788:	705a      	strb	r2, [r3, #1]
 800378a:	e00d      	b.n	80037a8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	4613      	mov	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	1a9b      	subs	r3, r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	4413      	add	r3, r2
 800379e:	3304      	adds	r3, #4
 80037a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2201      	movs	r2, #1
 80037ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037ae:	78fb      	ldrb	r3, [r7, #3]
 80037b0:	f003 030f 	and.w	r3, r3, #15
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d101      	bne.n	80037c8 <HAL_PCD_EP_SetStall+0x82>
 80037c4:	2302      	movs	r3, #2
 80037c6:	e01e      	b.n	8003806 <HAL_PCD_EP_SetStall+0xc0>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68f9      	ldr	r1, [r7, #12]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f003 f963 	bl	8006aa2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037dc:	78fb      	ldrb	r3, [r7, #3]
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10a      	bne.n	80037fc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6818      	ldr	r0, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	b2d9      	uxtb	r1, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037f6:	461a      	mov	r2, r3
 80037f8:	f003 fb54 	bl	8006ea4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b084      	sub	sp, #16
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	460b      	mov	r3, r1
 8003818:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800381a:	78fb      	ldrb	r3, [r7, #3]
 800381c:	f003 020f 	and.w	r2, r3, #15
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	429a      	cmp	r2, r3
 8003826:	d901      	bls.n	800382c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e042      	b.n	80038b2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800382c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003830:	2b00      	cmp	r3, #0
 8003832:	da0f      	bge.n	8003854 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003834:	78fb      	ldrb	r3, [r7, #3]
 8003836:	f003 020f 	and.w	r2, r3, #15
 800383a:	4613      	mov	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	1a9b      	subs	r3, r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	3338      	adds	r3, #56	; 0x38
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	4413      	add	r3, r2
 8003848:	3304      	adds	r3, #4
 800384a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2201      	movs	r2, #1
 8003850:	705a      	strb	r2, [r3, #1]
 8003852:	e00f      	b.n	8003874 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003854:	78fb      	ldrb	r3, [r7, #3]
 8003856:	f003 020f 	and.w	r2, r3, #15
 800385a:	4613      	mov	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	1a9b      	subs	r3, r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	4413      	add	r3, r2
 800386a:	3304      	adds	r3, #4
 800386c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800387a:	78fb      	ldrb	r3, [r7, #3]
 800387c:	f003 030f 	and.w	r3, r3, #15
 8003880:	b2da      	uxtb	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800388c:	2b01      	cmp	r3, #1
 800388e:	d101      	bne.n	8003894 <HAL_PCD_EP_ClrStall+0x86>
 8003890:	2302      	movs	r3, #2
 8003892:	e00e      	b.n	80038b2 <HAL_PCD_EP_ClrStall+0xa4>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68f9      	ldr	r1, [r7, #12]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f003 f96b 	bl	8006b7e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b08a      	sub	sp, #40	; 0x28
 80038be:	af02      	add	r7, sp, #8
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	4613      	mov	r3, r2
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	3338      	adds	r3, #56	; 0x38
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	4413      	add	r3, r2
 80038de:	3304      	adds	r3, #4
 80038e0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	699a      	ldr	r2, [r3, #24]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d901      	bls.n	80038f2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e06c      	b.n	80039cc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	695a      	ldr	r2, [r3, #20]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	69fa      	ldr	r2, [r7, #28]
 8003904:	429a      	cmp	r2, r3
 8003906:	d902      	bls.n	800390e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	3303      	adds	r3, #3
 8003912:	089b      	lsrs	r3, r3, #2
 8003914:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003916:	e02b      	b.n	8003970 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	695a      	ldr	r2, [r3, #20]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	69fa      	ldr	r2, [r7, #28]
 800392a:	429a      	cmp	r2, r3
 800392c:	d902      	bls.n	8003934 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	3303      	adds	r3, #3
 8003938:	089b      	lsrs	r3, r3, #2
 800393a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	68d9      	ldr	r1, [r3, #12]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	b2da      	uxtb	r2, r3
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800394c:	b2db      	uxtb	r3, r3
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	4603      	mov	r3, r0
 8003952:	6978      	ldr	r0, [r7, #20]
 8003954:	f003 f80f 	bl	8006976 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	441a      	add	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	699a      	ldr	r2, [r3, #24]
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	441a      	add	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	4413      	add	r3, r2
 8003978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	b29b      	uxth	r3, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	429a      	cmp	r2, r3
 8003984:	d809      	bhi.n	800399a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	699a      	ldr	r2, [r3, #24]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800398e:	429a      	cmp	r2, r3
 8003990:	d203      	bcs.n	800399a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1be      	bne.n	8003918 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	695a      	ldr	r2, [r3, #20]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d811      	bhi.n	80039ca <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	f003 030f 	and.w	r3, r3, #15
 80039ac:	2201      	movs	r2, #1
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	43db      	mvns	r3, r3
 80039c0:	6939      	ldr	r1, [r7, #16]
 80039c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039c6:	4013      	ands	r3, r2
 80039c8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3720      	adds	r7, #32
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	333c      	adds	r3, #60	; 0x3c
 80039ec:	3304      	adds	r3, #4
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	015a      	lsls	r2, r3, #5
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	f040 80a0 	bne.w	8003b4c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d015      	beq.n	8003a42 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4a72      	ldr	r2, [pc, #456]	; (8003be4 <PCD_EP_OutXfrComplete_int+0x210>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	f240 80dd 	bls.w	8003bda <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 80d7 	beq.w	8003bda <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	015a      	lsls	r2, r3, #5
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a38:	461a      	mov	r2, r3
 8003a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a3e:	6093      	str	r3, [r2, #8]
 8003a40:	e0cb      	b.n	8003bda <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f003 0320 	and.w	r3, r3, #32
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d009      	beq.n	8003a60 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a58:	461a      	mov	r2, r3
 8003a5a:	2320      	movs	r3, #32
 8003a5c:	6093      	str	r3, [r2, #8]
 8003a5e:	e0bc      	b.n	8003bda <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f040 80b7 	bne.w	8003bda <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4a5d      	ldr	r2, [pc, #372]	; (8003be4 <PCD_EP_OutXfrComplete_int+0x210>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d90f      	bls.n	8003a94 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	015a      	lsls	r2, r3, #5
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	4413      	add	r3, r2
 8003a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a90:	6093      	str	r3, [r2, #8]
 8003a92:	e0a2      	b.n	8003bda <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	1a9b      	subs	r3, r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003aa6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	0159      	lsls	r1, r3, #5
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	440b      	add	r3, r1
 8003ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003aba:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	1a9b      	subs	r3, r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4403      	add	r3, r0
 8003aca:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003ace:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003ad0:	6879      	ldr	r1, [r7, #4]
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ae2:	6819      	ldr	r1, [r3, #0]
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	1a9b      	subs	r3, r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4403      	add	r3, r0
 8003af2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4419      	add	r1, r3
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	4613      	mov	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	1a9b      	subs	r3, r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4403      	add	r3, r0
 8003b08:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b0c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d114      	bne.n	8003b3e <PCD_EP_OutXfrComplete_int+0x16a>
 8003b14:	6879      	ldr	r1, [r7, #4]
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	1a9b      	subs	r3, r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d108      	bne.n	8003b3e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6818      	ldr	r0, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b36:	461a      	mov	r2, r3
 8003b38:	2101      	movs	r1, #1
 8003b3a:	f003 f9b3 	bl	8006ea4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	4619      	mov	r1, r3
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f005 f939 	bl	8008dbc <HAL_PCD_DataOutStageCallback>
 8003b4a:	e046      	b.n	8003bda <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4a26      	ldr	r2, [pc, #152]	; (8003be8 <PCD_EP_OutXfrComplete_int+0x214>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d124      	bne.n	8003b9e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00a      	beq.n	8003b74 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	015a      	lsls	r2, r3, #5
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	4413      	add	r3, r2
 8003b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b70:	6093      	str	r3, [r2, #8]
 8003b72:	e032      	b.n	8003bda <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f003 0320 	and.w	r3, r3, #32
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d008      	beq.n	8003b90 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	015a      	lsls	r2, r3, #5
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	4413      	add	r3, r2
 8003b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	2320      	movs	r3, #32
 8003b8e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	4619      	mov	r1, r3
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f005 f910 	bl	8008dbc <HAL_PCD_DataOutStageCallback>
 8003b9c:	e01d      	b.n	8003bda <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d114      	bne.n	8003bce <PCD_EP_OutXfrComplete_int+0x1fa>
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	1a9b      	subs	r3, r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d108      	bne.n	8003bce <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6818      	ldr	r0, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	2100      	movs	r1, #0
 8003bca:	f003 f96b 	bl	8006ea4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f005 f8f1 	bl	8008dbc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	4f54300a 	.word	0x4f54300a
 8003be8:	4f54310a 	.word	0x4f54310a

08003bec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	333c      	adds	r3, #60	; 0x3c
 8003c04:	3304      	adds	r3, #4
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4a15      	ldr	r2, [pc, #84]	; (8003c74 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d90e      	bls.n	8003c40 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d009      	beq.n	8003c40 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	015a      	lsls	r2, r3, #5
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c38:	461a      	mov	r2, r3
 8003c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c3e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f005 f8a9 	bl	8008d98 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4a0a      	ldr	r2, [pc, #40]	; (8003c74 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d90c      	bls.n	8003c68 <PCD_EP_OutSetupPacket_int+0x7c>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d108      	bne.n	8003c68 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6818      	ldr	r0, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c60:	461a      	mov	r2, r3
 8003c62:	2101      	movs	r1, #1
 8003c64:	f003 f91e 	bl	8006ea4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	4f54300a 	.word	0x4f54300a

08003c78 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	460b      	mov	r3, r1
 8003c82:	70fb      	strb	r3, [r7, #3]
 8003c84:	4613      	mov	r3, r2
 8003c86:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c90:	78fb      	ldrb	r3, [r7, #3]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d107      	bne.n	8003ca6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c96:	883b      	ldrh	r3, [r7, #0]
 8003c98:	0419      	lsls	r1, r3, #16
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	629a      	str	r2, [r3, #40]	; 0x28
 8003ca4:	e028      	b.n	8003cf8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cac:	0c1b      	lsrs	r3, r3, #16
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	73fb      	strb	r3, [r7, #15]
 8003cb8:	e00d      	b.n	8003cd6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	3340      	adds	r3, #64	; 0x40
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4413      	add	r3, r2
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	0c1b      	lsrs	r3, r3, #16
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	4413      	add	r3, r2
 8003cce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	73fb      	strb	r3, [r7, #15]
 8003cd6:	7bfa      	ldrb	r2, [r7, #15]
 8003cd8:	78fb      	ldrb	r3, [r7, #3]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d3ec      	bcc.n	8003cba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ce0:	883b      	ldrh	r3, [r7, #0]
 8003ce2:	0418      	lsls	r0, r3, #16
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6819      	ldr	r1, [r3, #0]
 8003ce8:	78fb      	ldrb	r3, [r7, #3]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	4302      	orrs	r2, r0
 8003cf0:	3340      	adds	r3, #64	; 0x40
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
 8003d0e:	460b      	mov	r3, r1
 8003d10:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	887a      	ldrh	r2, [r7, #2]
 8003d18:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e264      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d075      	beq.n	8003e4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d5e:	4ba3      	ldr	r3, [pc, #652]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 030c 	and.w	r3, r3, #12
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d00c      	beq.n	8003d84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d6a:	4ba0      	ldr	r3, [pc, #640]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d72:	2b08      	cmp	r3, #8
 8003d74:	d112      	bne.n	8003d9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d76:	4b9d      	ldr	r3, [pc, #628]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d82:	d10b      	bne.n	8003d9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d84:	4b99      	ldr	r3, [pc, #612]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d05b      	beq.n	8003e48 <HAL_RCC_OscConfig+0x108>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d157      	bne.n	8003e48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e23f      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da4:	d106      	bne.n	8003db4 <HAL_RCC_OscConfig+0x74>
 8003da6:	4b91      	ldr	r3, [pc, #580]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a90      	ldr	r2, [pc, #576]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db0:	6013      	str	r3, [r2, #0]
 8003db2:	e01d      	b.n	8003df0 <HAL_RCC_OscConfig+0xb0>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dbc:	d10c      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x98>
 8003dbe:	4b8b      	ldr	r3, [pc, #556]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a8a      	ldr	r2, [pc, #552]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dc8:	6013      	str	r3, [r2, #0]
 8003dca:	4b88      	ldr	r3, [pc, #544]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a87      	ldr	r2, [pc, #540]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	e00b      	b.n	8003df0 <HAL_RCC_OscConfig+0xb0>
 8003dd8:	4b84      	ldr	r3, [pc, #528]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a83      	ldr	r2, [pc, #524]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de2:	6013      	str	r3, [r2, #0]
 8003de4:	4b81      	ldr	r3, [pc, #516]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a80      	ldr	r2, [pc, #512]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d013      	beq.n	8003e20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df8:	f7fd ffb8 	bl	8001d6c <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e00:	f7fd ffb4 	bl	8001d6c <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b64      	cmp	r3, #100	; 0x64
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e204      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e12:	4b76      	ldr	r3, [pc, #472]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0f0      	beq.n	8003e00 <HAL_RCC_OscConfig+0xc0>
 8003e1e:	e014      	b.n	8003e4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e20:	f7fd ffa4 	bl	8001d6c <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e28:	f7fd ffa0 	bl	8001d6c <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b64      	cmp	r3, #100	; 0x64
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e1f0      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e3a:	4b6c      	ldr	r3, [pc, #432]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f0      	bne.n	8003e28 <HAL_RCC_OscConfig+0xe8>
 8003e46:	e000      	b.n	8003e4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d063      	beq.n	8003f1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e56:	4b65      	ldr	r3, [pc, #404]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 030c 	and.w	r3, r3, #12
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00b      	beq.n	8003e7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e62:	4b62      	ldr	r3, [pc, #392]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d11c      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e6e:	4b5f      	ldr	r3, [pc, #380]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d116      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e7a:	4b5c      	ldr	r3, [pc, #368]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d005      	beq.n	8003e92 <HAL_RCC_OscConfig+0x152>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d001      	beq.n	8003e92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e1c4      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e92:	4b56      	ldr	r3, [pc, #344]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	4952      	ldr	r1, [pc, #328]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ea6:	e03a      	b.n	8003f1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d020      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eb0:	4b4f      	ldr	r3, [pc, #316]	; (8003ff0 <HAL_RCC_OscConfig+0x2b0>)
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb6:	f7fd ff59 	bl	8001d6c <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ebe:	f7fd ff55 	bl	8001d6c <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e1a5      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed0:	4b46      	ldr	r3, [pc, #280]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d0f0      	beq.n	8003ebe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003edc:	4b43      	ldr	r3, [pc, #268]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	4940      	ldr	r1, [pc, #256]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	600b      	str	r3, [r1, #0]
 8003ef0:	e015      	b.n	8003f1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ef2:	4b3f      	ldr	r3, [pc, #252]	; (8003ff0 <HAL_RCC_OscConfig+0x2b0>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef8:	f7fd ff38 	bl	8001d6c <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f00:	f7fd ff34 	bl	8001d6c <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e184      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f12:	4b36      	ldr	r3, [pc, #216]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f0      	bne.n	8003f00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0308 	and.w	r3, r3, #8
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d030      	beq.n	8003f8c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d016      	beq.n	8003f60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f32:	4b30      	ldr	r3, [pc, #192]	; (8003ff4 <HAL_RCC_OscConfig+0x2b4>)
 8003f34:	2201      	movs	r2, #1
 8003f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f38:	f7fd ff18 	bl	8001d6c <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f40:	f7fd ff14 	bl	8001d6c <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e164      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f52:	4b26      	ldr	r3, [pc, #152]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0f0      	beq.n	8003f40 <HAL_RCC_OscConfig+0x200>
 8003f5e:	e015      	b.n	8003f8c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f60:	4b24      	ldr	r3, [pc, #144]	; (8003ff4 <HAL_RCC_OscConfig+0x2b4>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f66:	f7fd ff01 	bl	8001d6c <HAL_GetTick>
 8003f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f6c:	e008      	b.n	8003f80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f6e:	f7fd fefd 	bl	8001d6c <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e14d      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f80:	4b1a      	ldr	r3, [pc, #104]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1f0      	bne.n	8003f6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 80a0 	beq.w	80040da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f9e:	4b13      	ldr	r3, [pc, #76]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10f      	bne.n	8003fca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003faa:	2300      	movs	r3, #0
 8003fac:	60bb      	str	r3, [r7, #8]
 8003fae:	4b0f      	ldr	r3, [pc, #60]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	4a0e      	ldr	r2, [pc, #56]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fba:	4b0c      	ldr	r3, [pc, #48]	; (8003fec <HAL_RCC_OscConfig+0x2ac>)
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc2:	60bb      	str	r3, [r7, #8]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fca:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <HAL_RCC_OscConfig+0x2b8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d121      	bne.n	800401a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fd6:	4b08      	ldr	r3, [pc, #32]	; (8003ff8 <HAL_RCC_OscConfig+0x2b8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a07      	ldr	r2, [pc, #28]	; (8003ff8 <HAL_RCC_OscConfig+0x2b8>)
 8003fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fe2:	f7fd fec3 	bl	8001d6c <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe8:	e011      	b.n	800400e <HAL_RCC_OscConfig+0x2ce>
 8003fea:	bf00      	nop
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	42470000 	.word	0x42470000
 8003ff4:	42470e80 	.word	0x42470e80
 8003ff8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ffc:	f7fd feb6 	bl	8001d6c <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e106      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800400e:	4b85      	ldr	r3, [pc, #532]	; (8004224 <HAL_RCC_OscConfig+0x4e4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0f0      	beq.n	8003ffc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d106      	bne.n	8004030 <HAL_RCC_OscConfig+0x2f0>
 8004022:	4b81      	ldr	r3, [pc, #516]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 8004024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004026:	4a80      	ldr	r2, [pc, #512]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 8004028:	f043 0301 	orr.w	r3, r3, #1
 800402c:	6713      	str	r3, [r2, #112]	; 0x70
 800402e:	e01c      	b.n	800406a <HAL_RCC_OscConfig+0x32a>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	2b05      	cmp	r3, #5
 8004036:	d10c      	bne.n	8004052 <HAL_RCC_OscConfig+0x312>
 8004038:	4b7b      	ldr	r3, [pc, #492]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 800403a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403c:	4a7a      	ldr	r2, [pc, #488]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 800403e:	f043 0304 	orr.w	r3, r3, #4
 8004042:	6713      	str	r3, [r2, #112]	; 0x70
 8004044:	4b78      	ldr	r3, [pc, #480]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 8004046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004048:	4a77      	ldr	r2, [pc, #476]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 800404a:	f043 0301 	orr.w	r3, r3, #1
 800404e:	6713      	str	r3, [r2, #112]	; 0x70
 8004050:	e00b      	b.n	800406a <HAL_RCC_OscConfig+0x32a>
 8004052:	4b75      	ldr	r3, [pc, #468]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 8004054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004056:	4a74      	ldr	r2, [pc, #464]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	6713      	str	r3, [r2, #112]	; 0x70
 800405e:	4b72      	ldr	r3, [pc, #456]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 8004060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004062:	4a71      	ldr	r2, [pc, #452]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 8004064:	f023 0304 	bic.w	r3, r3, #4
 8004068:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d015      	beq.n	800409e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004072:	f7fd fe7b 	bl	8001d6c <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004078:	e00a      	b.n	8004090 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800407a:	f7fd fe77 	bl	8001d6c <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	f241 3288 	movw	r2, #5000	; 0x1388
 8004088:	4293      	cmp	r3, r2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e0c5      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004090:	4b65      	ldr	r3, [pc, #404]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 8004092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0ee      	beq.n	800407a <HAL_RCC_OscConfig+0x33a>
 800409c:	e014      	b.n	80040c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800409e:	f7fd fe65 	bl	8001d6c <HAL_GetTick>
 80040a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a4:	e00a      	b.n	80040bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040a6:	f7fd fe61 	bl	8001d6c <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e0af      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040bc:	4b5a      	ldr	r3, [pc, #360]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 80040be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1ee      	bne.n	80040a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040c8:	7dfb      	ldrb	r3, [r7, #23]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d105      	bne.n	80040da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ce:	4b56      	ldr	r3, [pc, #344]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	4a55      	ldr	r2, [pc, #340]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 80040d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 809b 	beq.w	800421a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040e4:	4b50      	ldr	r3, [pc, #320]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 030c 	and.w	r3, r3, #12
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d05c      	beq.n	80041aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d141      	bne.n	800417c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f8:	4b4c      	ldr	r3, [pc, #304]	; (800422c <HAL_RCC_OscConfig+0x4ec>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fe:	f7fd fe35 	bl	8001d6c <HAL_GetTick>
 8004102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004104:	e008      	b.n	8004118 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004106:	f7fd fe31 	bl	8001d6c <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e081      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004118:	4b43      	ldr	r3, [pc, #268]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1f0      	bne.n	8004106 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	69da      	ldr	r2, [r3, #28]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	431a      	orrs	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	019b      	lsls	r3, r3, #6
 8004134:	431a      	orrs	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413a:	085b      	lsrs	r3, r3, #1
 800413c:	3b01      	subs	r3, #1
 800413e:	041b      	lsls	r3, r3, #16
 8004140:	431a      	orrs	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004146:	061b      	lsls	r3, r3, #24
 8004148:	4937      	ldr	r1, [pc, #220]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 800414a:	4313      	orrs	r3, r2
 800414c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800414e:	4b37      	ldr	r3, [pc, #220]	; (800422c <HAL_RCC_OscConfig+0x4ec>)
 8004150:	2201      	movs	r2, #1
 8004152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004154:	f7fd fe0a 	bl	8001d6c <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800415c:	f7fd fe06 	bl	8001d6c <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e056      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416e:	4b2e      	ldr	r3, [pc, #184]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0f0      	beq.n	800415c <HAL_RCC_OscConfig+0x41c>
 800417a:	e04e      	b.n	800421a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800417c:	4b2b      	ldr	r3, [pc, #172]	; (800422c <HAL_RCC_OscConfig+0x4ec>)
 800417e:	2200      	movs	r2, #0
 8004180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004182:	f7fd fdf3 	bl	8001d6c <HAL_GetTick>
 8004186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004188:	e008      	b.n	800419c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800418a:	f7fd fdef 	bl	8001d6c <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e03f      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419c:	4b22      	ldr	r3, [pc, #136]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1f0      	bne.n	800418a <HAL_RCC_OscConfig+0x44a>
 80041a8:	e037      	b.n	800421a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d101      	bne.n	80041b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e032      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041b6:	4b1c      	ldr	r3, [pc, #112]	; (8004228 <HAL_RCC_OscConfig+0x4e8>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d028      	beq.n	8004216 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d121      	bne.n	8004216 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041dc:	429a      	cmp	r2, r3
 80041de:	d11a      	bne.n	8004216 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041e6:	4013      	ands	r3, r2
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041ec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d111      	bne.n	8004216 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fc:	085b      	lsrs	r3, r3, #1
 80041fe:	3b01      	subs	r3, #1
 8004200:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004202:	429a      	cmp	r2, r3
 8004204:	d107      	bne.n	8004216 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004212:	429a      	cmp	r2, r3
 8004214:	d001      	beq.n	800421a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e000      	b.n	800421c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40007000 	.word	0x40007000
 8004228:	40023800 	.word	0x40023800
 800422c:	42470060 	.word	0x42470060

08004230 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e0cc      	b.n	80043de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004244:	4b68      	ldr	r3, [pc, #416]	; (80043e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	429a      	cmp	r2, r3
 8004250:	d90c      	bls.n	800426c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004252:	4b65      	ldr	r3, [pc, #404]	; (80043e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800425a:	4b63      	ldr	r3, [pc, #396]	; (80043e8 <HAL_RCC_ClockConfig+0x1b8>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0307 	and.w	r3, r3, #7
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	429a      	cmp	r2, r3
 8004266:	d001      	beq.n	800426c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e0b8      	b.n	80043de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d020      	beq.n	80042ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b00      	cmp	r3, #0
 8004282:	d005      	beq.n	8004290 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004284:	4b59      	ldr	r3, [pc, #356]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	4a58      	ldr	r2, [pc, #352]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800428e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0308 	and.w	r3, r3, #8
 8004298:	2b00      	cmp	r3, #0
 800429a:	d005      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800429c:	4b53      	ldr	r3, [pc, #332]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	4a52      	ldr	r2, [pc, #328]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 80042a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042a8:	4b50      	ldr	r3, [pc, #320]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	494d      	ldr	r1, [pc, #308]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d044      	beq.n	8004350 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d107      	bne.n	80042de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ce:	4b47      	ldr	r3, [pc, #284]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d119      	bne.n	800430e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e07f      	b.n	80043de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d003      	beq.n	80042ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042ea:	2b03      	cmp	r3, #3
 80042ec:	d107      	bne.n	80042fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ee:	4b3f      	ldr	r3, [pc, #252]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d109      	bne.n	800430e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e06f      	b.n	80043de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042fe:	4b3b      	ldr	r3, [pc, #236]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e067      	b.n	80043de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800430e:	4b37      	ldr	r3, [pc, #220]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f023 0203 	bic.w	r2, r3, #3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	4934      	ldr	r1, [pc, #208]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 800431c:	4313      	orrs	r3, r2
 800431e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004320:	f7fd fd24 	bl	8001d6c <HAL_GetTick>
 8004324:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004326:	e00a      	b.n	800433e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004328:	f7fd fd20 	bl	8001d6c <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	f241 3288 	movw	r2, #5000	; 0x1388
 8004336:	4293      	cmp	r3, r2
 8004338:	d901      	bls.n	800433e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e04f      	b.n	80043de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800433e:	4b2b      	ldr	r3, [pc, #172]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 020c 	and.w	r2, r3, #12
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	429a      	cmp	r2, r3
 800434e:	d1eb      	bne.n	8004328 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004350:	4b25      	ldr	r3, [pc, #148]	; (80043e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	429a      	cmp	r2, r3
 800435c:	d20c      	bcs.n	8004378 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435e:	4b22      	ldr	r3, [pc, #136]	; (80043e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	b2d2      	uxtb	r2, r2
 8004364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004366:	4b20      	ldr	r3, [pc, #128]	; (80043e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	429a      	cmp	r2, r3
 8004372:	d001      	beq.n	8004378 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e032      	b.n	80043de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b00      	cmp	r3, #0
 8004382:	d008      	beq.n	8004396 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004384:	4b19      	ldr	r3, [pc, #100]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	4916      	ldr	r1, [pc, #88]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 8004392:	4313      	orrs	r3, r2
 8004394:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d009      	beq.n	80043b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043a2:	4b12      	ldr	r3, [pc, #72]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	490e      	ldr	r1, [pc, #56]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043b6:	f000 f821 	bl	80043fc <HAL_RCC_GetSysClockFreq>
 80043ba:	4602      	mov	r2, r0
 80043bc:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <HAL_RCC_ClockConfig+0x1bc>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	091b      	lsrs	r3, r3, #4
 80043c2:	f003 030f 	and.w	r3, r3, #15
 80043c6:	490a      	ldr	r1, [pc, #40]	; (80043f0 <HAL_RCC_ClockConfig+0x1c0>)
 80043c8:	5ccb      	ldrb	r3, [r1, r3]
 80043ca:	fa22 f303 	lsr.w	r3, r2, r3
 80043ce:	4a09      	ldr	r2, [pc, #36]	; (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 80043d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043d2:	4b09      	ldr	r3, [pc, #36]	; (80043f8 <HAL_RCC_ClockConfig+0x1c8>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fd fc84 	bl	8001ce4 <HAL_InitTick>

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	40023c00 	.word	0x40023c00
 80043ec:	40023800 	.word	0x40023800
 80043f0:	0800a2a0 	.word	0x0800a2a0
 80043f4:	2000003c 	.word	0x2000003c
 80043f8:	20000040 	.word	0x20000040

080043fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043fc:	b5b0      	push	{r4, r5, r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004402:	2100      	movs	r1, #0
 8004404:	6079      	str	r1, [r7, #4]
 8004406:	2100      	movs	r1, #0
 8004408:	60f9      	str	r1, [r7, #12]
 800440a:	2100      	movs	r1, #0
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800440e:	2100      	movs	r1, #0
 8004410:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004412:	4952      	ldr	r1, [pc, #328]	; (800455c <HAL_RCC_GetSysClockFreq+0x160>)
 8004414:	6889      	ldr	r1, [r1, #8]
 8004416:	f001 010c 	and.w	r1, r1, #12
 800441a:	2908      	cmp	r1, #8
 800441c:	d00d      	beq.n	800443a <HAL_RCC_GetSysClockFreq+0x3e>
 800441e:	2908      	cmp	r1, #8
 8004420:	f200 8094 	bhi.w	800454c <HAL_RCC_GetSysClockFreq+0x150>
 8004424:	2900      	cmp	r1, #0
 8004426:	d002      	beq.n	800442e <HAL_RCC_GetSysClockFreq+0x32>
 8004428:	2904      	cmp	r1, #4
 800442a:	d003      	beq.n	8004434 <HAL_RCC_GetSysClockFreq+0x38>
 800442c:	e08e      	b.n	800454c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800442e:	4b4c      	ldr	r3, [pc, #304]	; (8004560 <HAL_RCC_GetSysClockFreq+0x164>)
 8004430:	60bb      	str	r3, [r7, #8]
       break;
 8004432:	e08e      	b.n	8004552 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004434:	4b4b      	ldr	r3, [pc, #300]	; (8004564 <HAL_RCC_GetSysClockFreq+0x168>)
 8004436:	60bb      	str	r3, [r7, #8]
      break;
 8004438:	e08b      	b.n	8004552 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800443a:	4948      	ldr	r1, [pc, #288]	; (800455c <HAL_RCC_GetSysClockFreq+0x160>)
 800443c:	6849      	ldr	r1, [r1, #4]
 800443e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004442:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004444:	4945      	ldr	r1, [pc, #276]	; (800455c <HAL_RCC_GetSysClockFreq+0x160>)
 8004446:	6849      	ldr	r1, [r1, #4]
 8004448:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800444c:	2900      	cmp	r1, #0
 800444e:	d024      	beq.n	800449a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004450:	4942      	ldr	r1, [pc, #264]	; (800455c <HAL_RCC_GetSysClockFreq+0x160>)
 8004452:	6849      	ldr	r1, [r1, #4]
 8004454:	0989      	lsrs	r1, r1, #6
 8004456:	4608      	mov	r0, r1
 8004458:	f04f 0100 	mov.w	r1, #0
 800445c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004460:	f04f 0500 	mov.w	r5, #0
 8004464:	ea00 0204 	and.w	r2, r0, r4
 8004468:	ea01 0305 	and.w	r3, r1, r5
 800446c:	493d      	ldr	r1, [pc, #244]	; (8004564 <HAL_RCC_GetSysClockFreq+0x168>)
 800446e:	fb01 f003 	mul.w	r0, r1, r3
 8004472:	2100      	movs	r1, #0
 8004474:	fb01 f102 	mul.w	r1, r1, r2
 8004478:	1844      	adds	r4, r0, r1
 800447a:	493a      	ldr	r1, [pc, #232]	; (8004564 <HAL_RCC_GetSysClockFreq+0x168>)
 800447c:	fba2 0101 	umull	r0, r1, r2, r1
 8004480:	1863      	adds	r3, r4, r1
 8004482:	4619      	mov	r1, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	461a      	mov	r2, r3
 8004488:	f04f 0300 	mov.w	r3, #0
 800448c:	f7fb fef8 	bl	8000280 <__aeabi_uldivmod>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4613      	mov	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	e04a      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800449a:	4b30      	ldr	r3, [pc, #192]	; (800455c <HAL_RCC_GetSysClockFreq+0x160>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	099b      	lsrs	r3, r3, #6
 80044a0:	461a      	mov	r2, r3
 80044a2:	f04f 0300 	mov.w	r3, #0
 80044a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044aa:	f04f 0100 	mov.w	r1, #0
 80044ae:	ea02 0400 	and.w	r4, r2, r0
 80044b2:	ea03 0501 	and.w	r5, r3, r1
 80044b6:	4620      	mov	r0, r4
 80044b8:	4629      	mov	r1, r5
 80044ba:	f04f 0200 	mov.w	r2, #0
 80044be:	f04f 0300 	mov.w	r3, #0
 80044c2:	014b      	lsls	r3, r1, #5
 80044c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80044c8:	0142      	lsls	r2, r0, #5
 80044ca:	4610      	mov	r0, r2
 80044cc:	4619      	mov	r1, r3
 80044ce:	1b00      	subs	r0, r0, r4
 80044d0:	eb61 0105 	sbc.w	r1, r1, r5
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	f04f 0300 	mov.w	r3, #0
 80044dc:	018b      	lsls	r3, r1, #6
 80044de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80044e2:	0182      	lsls	r2, r0, #6
 80044e4:	1a12      	subs	r2, r2, r0
 80044e6:	eb63 0301 	sbc.w	r3, r3, r1
 80044ea:	f04f 0000 	mov.w	r0, #0
 80044ee:	f04f 0100 	mov.w	r1, #0
 80044f2:	00d9      	lsls	r1, r3, #3
 80044f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044f8:	00d0      	lsls	r0, r2, #3
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	1912      	adds	r2, r2, r4
 8004500:	eb45 0303 	adc.w	r3, r5, r3
 8004504:	f04f 0000 	mov.w	r0, #0
 8004508:	f04f 0100 	mov.w	r1, #0
 800450c:	0299      	lsls	r1, r3, #10
 800450e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004512:	0290      	lsls	r0, r2, #10
 8004514:	4602      	mov	r2, r0
 8004516:	460b      	mov	r3, r1
 8004518:	4610      	mov	r0, r2
 800451a:	4619      	mov	r1, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	461a      	mov	r2, r3
 8004520:	f04f 0300 	mov.w	r3, #0
 8004524:	f7fb feac 	bl	8000280 <__aeabi_uldivmod>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	4613      	mov	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004530:	4b0a      	ldr	r3, [pc, #40]	; (800455c <HAL_RCC_GetSysClockFreq+0x160>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	0c1b      	lsrs	r3, r3, #16
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	3301      	adds	r3, #1
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	fbb2 f3f3 	udiv	r3, r2, r3
 8004548:	60bb      	str	r3, [r7, #8]
      break;
 800454a:	e002      	b.n	8004552 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800454c:	4b04      	ldr	r3, [pc, #16]	; (8004560 <HAL_RCC_GetSysClockFreq+0x164>)
 800454e:	60bb      	str	r3, [r7, #8]
      break;
 8004550:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004552:	68bb      	ldr	r3, [r7, #8]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bdb0      	pop	{r4, r5, r7, pc}
 800455c:	40023800 	.word	0x40023800
 8004560:	00f42400 	.word	0x00f42400
 8004564:	017d7840 	.word	0x017d7840

08004568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800456c:	4b03      	ldr	r3, [pc, #12]	; (800457c <HAL_RCC_GetHCLKFreq+0x14>)
 800456e:	681b      	ldr	r3, [r3, #0]
}
 8004570:	4618      	mov	r0, r3
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	2000003c 	.word	0x2000003c

08004580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e041      	b.n	8004616 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d106      	bne.n	80045ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7fd f87e 	bl	80016a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3304      	adds	r3, #4
 80045bc:	4619      	mov	r1, r3
 80045be:	4610      	mov	r0, r2
 80045c0:	f000 fe38 	bl	8005234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
	...

08004620 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b01      	cmp	r3, #1
 8004632:	d001      	beq.n	8004638 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e044      	b.n	80046c2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2202      	movs	r2, #2
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0201 	orr.w	r2, r2, #1
 800464e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a1e      	ldr	r2, [pc, #120]	; (80046d0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d018      	beq.n	800468c <HAL_TIM_Base_Start_IT+0x6c>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004662:	d013      	beq.n	800468c <HAL_TIM_Base_Start_IT+0x6c>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a1a      	ldr	r2, [pc, #104]	; (80046d4 <HAL_TIM_Base_Start_IT+0xb4>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d00e      	beq.n	800468c <HAL_TIM_Base_Start_IT+0x6c>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a19      	ldr	r2, [pc, #100]	; (80046d8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d009      	beq.n	800468c <HAL_TIM_Base_Start_IT+0x6c>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a17      	ldr	r2, [pc, #92]	; (80046dc <HAL_TIM_Base_Start_IT+0xbc>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d004      	beq.n	800468c <HAL_TIM_Base_Start_IT+0x6c>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a16      	ldr	r2, [pc, #88]	; (80046e0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d111      	bne.n	80046b0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b06      	cmp	r3, #6
 800469c:	d010      	beq.n	80046c0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f042 0201 	orr.w	r2, r2, #1
 80046ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ae:	e007      	b.n	80046c0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0201 	orr.w	r2, r2, #1
 80046be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	40010000 	.word	0x40010000
 80046d4:	40000400 	.word	0x40000400
 80046d8:	40000800 	.word	0x40000800
 80046dc:	40000c00 	.word	0x40000c00
 80046e0:	40014000 	.word	0x40014000

080046e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e041      	b.n	800477a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d106      	bne.n	8004710 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f839 	bl	8004782 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3304      	adds	r3, #4
 8004720:	4619      	mov	r1, r3
 8004722:	4610      	mov	r0, r2
 8004724:	f000 fd86 	bl	8005234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004782:	b480      	push	{r7}
 8004784:	b083      	sub	sp, #12
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800478a:	bf00      	nop
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
	...

08004798 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
 80047a4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d109      	bne.n	80047c4 <HAL_TIM_PWM_Start_DMA+0x2c>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	bf0c      	ite	eq
 80047bc:	2301      	moveq	r3, #1
 80047be:	2300      	movne	r3, #0
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	e022      	b.n	800480a <HAL_TIM_PWM_Start_DMA+0x72>
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d109      	bne.n	80047de <HAL_TIM_PWM_Start_DMA+0x46>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	bf0c      	ite	eq
 80047d6:	2301      	moveq	r3, #1
 80047d8:	2300      	movne	r3, #0
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	e015      	b.n	800480a <HAL_TIM_PWM_Start_DMA+0x72>
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d109      	bne.n	80047f8 <HAL_TIM_PWM_Start_DMA+0x60>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	bf0c      	ite	eq
 80047f0:	2301      	moveq	r3, #1
 80047f2:	2300      	movne	r3, #0
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	e008      	b.n	800480a <HAL_TIM_PWM_Start_DMA+0x72>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	bf0c      	ite	eq
 8004804:	2301      	moveq	r3, #1
 8004806:	2300      	movne	r3, #0
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800480e:	2302      	movs	r3, #2
 8004810:	e15d      	b.n	8004ace <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d109      	bne.n	800482c <HAL_TIM_PWM_Start_DMA+0x94>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b01      	cmp	r3, #1
 8004822:	bf0c      	ite	eq
 8004824:	2301      	moveq	r3, #1
 8004826:	2300      	movne	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	e022      	b.n	8004872 <HAL_TIM_PWM_Start_DMA+0xda>
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	2b04      	cmp	r3, #4
 8004830:	d109      	bne.n	8004846 <HAL_TIM_PWM_Start_DMA+0xae>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b01      	cmp	r3, #1
 800483c:	bf0c      	ite	eq
 800483e:	2301      	moveq	r3, #1
 8004840:	2300      	movne	r3, #0
 8004842:	b2db      	uxtb	r3, r3
 8004844:	e015      	b.n	8004872 <HAL_TIM_PWM_Start_DMA+0xda>
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2b08      	cmp	r3, #8
 800484a:	d109      	bne.n	8004860 <HAL_TIM_PWM_Start_DMA+0xc8>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b01      	cmp	r3, #1
 8004856:	bf0c      	ite	eq
 8004858:	2301      	moveq	r3, #1
 800485a:	2300      	movne	r3, #0
 800485c:	b2db      	uxtb	r3, r3
 800485e:	e008      	b.n	8004872 <HAL_TIM_PWM_Start_DMA+0xda>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b01      	cmp	r3, #1
 800486a:	bf0c      	ite	eq
 800486c:	2301      	moveq	r3, #1
 800486e:	2300      	movne	r3, #0
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d024      	beq.n	80048c0 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d104      	bne.n	8004886 <HAL_TIM_PWM_Start_DMA+0xee>
 800487c:	887b      	ldrh	r3, [r7, #2]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e123      	b.n	8004ace <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d104      	bne.n	8004896 <HAL_TIM_PWM_Start_DMA+0xfe>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004894:	e016      	b.n	80048c4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	2b04      	cmp	r3, #4
 800489a:	d104      	bne.n	80048a6 <HAL_TIM_PWM_Start_DMA+0x10e>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048a4:	e00e      	b.n	80048c4 <HAL_TIM_PWM_Start_DMA+0x12c>
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d104      	bne.n	80048b6 <HAL_TIM_PWM_Start_DMA+0x11e>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048b4:	e006      	b.n	80048c4 <HAL_TIM_PWM_Start_DMA+0x12c>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2202      	movs	r2, #2
 80048ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048be:	e001      	b.n	80048c4 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e104      	b.n	8004ace <HAL_TIM_PWM_Start_DMA+0x336>
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2b0c      	cmp	r3, #12
 80048c8:	f200 80ae 	bhi.w	8004a28 <HAL_TIM_PWM_Start_DMA+0x290>
 80048cc:	a201      	add	r2, pc, #4	; (adr r2, 80048d4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80048ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d2:	bf00      	nop
 80048d4:	08004909 	.word	0x08004909
 80048d8:	08004a29 	.word	0x08004a29
 80048dc:	08004a29 	.word	0x08004a29
 80048e0:	08004a29 	.word	0x08004a29
 80048e4:	08004951 	.word	0x08004951
 80048e8:	08004a29 	.word	0x08004a29
 80048ec:	08004a29 	.word	0x08004a29
 80048f0:	08004a29 	.word	0x08004a29
 80048f4:	08004999 	.word	0x08004999
 80048f8:	08004a29 	.word	0x08004a29
 80048fc:	08004a29 	.word	0x08004a29
 8004900:	08004a29 	.word	0x08004a29
 8004904:	080049e1 	.word	0x080049e1
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	4a72      	ldr	r2, [pc, #456]	; (8004ad8 <HAL_TIM_PWM_Start_DMA+0x340>)
 800490e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	4a71      	ldr	r2, [pc, #452]	; (8004adc <HAL_TIM_PWM_Start_DMA+0x344>)
 8004916:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	4a70      	ldr	r2, [pc, #448]	; (8004ae0 <HAL_TIM_PWM_Start_DMA+0x348>)
 800491e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	3334      	adds	r3, #52	; 0x34
 800492c:	461a      	mov	r2, r3
 800492e:	887b      	ldrh	r3, [r7, #2]
 8004930:	f7fd fc0c 	bl	800214c <HAL_DMA_Start_IT>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e0c7      	b.n	8004ace <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800494c:	60da      	str	r2, [r3, #12]
      break;
 800494e:	e06e      	b.n	8004a2e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004954:	4a60      	ldr	r2, [pc, #384]	; (8004ad8 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004956:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495c:	4a5f      	ldr	r2, [pc, #380]	; (8004adc <HAL_TIM_PWM_Start_DMA+0x344>)
 800495e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004964:	4a5e      	ldr	r2, [pc, #376]	; (8004ae0 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004966:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800496c:	6879      	ldr	r1, [r7, #4]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	3338      	adds	r3, #56	; 0x38
 8004974:	461a      	mov	r2, r3
 8004976:	887b      	ldrh	r3, [r7, #2]
 8004978:	f7fd fbe8 	bl	800214c <HAL_DMA_Start_IT>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e0a3      	b.n	8004ace <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68da      	ldr	r2, [r3, #12]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004994:	60da      	str	r2, [r3, #12]
      break;
 8004996:	e04a      	b.n	8004a2e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499c:	4a4e      	ldr	r2, [pc, #312]	; (8004ad8 <HAL_TIM_PWM_Start_DMA+0x340>)
 800499e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a4:	4a4d      	ldr	r2, [pc, #308]	; (8004adc <HAL_TIM_PWM_Start_DMA+0x344>)
 80049a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ac:	4a4c      	ldr	r2, [pc, #304]	; (8004ae0 <HAL_TIM_PWM_Start_DMA+0x348>)
 80049ae:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80049b4:	6879      	ldr	r1, [r7, #4]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	333c      	adds	r3, #60	; 0x3c
 80049bc:	461a      	mov	r2, r3
 80049be:	887b      	ldrh	r3, [r7, #2]
 80049c0:	f7fd fbc4 	bl	800214c <HAL_DMA_Start_IT>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e07f      	b.n	8004ace <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049dc:	60da      	str	r2, [r3, #12]
      break;
 80049de:	e026      	b.n	8004a2e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e4:	4a3c      	ldr	r2, [pc, #240]	; (8004ad8 <HAL_TIM_PWM_Start_DMA+0x340>)
 80049e6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ec:	4a3b      	ldr	r2, [pc, #236]	; (8004adc <HAL_TIM_PWM_Start_DMA+0x344>)
 80049ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f4:	4a3a      	ldr	r2, [pc, #232]	; (8004ae0 <HAL_TIM_PWM_Start_DMA+0x348>)
 80049f6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80049fc:	6879      	ldr	r1, [r7, #4]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	3340      	adds	r3, #64	; 0x40
 8004a04:	461a      	mov	r2, r3
 8004a06:	887b      	ldrh	r3, [r7, #2]
 8004a08:	f7fd fba0 	bl	800214c <HAL_DMA_Start_IT>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e05b      	b.n	8004ace <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a24:	60da      	str	r2, [r3, #12]
      break;
 8004a26:	e002      	b.n	8004a2e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a2c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004a2e:	7dfb      	ldrb	r3, [r7, #23]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d14b      	bne.n	8004acc <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	68b9      	ldr	r1, [r7, #8]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 fe9f 	bl	8005780 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a27      	ldr	r2, [pc, #156]	; (8004ae4 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d107      	bne.n	8004a5c <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a5a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a20      	ldr	r2, [pc, #128]	; (8004ae4 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d018      	beq.n	8004a98 <HAL_TIM_PWM_Start_DMA+0x300>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a6e:	d013      	beq.n	8004a98 <HAL_TIM_PWM_Start_DMA+0x300>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a1c      	ldr	r2, [pc, #112]	; (8004ae8 <HAL_TIM_PWM_Start_DMA+0x350>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d00e      	beq.n	8004a98 <HAL_TIM_PWM_Start_DMA+0x300>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a1b      	ldr	r2, [pc, #108]	; (8004aec <HAL_TIM_PWM_Start_DMA+0x354>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d009      	beq.n	8004a98 <HAL_TIM_PWM_Start_DMA+0x300>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a19      	ldr	r2, [pc, #100]	; (8004af0 <HAL_TIM_PWM_Start_DMA+0x358>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d004      	beq.n	8004a98 <HAL_TIM_PWM_Start_DMA+0x300>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a18      	ldr	r2, [pc, #96]	; (8004af4 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d111      	bne.n	8004abc <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	2b06      	cmp	r3, #6
 8004aa8:	d010      	beq.n	8004acc <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f042 0201 	orr.w	r2, r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aba:	e007      	b.n	8004acc <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f042 0201 	orr.w	r2, r2, #1
 8004aca:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3718      	adds	r7, #24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	08005125 	.word	0x08005125
 8004adc:	080051cd 	.word	0x080051cd
 8004ae0:	08005093 	.word	0x08005093
 8004ae4:	40010000 	.word	0x40010000
 8004ae8:	40000400 	.word	0x40000400
 8004aec:	40000800 	.word	0x40000800
 8004af0:	40000c00 	.word	0x40000c00
 8004af4:	40014000 	.word	0x40014000

08004af8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d122      	bne.n	8004b54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d11b      	bne.n	8004b54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f06f 0202 	mvn.w	r2, #2
 8004b24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d003      	beq.n	8004b42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fa77 	bl	800502e <HAL_TIM_IC_CaptureCallback>
 8004b40:	e005      	b.n	8004b4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 fa69 	bl	800501a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 fa7a 	bl	8005042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	f003 0304 	and.w	r3, r3, #4
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	d122      	bne.n	8004ba8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b04      	cmp	r3, #4
 8004b6e:	d11b      	bne.n	8004ba8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f06f 0204 	mvn.w	r2, #4
 8004b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2202      	movs	r2, #2
 8004b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 fa4d 	bl	800502e <HAL_TIM_IC_CaptureCallback>
 8004b94:	e005      	b.n	8004ba2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 fa3f 	bl	800501a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 fa50 	bl	8005042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	f003 0308 	and.w	r3, r3, #8
 8004bb2:	2b08      	cmp	r3, #8
 8004bb4:	d122      	bne.n	8004bfc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f003 0308 	and.w	r3, r3, #8
 8004bc0:	2b08      	cmp	r3, #8
 8004bc2:	d11b      	bne.n	8004bfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f06f 0208 	mvn.w	r2, #8
 8004bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2204      	movs	r2, #4
 8004bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	f003 0303 	and.w	r3, r3, #3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 fa23 	bl	800502e <HAL_TIM_IC_CaptureCallback>
 8004be8:	e005      	b.n	8004bf6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 fa15 	bl	800501a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 fa26 	bl	8005042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	f003 0310 	and.w	r3, r3, #16
 8004c06:	2b10      	cmp	r3, #16
 8004c08:	d122      	bne.n	8004c50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f003 0310 	and.w	r3, r3, #16
 8004c14:	2b10      	cmp	r3, #16
 8004c16:	d11b      	bne.n	8004c50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f06f 0210 	mvn.w	r2, #16
 8004c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2208      	movs	r2, #8
 8004c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f9f9 	bl	800502e <HAL_TIM_IC_CaptureCallback>
 8004c3c:	e005      	b.n	8004c4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f9eb 	bl	800501a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f9fc 	bl	8005042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d10e      	bne.n	8004c7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d107      	bne.n	8004c7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f06f 0201 	mvn.w	r2, #1
 8004c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7fc ffa4 	bl	8001bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c86:	2b80      	cmp	r3, #128	; 0x80
 8004c88:	d10e      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c94:	2b80      	cmp	r3, #128	; 0x80
 8004c96:	d107      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 fe0a 	bl	80058bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb2:	2b40      	cmp	r3, #64	; 0x40
 8004cb4:	d10e      	bne.n	8004cd4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc0:	2b40      	cmp	r3, #64	; 0x40
 8004cc2:	d107      	bne.n	8004cd4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f9cb 	bl	800506a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	f003 0320 	and.w	r3, r3, #32
 8004cde:	2b20      	cmp	r3, #32
 8004ce0:	d10e      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f003 0320 	and.w	r3, r3, #32
 8004cec:	2b20      	cmp	r3, #32
 8004cee:	d107      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f06f 0220 	mvn.w	r2, #32
 8004cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fdd4 	bl	80058a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d00:	bf00      	nop
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d14:	2300      	movs	r3, #0
 8004d16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e0ae      	b.n	8004e84 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b0c      	cmp	r3, #12
 8004d32:	f200 809f 	bhi.w	8004e74 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d36:	a201      	add	r2, pc, #4	; (adr r2, 8004d3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3c:	08004d71 	.word	0x08004d71
 8004d40:	08004e75 	.word	0x08004e75
 8004d44:	08004e75 	.word	0x08004e75
 8004d48:	08004e75 	.word	0x08004e75
 8004d4c:	08004db1 	.word	0x08004db1
 8004d50:	08004e75 	.word	0x08004e75
 8004d54:	08004e75 	.word	0x08004e75
 8004d58:	08004e75 	.word	0x08004e75
 8004d5c:	08004df3 	.word	0x08004df3
 8004d60:	08004e75 	.word	0x08004e75
 8004d64:	08004e75 	.word	0x08004e75
 8004d68:	08004e75 	.word	0x08004e75
 8004d6c:	08004e33 	.word	0x08004e33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68b9      	ldr	r1, [r7, #8]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 fadc 	bl	8005334 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699a      	ldr	r2, [r3, #24]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f042 0208 	orr.w	r2, r2, #8
 8004d8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	699a      	ldr	r2, [r3, #24]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0204 	bic.w	r2, r2, #4
 8004d9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6999      	ldr	r1, [r3, #24]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	691a      	ldr	r2, [r3, #16]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	619a      	str	r2, [r3, #24]
      break;
 8004dae:	e064      	b.n	8004e7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68b9      	ldr	r1, [r7, #8]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 fb22 	bl	8005400 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699a      	ldr	r2, [r3, #24]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699a      	ldr	r2, [r3, #24]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6999      	ldr	r1, [r3, #24]
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	021a      	lsls	r2, r3, #8
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	619a      	str	r2, [r3, #24]
      break;
 8004df0:	e043      	b.n	8004e7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68b9      	ldr	r1, [r7, #8]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 fb6d 	bl	80054d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	69da      	ldr	r2, [r3, #28]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f042 0208 	orr.w	r2, r2, #8
 8004e0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	69da      	ldr	r2, [r3, #28]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 0204 	bic.w	r2, r2, #4
 8004e1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	69d9      	ldr	r1, [r3, #28]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	691a      	ldr	r2, [r3, #16]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	61da      	str	r2, [r3, #28]
      break;
 8004e30:	e023      	b.n	8004e7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68b9      	ldr	r1, [r7, #8]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f000 fbb7 	bl	80055ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69da      	ldr	r2, [r3, #28]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	69da      	ldr	r2, [r3, #28]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	69d9      	ldr	r1, [r3, #28]
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	021a      	lsls	r2, r3, #8
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	61da      	str	r2, [r3, #28]
      break;
 8004e72:	e002      	b.n	8004e7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	75fb      	strb	r3, [r7, #23]
      break;
 8004e78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3718      	adds	r7, #24
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d101      	bne.n	8004ea8 <HAL_TIM_ConfigClockSource+0x1c>
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	e0b4      	b.n	8005012 <HAL_TIM_ConfigClockSource+0x186>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ece:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ee0:	d03e      	beq.n	8004f60 <HAL_TIM_ConfigClockSource+0xd4>
 8004ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ee6:	f200 8087 	bhi.w	8004ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8004eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eee:	f000 8086 	beq.w	8004ffe <HAL_TIM_ConfigClockSource+0x172>
 8004ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ef6:	d87f      	bhi.n	8004ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef8:	2b70      	cmp	r3, #112	; 0x70
 8004efa:	d01a      	beq.n	8004f32 <HAL_TIM_ConfigClockSource+0xa6>
 8004efc:	2b70      	cmp	r3, #112	; 0x70
 8004efe:	d87b      	bhi.n	8004ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f00:	2b60      	cmp	r3, #96	; 0x60
 8004f02:	d050      	beq.n	8004fa6 <HAL_TIM_ConfigClockSource+0x11a>
 8004f04:	2b60      	cmp	r3, #96	; 0x60
 8004f06:	d877      	bhi.n	8004ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f08:	2b50      	cmp	r3, #80	; 0x50
 8004f0a:	d03c      	beq.n	8004f86 <HAL_TIM_ConfigClockSource+0xfa>
 8004f0c:	2b50      	cmp	r3, #80	; 0x50
 8004f0e:	d873      	bhi.n	8004ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f10:	2b40      	cmp	r3, #64	; 0x40
 8004f12:	d058      	beq.n	8004fc6 <HAL_TIM_ConfigClockSource+0x13a>
 8004f14:	2b40      	cmp	r3, #64	; 0x40
 8004f16:	d86f      	bhi.n	8004ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f18:	2b30      	cmp	r3, #48	; 0x30
 8004f1a:	d064      	beq.n	8004fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f1c:	2b30      	cmp	r3, #48	; 0x30
 8004f1e:	d86b      	bhi.n	8004ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f20:	2b20      	cmp	r3, #32
 8004f22:	d060      	beq.n	8004fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f24:	2b20      	cmp	r3, #32
 8004f26:	d867      	bhi.n	8004ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d05c      	beq.n	8004fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f2c:	2b10      	cmp	r3, #16
 8004f2e:	d05a      	beq.n	8004fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f30:	e062      	b.n	8004ff8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6818      	ldr	r0, [r3, #0]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	6899      	ldr	r1, [r3, #8]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f000 fbfd 	bl	8005740 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	609a      	str	r2, [r3, #8]
      break;
 8004f5e:	e04f      	b.n	8005000 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6818      	ldr	r0, [r3, #0]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	6899      	ldr	r1, [r3, #8]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f000 fbe6 	bl	8005740 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689a      	ldr	r2, [r3, #8]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f82:	609a      	str	r2, [r3, #8]
      break;
 8004f84:	e03c      	b.n	8005000 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6818      	ldr	r0, [r3, #0]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	6859      	ldr	r1, [r3, #4]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	461a      	mov	r2, r3
 8004f94:	f000 fb5a 	bl	800564c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2150      	movs	r1, #80	; 0x50
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 fbb3 	bl	800570a <TIM_ITRx_SetConfig>
      break;
 8004fa4:	e02c      	b.n	8005000 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6818      	ldr	r0, [r3, #0]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	6859      	ldr	r1, [r3, #4]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	f000 fb79 	bl	80056aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2160      	movs	r1, #96	; 0x60
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 fba3 	bl	800570a <TIM_ITRx_SetConfig>
      break;
 8004fc4:	e01c      	b.n	8005000 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6818      	ldr	r0, [r3, #0]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	6859      	ldr	r1, [r3, #4]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f000 fb3a 	bl	800564c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2140      	movs	r1, #64	; 0x40
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 fb93 	bl	800570a <TIM_ITRx_SetConfig>
      break;
 8004fe4:	e00c      	b.n	8005000 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4619      	mov	r1, r3
 8004ff0:	4610      	mov	r0, r2
 8004ff2:	f000 fb8a 	bl	800570a <TIM_ITRx_SetConfig>
      break;
 8004ff6:	e003      	b.n	8005000 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8004ffc:	e000      	b.n	8005000 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ffe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005010:	7bfb      	ldrb	r3, [r7, #15]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800501a:	b480      	push	{r7}
 800501c:	b083      	sub	sp, #12
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800504a:	bf00      	nop
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005072:	bf00      	nop
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b084      	sub	sp, #16
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d107      	bne.n	80050ba <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2201      	movs	r2, #1
 80050ae:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050b8:	e02a      	b.n	8005110 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d107      	bne.n	80050d4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2202      	movs	r2, #2
 80050c8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050d2:	e01d      	b.n	8005110 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d107      	bne.n	80050ee <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2204      	movs	r2, #4
 80050e2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050ec:	e010      	b.n	8005110 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d107      	bne.n	8005108 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2208      	movs	r2, #8
 80050fc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005106:	e003      	b.n	8005110 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f7ff ffb4 	bl	800507e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	771a      	strb	r2, [r3, #28]
}
 800511c:	bf00      	nop
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005130:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	429a      	cmp	r2, r3
 800513a:	d10b      	bne.n	8005154 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2201      	movs	r2, #1
 8005140:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	69db      	ldr	r3, [r3, #28]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d136      	bne.n	80051b8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005152:	e031      	b.n	80051b8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	429a      	cmp	r2, r3
 800515c:	d10b      	bne.n	8005176 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2202      	movs	r2, #2
 8005162:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	69db      	ldr	r3, [r3, #28]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d125      	bne.n	80051b8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005174:	e020      	b.n	80051b8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	429a      	cmp	r2, r3
 800517e:	d10b      	bne.n	8005198 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2204      	movs	r2, #4
 8005184:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d114      	bne.n	80051b8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005196:	e00f      	b.n	80051b8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d10a      	bne.n	80051b8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2208      	movs	r2, #8
 80051a6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	69db      	ldr	r3, [r3, #28]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d103      	bne.n	80051b8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f7ff ff42 	bl	8005042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	771a      	strb	r2, [r3, #28]
}
 80051c4:	bf00      	nop
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d103      	bne.n	80051ec <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2201      	movs	r2, #1
 80051e8:	771a      	strb	r2, [r3, #28]
 80051ea:	e019      	b.n	8005220 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d103      	bne.n	80051fe <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2202      	movs	r2, #2
 80051fa:	771a      	strb	r2, [r3, #28]
 80051fc:	e010      	b.n	8005220 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	429a      	cmp	r2, r3
 8005206:	d103      	bne.n	8005210 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2204      	movs	r2, #4
 800520c:	771a      	strb	r2, [r3, #28]
 800520e:	e007      	b.n	8005220 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	429a      	cmp	r2, r3
 8005218:	d102      	bne.n	8005220 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2208      	movs	r2, #8
 800521e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f7ff ff18 	bl	8005056 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	771a      	strb	r2, [r3, #28]
}
 800522c:	bf00      	nop
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a34      	ldr	r2, [pc, #208]	; (8005318 <TIM_Base_SetConfig+0xe4>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d00f      	beq.n	800526c <TIM_Base_SetConfig+0x38>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005252:	d00b      	beq.n	800526c <TIM_Base_SetConfig+0x38>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a31      	ldr	r2, [pc, #196]	; (800531c <TIM_Base_SetConfig+0xe8>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d007      	beq.n	800526c <TIM_Base_SetConfig+0x38>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a30      	ldr	r2, [pc, #192]	; (8005320 <TIM_Base_SetConfig+0xec>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d003      	beq.n	800526c <TIM_Base_SetConfig+0x38>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a2f      	ldr	r2, [pc, #188]	; (8005324 <TIM_Base_SetConfig+0xf0>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d108      	bne.n	800527e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a25      	ldr	r2, [pc, #148]	; (8005318 <TIM_Base_SetConfig+0xe4>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d01b      	beq.n	80052be <TIM_Base_SetConfig+0x8a>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528c:	d017      	beq.n	80052be <TIM_Base_SetConfig+0x8a>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a22      	ldr	r2, [pc, #136]	; (800531c <TIM_Base_SetConfig+0xe8>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d013      	beq.n	80052be <TIM_Base_SetConfig+0x8a>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a21      	ldr	r2, [pc, #132]	; (8005320 <TIM_Base_SetConfig+0xec>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d00f      	beq.n	80052be <TIM_Base_SetConfig+0x8a>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a20      	ldr	r2, [pc, #128]	; (8005324 <TIM_Base_SetConfig+0xf0>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d00b      	beq.n	80052be <TIM_Base_SetConfig+0x8a>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a1f      	ldr	r2, [pc, #124]	; (8005328 <TIM_Base_SetConfig+0xf4>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d007      	beq.n	80052be <TIM_Base_SetConfig+0x8a>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a1e      	ldr	r2, [pc, #120]	; (800532c <TIM_Base_SetConfig+0xf8>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d003      	beq.n	80052be <TIM_Base_SetConfig+0x8a>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a1d      	ldr	r2, [pc, #116]	; (8005330 <TIM_Base_SetConfig+0xfc>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d108      	bne.n	80052d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a08      	ldr	r2, [pc, #32]	; (8005318 <TIM_Base_SetConfig+0xe4>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d103      	bne.n	8005304 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	691a      	ldr	r2, [r3, #16]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	615a      	str	r2, [r3, #20]
}
 800530a:	bf00      	nop
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	40010000 	.word	0x40010000
 800531c:	40000400 	.word	0x40000400
 8005320:	40000800 	.word	0x40000800
 8005324:	40000c00 	.word	0x40000c00
 8005328:	40014000 	.word	0x40014000
 800532c:	40014400 	.word	0x40014400
 8005330:	40014800 	.word	0x40014800

08005334 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005334:	b480      	push	{r7}
 8005336:	b087      	sub	sp, #28
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	f023 0201 	bic.w	r2, r3, #1
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f023 0303 	bic.w	r3, r3, #3
 800536a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	4313      	orrs	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f023 0302 	bic.w	r3, r3, #2
 800537c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	4313      	orrs	r3, r2
 8005386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a1c      	ldr	r2, [pc, #112]	; (80053fc <TIM_OC1_SetConfig+0xc8>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d10c      	bne.n	80053aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f023 0308 	bic.w	r3, r3, #8
 8005396:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	4313      	orrs	r3, r2
 80053a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f023 0304 	bic.w	r3, r3, #4
 80053a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a13      	ldr	r2, [pc, #76]	; (80053fc <TIM_OC1_SetConfig+0xc8>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d111      	bne.n	80053d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	621a      	str	r2, [r3, #32]
}
 80053f0:	bf00      	nop
 80053f2:	371c      	adds	r7, #28
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	40010000 	.word	0x40010000

08005400 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	f023 0210 	bic.w	r2, r3, #16
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800542e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	021b      	lsls	r3, r3, #8
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4313      	orrs	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f023 0320 	bic.w	r3, r3, #32
 800544a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	011b      	lsls	r3, r3, #4
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	4313      	orrs	r3, r2
 8005456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a1e      	ldr	r2, [pc, #120]	; (80054d4 <TIM_OC2_SetConfig+0xd4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d10d      	bne.n	800547c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	011b      	lsls	r3, r3, #4
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	4313      	orrs	r3, r2
 8005472:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800547a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a15      	ldr	r2, [pc, #84]	; (80054d4 <TIM_OC2_SetConfig+0xd4>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d113      	bne.n	80054ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800548a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005492:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	4313      	orrs	r3, r2
 800549e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	621a      	str	r2, [r3, #32]
}
 80054c6:	bf00      	nop
 80054c8:	371c      	adds	r7, #28
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	40010000 	.word	0x40010000

080054d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f023 0303 	bic.w	r3, r3, #3
 800550e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	021b      	lsls	r3, r3, #8
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	4313      	orrs	r3, r2
 800552c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a1d      	ldr	r2, [pc, #116]	; (80055a8 <TIM_OC3_SetConfig+0xd0>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d10d      	bne.n	8005552 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800553c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	021b      	lsls	r3, r3, #8
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	4313      	orrs	r3, r2
 8005548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005550:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a14      	ldr	r2, [pc, #80]	; (80055a8 <TIM_OC3_SetConfig+0xd0>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d113      	bne.n	8005582 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	011b      	lsls	r3, r3, #4
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	4313      	orrs	r3, r2
 8005574:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	011b      	lsls	r3, r3, #4
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	4313      	orrs	r3, r2
 8005580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	621a      	str	r2, [r3, #32]
}
 800559c:	bf00      	nop
 800559e:	371c      	adds	r7, #28
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr
 80055a8:	40010000 	.word	0x40010000

080055ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	021b      	lsls	r3, r3, #8
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	031b      	lsls	r3, r3, #12
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	4313      	orrs	r3, r2
 8005602:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a10      	ldr	r2, [pc, #64]	; (8005648 <TIM_OC4_SetConfig+0x9c>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d109      	bne.n	8005620 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005612:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	019b      	lsls	r3, r3, #6
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4313      	orrs	r3, r2
 800561e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	621a      	str	r2, [r3, #32]
}
 800563a:	bf00      	nop
 800563c:	371c      	adds	r7, #28
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	40010000 	.word	0x40010000

0800564c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	f023 0201 	bic.w	r2, r3, #1
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005676:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	011b      	lsls	r3, r3, #4
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	4313      	orrs	r3, r2
 8005680:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f023 030a 	bic.w	r3, r3, #10
 8005688:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	4313      	orrs	r3, r2
 8005690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	621a      	str	r2, [r3, #32]
}
 800569e:	bf00      	nop
 80056a0:	371c      	adds	r7, #28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b087      	sub	sp, #28
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	60f8      	str	r0, [r7, #12]
 80056b2:	60b9      	str	r1, [r7, #8]
 80056b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	f023 0210 	bic.w	r2, r3, #16
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	031b      	lsls	r3, r3, #12
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	621a      	str	r2, [r3, #32]
}
 80056fe:	bf00      	nop
 8005700:	371c      	adds	r7, #28
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800570a:	b480      	push	{r7}
 800570c:	b085      	sub	sp, #20
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005720:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4313      	orrs	r3, r2
 8005728:	f043 0307 	orr.w	r3, r3, #7
 800572c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	609a      	str	r2, [r3, #8]
}
 8005734:	bf00      	nop
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005740:	b480      	push	{r7}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
 800574c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800575a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	021a      	lsls	r2, r3, #8
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	431a      	orrs	r2, r3
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	4313      	orrs	r3, r2
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	4313      	orrs	r3, r2
 800576c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	609a      	str	r2, [r3, #8]
}
 8005774:	bf00      	nop
 8005776:	371c      	adds	r7, #28
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005780:	b480      	push	{r7}
 8005782:	b087      	sub	sp, #28
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	f003 031f 	and.w	r3, r3, #31
 8005792:	2201      	movs	r2, #1
 8005794:	fa02 f303 	lsl.w	r3, r2, r3
 8005798:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6a1a      	ldr	r2, [r3, #32]
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	43db      	mvns	r3, r3
 80057a2:	401a      	ands	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6a1a      	ldr	r2, [r3, #32]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	f003 031f 	and.w	r3, r3, #31
 80057b2:	6879      	ldr	r1, [r7, #4]
 80057b4:	fa01 f303 	lsl.w	r3, r1, r3
 80057b8:	431a      	orrs	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	621a      	str	r2, [r3, #32]
}
 80057be:	bf00      	nop
 80057c0:	371c      	adds	r7, #28
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
	...

080057cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d101      	bne.n	80057e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057e0:	2302      	movs	r3, #2
 80057e2:	e050      	b.n	8005886 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	4313      	orrs	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a1c      	ldr	r2, [pc, #112]	; (8005894 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d018      	beq.n	800585a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005830:	d013      	beq.n	800585a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a18      	ldr	r2, [pc, #96]	; (8005898 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d00e      	beq.n	800585a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a16      	ldr	r2, [pc, #88]	; (800589c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d009      	beq.n	800585a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a15      	ldr	r2, [pc, #84]	; (80058a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d004      	beq.n	800585a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a13      	ldr	r2, [pc, #76]	; (80058a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d10c      	bne.n	8005874 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005860:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	4313      	orrs	r3, r2
 800586a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	40010000 	.word	0x40010000
 8005898:	40000400 	.word	0x40000400
 800589c:	40000800 	.word	0x40000800
 80058a0:	40000c00 	.word	0x40000c00
 80058a4:	40014000 	.word	0x40014000

080058a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058d0:	b084      	sub	sp, #16
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b084      	sub	sp, #16
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
 80058da:	f107 001c 	add.w	r0, r7, #28
 80058de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d122      	bne.n	800592e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80058fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005912:	2b01      	cmp	r3, #1
 8005914:	d105      	bne.n	8005922 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f001 fb1c 	bl	8006f60 <USB_CoreReset>
 8005928:	4603      	mov	r3, r0
 800592a:	73fb      	strb	r3, [r7, #15]
 800592c:	e01a      	b.n	8005964 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f001 fb10 	bl	8006f60 <USB_CoreReset>
 8005940:	4603      	mov	r3, r0
 8005942:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005946:	2b00      	cmp	r3, #0
 8005948:	d106      	bne.n	8005958 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	639a      	str	r2, [r3, #56]	; 0x38
 8005956:	e005      	b.n	8005964 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005966:	2b01      	cmp	r3, #1
 8005968:	d10b      	bne.n	8005982 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f043 0206 	orr.w	r2, r3, #6
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f043 0220 	orr.w	r2, r3, #32
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005982:	7bfb      	ldrb	r3, [r7, #15]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800598e:	b004      	add	sp, #16
 8005990:	4770      	bx	lr
	...

08005994 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005994:	b480      	push	{r7}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	4613      	mov	r3, r2
 80059a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80059a2:	79fb      	ldrb	r3, [r7, #7]
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d165      	bne.n	8005a74 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	4a41      	ldr	r2, [pc, #260]	; (8005ab0 <USB_SetTurnaroundTime+0x11c>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d906      	bls.n	80059be <USB_SetTurnaroundTime+0x2a>
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	4a40      	ldr	r2, [pc, #256]	; (8005ab4 <USB_SetTurnaroundTime+0x120>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d202      	bcs.n	80059be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80059b8:	230f      	movs	r3, #15
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	e062      	b.n	8005a84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	4a3c      	ldr	r2, [pc, #240]	; (8005ab4 <USB_SetTurnaroundTime+0x120>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d306      	bcc.n	80059d4 <USB_SetTurnaroundTime+0x40>
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	4a3b      	ldr	r2, [pc, #236]	; (8005ab8 <USB_SetTurnaroundTime+0x124>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d202      	bcs.n	80059d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80059ce:	230e      	movs	r3, #14
 80059d0:	617b      	str	r3, [r7, #20]
 80059d2:	e057      	b.n	8005a84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	4a38      	ldr	r2, [pc, #224]	; (8005ab8 <USB_SetTurnaroundTime+0x124>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d306      	bcc.n	80059ea <USB_SetTurnaroundTime+0x56>
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	4a37      	ldr	r2, [pc, #220]	; (8005abc <USB_SetTurnaroundTime+0x128>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d202      	bcs.n	80059ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80059e4:	230d      	movs	r3, #13
 80059e6:	617b      	str	r3, [r7, #20]
 80059e8:	e04c      	b.n	8005a84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	4a33      	ldr	r2, [pc, #204]	; (8005abc <USB_SetTurnaroundTime+0x128>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d306      	bcc.n	8005a00 <USB_SetTurnaroundTime+0x6c>
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	4a32      	ldr	r2, [pc, #200]	; (8005ac0 <USB_SetTurnaroundTime+0x12c>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d802      	bhi.n	8005a00 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80059fa:	230c      	movs	r3, #12
 80059fc:	617b      	str	r3, [r7, #20]
 80059fe:	e041      	b.n	8005a84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	4a2f      	ldr	r2, [pc, #188]	; (8005ac0 <USB_SetTurnaroundTime+0x12c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d906      	bls.n	8005a16 <USB_SetTurnaroundTime+0x82>
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	4a2e      	ldr	r2, [pc, #184]	; (8005ac4 <USB_SetTurnaroundTime+0x130>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d802      	bhi.n	8005a16 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005a10:	230b      	movs	r3, #11
 8005a12:	617b      	str	r3, [r7, #20]
 8005a14:	e036      	b.n	8005a84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	4a2a      	ldr	r2, [pc, #168]	; (8005ac4 <USB_SetTurnaroundTime+0x130>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d906      	bls.n	8005a2c <USB_SetTurnaroundTime+0x98>
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	4a29      	ldr	r2, [pc, #164]	; (8005ac8 <USB_SetTurnaroundTime+0x134>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d802      	bhi.n	8005a2c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005a26:	230a      	movs	r3, #10
 8005a28:	617b      	str	r3, [r7, #20]
 8005a2a:	e02b      	b.n	8005a84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	4a26      	ldr	r2, [pc, #152]	; (8005ac8 <USB_SetTurnaroundTime+0x134>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d906      	bls.n	8005a42 <USB_SetTurnaroundTime+0xae>
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	4a25      	ldr	r2, [pc, #148]	; (8005acc <USB_SetTurnaroundTime+0x138>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d202      	bcs.n	8005a42 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005a3c:	2309      	movs	r3, #9
 8005a3e:	617b      	str	r3, [r7, #20]
 8005a40:	e020      	b.n	8005a84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	4a21      	ldr	r2, [pc, #132]	; (8005acc <USB_SetTurnaroundTime+0x138>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d306      	bcc.n	8005a58 <USB_SetTurnaroundTime+0xc4>
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	4a20      	ldr	r2, [pc, #128]	; (8005ad0 <USB_SetTurnaroundTime+0x13c>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d802      	bhi.n	8005a58 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005a52:	2308      	movs	r3, #8
 8005a54:	617b      	str	r3, [r7, #20]
 8005a56:	e015      	b.n	8005a84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	4a1d      	ldr	r2, [pc, #116]	; (8005ad0 <USB_SetTurnaroundTime+0x13c>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d906      	bls.n	8005a6e <USB_SetTurnaroundTime+0xda>
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	4a1c      	ldr	r2, [pc, #112]	; (8005ad4 <USB_SetTurnaroundTime+0x140>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d202      	bcs.n	8005a6e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005a68:	2307      	movs	r3, #7
 8005a6a:	617b      	str	r3, [r7, #20]
 8005a6c:	e00a      	b.n	8005a84 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005a6e:	2306      	movs	r3, #6
 8005a70:	617b      	str	r3, [r7, #20]
 8005a72:	e007      	b.n	8005a84 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005a74:	79fb      	ldrb	r3, [r7, #7]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d102      	bne.n	8005a80 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005a7a:	2309      	movs	r3, #9
 8005a7c:	617b      	str	r3, [r7, #20]
 8005a7e:	e001      	b.n	8005a84 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005a80:	2309      	movs	r3, #9
 8005a82:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	68da      	ldr	r2, [r3, #12]
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	029b      	lsls	r3, r3, #10
 8005a98:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005a9c:	431a      	orrs	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	371c      	adds	r7, #28
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	00d8acbf 	.word	0x00d8acbf
 8005ab4:	00e4e1c0 	.word	0x00e4e1c0
 8005ab8:	00f42400 	.word	0x00f42400
 8005abc:	01067380 	.word	0x01067380
 8005ac0:	011a499f 	.word	0x011a499f
 8005ac4:	01312cff 	.word	0x01312cff
 8005ac8:	014ca43f 	.word	0x014ca43f
 8005acc:	016e3600 	.word	0x016e3600
 8005ad0:	01a6ab1f 	.word	0x01a6ab1f
 8005ad4:	01e84800 	.word	0x01e84800

08005ad8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f043 0201 	orr.w	r2, r3, #1
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b083      	sub	sp, #12
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f023 0201 	bic.w	r2, r3, #1
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	460b      	mov	r3, r1
 8005b26:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b38:	78fb      	ldrb	r3, [r7, #3]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d115      	bne.n	8005b6a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b4a:	2001      	movs	r0, #1
 8005b4c:	f7fc f91a 	bl	8001d84 <HAL_Delay>
      ms++;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	3301      	adds	r3, #1
 8005b54:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f001 f972 	bl	8006e40 <USB_GetMode>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d01e      	beq.n	8005ba0 <USB_SetCurrentMode+0x84>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2b31      	cmp	r3, #49	; 0x31
 8005b66:	d9f0      	bls.n	8005b4a <USB_SetCurrentMode+0x2e>
 8005b68:	e01a      	b.n	8005ba0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b6a:	78fb      	ldrb	r3, [r7, #3]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d115      	bne.n	8005b9c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b7c:	2001      	movs	r0, #1
 8005b7e:	f7fc f901 	bl	8001d84 <HAL_Delay>
      ms++;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	3301      	adds	r3, #1
 8005b86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f001 f959 	bl	8006e40 <USB_GetMode>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d005      	beq.n	8005ba0 <USB_SetCurrentMode+0x84>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2b31      	cmp	r3, #49	; 0x31
 8005b98:	d9f0      	bls.n	8005b7c <USB_SetCurrentMode+0x60>
 8005b9a:	e001      	b.n	8005ba0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e005      	b.n	8005bac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2b32      	cmp	r3, #50	; 0x32
 8005ba4:	d101      	bne.n	8005baa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e000      	b.n	8005bac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bb4:	b084      	sub	sp, #16
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b086      	sub	sp, #24
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
 8005bbe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005bc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005bce:	2300      	movs	r3, #0
 8005bd0:	613b      	str	r3, [r7, #16]
 8005bd2:	e009      	b.n	8005be8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	3340      	adds	r3, #64	; 0x40
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4413      	add	r3, r2
 8005bde:	2200      	movs	r2, #0
 8005be0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	3301      	adds	r3, #1
 8005be6:	613b      	str	r3, [r7, #16]
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	2b0e      	cmp	r3, #14
 8005bec:	d9f2      	bls.n	8005bd4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d11c      	bne.n	8005c2e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c02:	f043 0302 	orr.w	r3, r3, #2
 8005c06:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c18:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c24:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	639a      	str	r2, [r3, #56]	; 0x38
 8005c2c:	e00b      	b.n	8005c46 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c32:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	2300      	movs	r3, #0
 8005c50:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c58:	4619      	mov	r1, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c60:	461a      	mov	r2, r3
 8005c62:	680b      	ldr	r3, [r1, #0]
 8005c64:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d10c      	bne.n	8005c86 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d104      	bne.n	8005c7c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005c72:	2100      	movs	r1, #0
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f945 	bl	8005f04 <USB_SetDevSpeed>
 8005c7a:	e008      	b.n	8005c8e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f940 	bl	8005f04 <USB_SetDevSpeed>
 8005c84:	e003      	b.n	8005c8e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005c86:	2103      	movs	r1, #3
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f93b 	bl	8005f04 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c8e:	2110      	movs	r1, #16
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f8f3 	bl	8005e7c <USB_FlushTxFifo>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d001      	beq.n	8005ca0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 f90f 	bl	8005ec4 <USB_FlushRxFifo>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d001      	beq.n	8005cb0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	2300      	movs	r3, #0
 8005cba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cce:	461a      	mov	r2, r3
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	613b      	str	r3, [r7, #16]
 8005cd8:	e043      	b.n	8005d62 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cf0:	d118      	bne.n	8005d24 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d10a      	bne.n	8005d0e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d04:	461a      	mov	r2, r3
 8005d06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d0a:	6013      	str	r3, [r2, #0]
 8005d0c:	e013      	b.n	8005d36 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	015a      	lsls	r2, r3, #5
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	4413      	add	r3, r2
 8005d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d20:	6013      	str	r3, [r2, #0]
 8005d22:	e008      	b.n	8005d36 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d30:	461a      	mov	r2, r3
 8005d32:	2300      	movs	r3, #0
 8005d34:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d42:	461a      	mov	r2, r3
 8005d44:	2300      	movs	r3, #0
 8005d46:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d54:	461a      	mov	r2, r3
 8005d56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	613b      	str	r3, [r7, #16]
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d3b7      	bcc.n	8005cda <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	613b      	str	r3, [r7, #16]
 8005d6e:	e043      	b.n	8005df8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d86:	d118      	bne.n	8005dba <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10a      	bne.n	8005da4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005da0:	6013      	str	r3, [r2, #0]
 8005da2:	e013      	b.n	8005dcc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db0:	461a      	mov	r2, r3
 8005db2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005db6:	6013      	str	r3, [r2, #0]
 8005db8:	e008      	b.n	8005dcc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	2300      	movs	r3, #0
 8005dca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd8:	461a      	mov	r2, r3
 8005dda:	2300      	movs	r3, #0
 8005ddc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dea:	461a      	mov	r2, r3
 8005dec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005df0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	3301      	adds	r3, #1
 8005df6:	613b      	str	r3, [r7, #16]
 8005df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d3b7      	bcc.n	8005d70 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e12:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005e20:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d105      	bne.n	8005e34 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	f043 0210 	orr.w	r2, r3, #16
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	699a      	ldr	r2, [r3, #24]
 8005e38:	4b0f      	ldr	r3, [pc, #60]	; (8005e78 <USB_DevInit+0x2c4>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d005      	beq.n	8005e52 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	f043 0208 	orr.w	r2, r3, #8
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d107      	bne.n	8005e68 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e60:	f043 0304 	orr.w	r3, r3, #4
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3718      	adds	r7, #24
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e74:	b004      	add	sp, #16
 8005e76:	4770      	bx	lr
 8005e78:	803c3800 	.word	0x803c3800

08005e7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	019b      	lsls	r3, r3, #6
 8005e8e:	f043 0220 	orr.w	r2, r3, #32
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	60fb      	str	r3, [r7, #12]
 8005e9c:	4a08      	ldr	r2, [pc, #32]	; (8005ec0 <USB_FlushTxFifo+0x44>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d901      	bls.n	8005ea6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e006      	b.n	8005eb4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	f003 0320 	and.w	r3, r3, #32
 8005eae:	2b20      	cmp	r3, #32
 8005eb0:	d0f1      	beq.n	8005e96 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	00030d40 	.word	0x00030d40

08005ec4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2210      	movs	r2, #16
 8005ed4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	60fb      	str	r3, [r7, #12]
 8005edc:	4a08      	ldr	r2, [pc, #32]	; (8005f00 <USB_FlushRxFifo+0x3c>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d901      	bls.n	8005ee6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e006      	b.n	8005ef4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	f003 0310 	and.w	r3, r3, #16
 8005eee:	2b10      	cmp	r3, #16
 8005ef0:	d0f1      	beq.n	8005ed6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3714      	adds	r7, #20
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	00030d40 	.word	0x00030d40

08005f04 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	78fb      	ldrb	r3, [r7, #3]
 8005f1e:	68f9      	ldr	r1, [r7, #12]
 8005f20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f24:	4313      	orrs	r3, r2
 8005f26:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b087      	sub	sp, #28
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f003 0306 	and.w	r3, r3, #6
 8005f4e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d102      	bne.n	8005f5c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005f56:	2300      	movs	r3, #0
 8005f58:	75fb      	strb	r3, [r7, #23]
 8005f5a:	e00a      	b.n	8005f72 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d002      	beq.n	8005f68 <USB_GetDevSpeed+0x32>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2b06      	cmp	r3, #6
 8005f66:	d102      	bne.n	8005f6e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005f68:	2302      	movs	r3, #2
 8005f6a:	75fb      	strb	r3, [r7, #23]
 8005f6c:	e001      	b.n	8005f72 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005f6e:	230f      	movs	r3, #15
 8005f70:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	371c      	adds	r7, #28
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	785b      	ldrb	r3, [r3, #1]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d13a      	bne.n	8006012 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa2:	69da      	ldr	r2, [r3, #28]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	f003 030f 	and.w	r3, r3, #15
 8005fac:	2101      	movs	r1, #1
 8005fae:	fa01 f303 	lsl.w	r3, r1, r3
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	68f9      	ldr	r1, [r7, #12]
 8005fb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d155      	bne.n	8006080 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	78db      	ldrb	r3, [r3, #3]
 8005fee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ff0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	059b      	lsls	r3, r3, #22
 8005ff6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	0151      	lsls	r1, r2, #5
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	440a      	add	r2, r1
 8006002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800600a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800600e:	6013      	str	r3, [r2, #0]
 8006010:	e036      	b.n	8006080 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006018:	69da      	ldr	r2, [r3, #28]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	f003 030f 	and.w	r3, r3, #15
 8006022:	2101      	movs	r1, #1
 8006024:	fa01 f303 	lsl.w	r3, r1, r3
 8006028:	041b      	lsls	r3, r3, #16
 800602a:	68f9      	ldr	r1, [r7, #12]
 800602c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006030:	4313      	orrs	r3, r2
 8006032:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	015a      	lsls	r2, r3, #5
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	4413      	add	r3, r2
 800603c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d11a      	bne.n	8006080 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	015a      	lsls	r2, r3, #5
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	4413      	add	r3, r2
 8006052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	78db      	ldrb	r3, [r3, #3]
 8006064:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006066:	430b      	orrs	r3, r1
 8006068:	4313      	orrs	r3, r2
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	0151      	lsls	r1, r2, #5
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	440a      	add	r2, r1
 8006072:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800607a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800607e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3714      	adds	r7, #20
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
	...

08006090 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	785b      	ldrb	r3, [r3, #1]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d161      	bne.n	8006170 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060c2:	d11f      	bne.n	8006104 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	0151      	lsls	r1, r2, #5
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	440a      	add	r2, r1
 80060da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80060e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	0151      	lsls	r1, r2, #5
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	440a      	add	r2, r1
 80060fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006102:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800610a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	f003 030f 	and.w	r3, r3, #15
 8006114:	2101      	movs	r1, #1
 8006116:	fa01 f303 	lsl.w	r3, r1, r3
 800611a:	b29b      	uxth	r3, r3
 800611c:	43db      	mvns	r3, r3
 800611e:	68f9      	ldr	r1, [r7, #12]
 8006120:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006124:	4013      	ands	r3, r2
 8006126:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612e:	69da      	ldr	r2, [r3, #28]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	f003 030f 	and.w	r3, r3, #15
 8006138:	2101      	movs	r1, #1
 800613a:	fa01 f303 	lsl.w	r3, r1, r3
 800613e:	b29b      	uxth	r3, r3
 8006140:	43db      	mvns	r3, r3
 8006142:	68f9      	ldr	r1, [r7, #12]
 8006144:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006148:	4013      	ands	r3, r2
 800614a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	4413      	add	r3, r2
 8006154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	0159      	lsls	r1, r3, #5
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	440b      	add	r3, r1
 8006162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006166:	4619      	mov	r1, r3
 8006168:	4b35      	ldr	r3, [pc, #212]	; (8006240 <USB_DeactivateEndpoint+0x1b0>)
 800616a:	4013      	ands	r3, r2
 800616c:	600b      	str	r3, [r1, #0]
 800616e:	e060      	b.n	8006232 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4413      	add	r3, r2
 8006178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006182:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006186:	d11f      	bne.n	80061c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	015a      	lsls	r2, r3, #5
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	4413      	add	r3, r2
 8006190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	0151      	lsls	r1, r2, #5
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	440a      	add	r2, r1
 800619e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	0151      	lsls	r1, r2, #5
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	440a      	add	r2, r1
 80061be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	f003 030f 	and.w	r3, r3, #15
 80061d8:	2101      	movs	r1, #1
 80061da:	fa01 f303 	lsl.w	r3, r1, r3
 80061de:	041b      	lsls	r3, r3, #16
 80061e0:	43db      	mvns	r3, r3
 80061e2:	68f9      	ldr	r1, [r7, #12]
 80061e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061e8:	4013      	ands	r3, r2
 80061ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f2:	69da      	ldr	r2, [r3, #28]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	f003 030f 	and.w	r3, r3, #15
 80061fc:	2101      	movs	r1, #1
 80061fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006202:	041b      	lsls	r3, r3, #16
 8006204:	43db      	mvns	r3, r3
 8006206:	68f9      	ldr	r1, [r7, #12]
 8006208:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800620c:	4013      	ands	r3, r2
 800620e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4413      	add	r3, r2
 8006218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	0159      	lsls	r1, r3, #5
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	440b      	add	r3, r1
 8006226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800622a:	4619      	mov	r1, r3
 800622c:	4b05      	ldr	r3, [pc, #20]	; (8006244 <USB_DeactivateEndpoint+0x1b4>)
 800622e:	4013      	ands	r3, r2
 8006230:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3714      	adds	r7, #20
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr
 8006240:	ec337800 	.word	0xec337800
 8006244:	eff37800 	.word	0xeff37800

08006248 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b08a      	sub	sp, #40	; 0x28
 800624c:	af02      	add	r7, sp, #8
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	4613      	mov	r3, r2
 8006254:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	785b      	ldrb	r3, [r3, #1]
 8006264:	2b01      	cmp	r3, #1
 8006266:	f040 815c 	bne.w	8006522 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d132      	bne.n	80062d8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	4413      	add	r3, r2
 800627a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	69ba      	ldr	r2, [r7, #24]
 8006282:	0151      	lsls	r1, r2, #5
 8006284:	69fa      	ldr	r2, [r7, #28]
 8006286:	440a      	add	r2, r1
 8006288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800628c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006290:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006294:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	015a      	lsls	r2, r3, #5
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	4413      	add	r3, r2
 800629e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	0151      	lsls	r1, r2, #5
 80062a8:	69fa      	ldr	r2, [r7, #28]
 80062aa:	440a      	add	r2, r1
 80062ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	015a      	lsls	r2, r3, #5
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	4413      	add	r3, r2
 80062be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	69ba      	ldr	r2, [r7, #24]
 80062c6:	0151      	lsls	r1, r2, #5
 80062c8:	69fa      	ldr	r2, [r7, #28]
 80062ca:	440a      	add	r2, r1
 80062cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062d0:	0cdb      	lsrs	r3, r3, #19
 80062d2:	04db      	lsls	r3, r3, #19
 80062d4:	6113      	str	r3, [r2, #16]
 80062d6:	e074      	b.n	80063c2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	015a      	lsls	r2, r3, #5
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	0151      	lsls	r1, r2, #5
 80062ea:	69fa      	ldr	r2, [r7, #28]
 80062ec:	440a      	add	r2, r1
 80062ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f2:	0cdb      	lsrs	r3, r3, #19
 80062f4:	04db      	lsls	r3, r3, #19
 80062f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	015a      	lsls	r2, r3, #5
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	4413      	add	r3, r2
 8006300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	0151      	lsls	r1, r2, #5
 800630a:	69fa      	ldr	r2, [r7, #28]
 800630c:	440a      	add	r2, r1
 800630e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006312:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006316:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800631a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	4413      	add	r3, r2
 8006324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006328:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	6959      	ldr	r1, [r3, #20]
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	440b      	add	r3, r1
 8006334:	1e59      	subs	r1, r3, #1
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	fbb1 f3f3 	udiv	r3, r1, r3
 800633e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006340:	4b9d      	ldr	r3, [pc, #628]	; (80065b8 <USB_EPStartXfer+0x370>)
 8006342:	400b      	ands	r3, r1
 8006344:	69b9      	ldr	r1, [r7, #24]
 8006346:	0148      	lsls	r0, r1, #5
 8006348:	69f9      	ldr	r1, [r7, #28]
 800634a:	4401      	add	r1, r0
 800634c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006350:	4313      	orrs	r3, r2
 8006352:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	4413      	add	r3, r2
 800635c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006360:	691a      	ldr	r2, [r3, #16]
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800636a:	69b9      	ldr	r1, [r7, #24]
 800636c:	0148      	lsls	r0, r1, #5
 800636e:	69f9      	ldr	r1, [r7, #28]
 8006370:	4401      	add	r1, r0
 8006372:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006376:	4313      	orrs	r3, r2
 8006378:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	78db      	ldrb	r3, [r3, #3]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d11f      	bne.n	80063c2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	4413      	add	r3, r2
 800638a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	0151      	lsls	r1, r2, #5
 8006394:	69fa      	ldr	r2, [r7, #28]
 8006396:	440a      	add	r2, r1
 8006398:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800639c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80063a0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	015a      	lsls	r2, r3, #5
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	0151      	lsls	r1, r2, #5
 80063b4:	69fa      	ldr	r2, [r7, #28]
 80063b6:	440a      	add	r2, r1
 80063b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063c0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80063c2:	79fb      	ldrb	r3, [r7, #7]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d14b      	bne.n	8006460 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d009      	beq.n	80063e4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063dc:	461a      	mov	r2, r3
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	78db      	ldrb	r3, [r3, #3]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d128      	bne.n	800643e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d110      	bne.n	800641e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	015a      	lsls	r2, r3, #5
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	4413      	add	r3, r2
 8006404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	0151      	lsls	r1, r2, #5
 800640e:	69fa      	ldr	r2, [r7, #28]
 8006410:	440a      	add	r2, r1
 8006412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006416:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800641a:	6013      	str	r3, [r2, #0]
 800641c:	e00f      	b.n	800643e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	4413      	add	r3, r2
 8006426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	69ba      	ldr	r2, [r7, #24]
 800642e:	0151      	lsls	r1, r2, #5
 8006430:	69fa      	ldr	r2, [r7, #28]
 8006432:	440a      	add	r2, r1
 8006434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800643c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	4413      	add	r3, r2
 8006446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	0151      	lsls	r1, r2, #5
 8006450:	69fa      	ldr	r2, [r7, #28]
 8006452:	440a      	add	r2, r1
 8006454:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006458:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800645c:	6013      	str	r3, [r2, #0]
 800645e:	e12f      	b.n	80066c0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	4413      	add	r3, r2
 8006468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	69ba      	ldr	r2, [r7, #24]
 8006470:	0151      	lsls	r1, r2, #5
 8006472:	69fa      	ldr	r2, [r7, #28]
 8006474:	440a      	add	r2, r1
 8006476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800647a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800647e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	78db      	ldrb	r3, [r3, #3]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d015      	beq.n	80064b4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	695b      	ldr	r3, [r3, #20]
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 8117 	beq.w	80066c0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	f003 030f 	and.w	r3, r3, #15
 80064a2:	2101      	movs	r1, #1
 80064a4:	fa01 f303 	lsl.w	r3, r1, r3
 80064a8:	69f9      	ldr	r1, [r7, #28]
 80064aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064ae:	4313      	orrs	r3, r2
 80064b0:	634b      	str	r3, [r1, #52]	; 0x34
 80064b2:	e105      	b.n	80066c0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d110      	bne.n	80064e6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	0151      	lsls	r1, r2, #5
 80064d6:	69fa      	ldr	r2, [r7, #28]
 80064d8:	440a      	add	r2, r1
 80064da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064e2:	6013      	str	r3, [r2, #0]
 80064e4:	e00f      	b.n	8006506 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	0151      	lsls	r1, r2, #5
 80064f8:	69fa      	ldr	r2, [r7, #28]
 80064fa:	440a      	add	r2, r1
 80064fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006504:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	68d9      	ldr	r1, [r3, #12]
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	781a      	ldrb	r2, [r3, #0]
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	b298      	uxth	r0, r3
 8006514:	79fb      	ldrb	r3, [r7, #7]
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	4603      	mov	r3, r0
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f000 fa2b 	bl	8006976 <USB_WritePacket>
 8006520:	e0ce      	b.n	80066c0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	015a      	lsls	r2, r3, #5
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	4413      	add	r3, r2
 800652a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	69ba      	ldr	r2, [r7, #24]
 8006532:	0151      	lsls	r1, r2, #5
 8006534:	69fa      	ldr	r2, [r7, #28]
 8006536:	440a      	add	r2, r1
 8006538:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800653c:	0cdb      	lsrs	r3, r3, #19
 800653e:	04db      	lsls	r3, r3, #19
 8006540:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	4413      	add	r3, r2
 800654a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	0151      	lsls	r1, r2, #5
 8006554:	69fa      	ldr	r2, [r7, #28]
 8006556:	440a      	add	r2, r1
 8006558:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800655c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006560:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006564:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d126      	bne.n	80065bc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	4413      	add	r3, r2
 8006576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657a:	691a      	ldr	r2, [r3, #16]
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006584:	69b9      	ldr	r1, [r7, #24]
 8006586:	0148      	lsls	r0, r1, #5
 8006588:	69f9      	ldr	r1, [r7, #28]
 800658a:	4401      	add	r1, r0
 800658c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006590:	4313      	orrs	r3, r2
 8006592:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	69ba      	ldr	r2, [r7, #24]
 80065a4:	0151      	lsls	r1, r2, #5
 80065a6:	69fa      	ldr	r2, [r7, #28]
 80065a8:	440a      	add	r2, r1
 80065aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065b2:	6113      	str	r3, [r2, #16]
 80065b4:	e036      	b.n	8006624 <USB_EPStartXfer+0x3dc>
 80065b6:	bf00      	nop
 80065b8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	695a      	ldr	r2, [r3, #20]
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	4413      	add	r3, r2
 80065c6:	1e5a      	subs	r2, r3, #1
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	015a      	lsls	r2, r3, #5
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	4413      	add	r3, r2
 80065da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065de:	691a      	ldr	r2, [r3, #16]
 80065e0:	8afb      	ldrh	r3, [r7, #22]
 80065e2:	04d9      	lsls	r1, r3, #19
 80065e4:	4b39      	ldr	r3, [pc, #228]	; (80066cc <USB_EPStartXfer+0x484>)
 80065e6:	400b      	ands	r3, r1
 80065e8:	69b9      	ldr	r1, [r7, #24]
 80065ea:	0148      	lsls	r0, r1, #5
 80065ec:	69f9      	ldr	r1, [r7, #28]
 80065ee:	4401      	add	r1, r0
 80065f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065f4:	4313      	orrs	r3, r2
 80065f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	015a      	lsls	r2, r3, #5
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	4413      	add	r3, r2
 8006600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006604:	691a      	ldr	r2, [r3, #16]
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	8af9      	ldrh	r1, [r7, #22]
 800660c:	fb01 f303 	mul.w	r3, r1, r3
 8006610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006614:	69b9      	ldr	r1, [r7, #24]
 8006616:	0148      	lsls	r0, r1, #5
 8006618:	69f9      	ldr	r1, [r7, #28]
 800661a:	4401      	add	r1, r0
 800661c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006620:	4313      	orrs	r3, r2
 8006622:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006624:	79fb      	ldrb	r3, [r7, #7]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d10d      	bne.n	8006646 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d009      	beq.n	8006646 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	68d9      	ldr	r1, [r3, #12]
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	4413      	add	r3, r2
 800663e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006642:	460a      	mov	r2, r1
 8006644:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	78db      	ldrb	r3, [r3, #3]
 800664a:	2b01      	cmp	r3, #1
 800664c:	d128      	bne.n	80066a0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800665a:	2b00      	cmp	r3, #0
 800665c:	d110      	bne.n	8006680 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	4413      	add	r3, r2
 8006666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	69ba      	ldr	r2, [r7, #24]
 800666e:	0151      	lsls	r1, r2, #5
 8006670:	69fa      	ldr	r2, [r7, #28]
 8006672:	440a      	add	r2, r1
 8006674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006678:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800667c:	6013      	str	r3, [r2, #0]
 800667e:	e00f      	b.n	80066a0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	4413      	add	r3, r2
 8006688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	0151      	lsls	r1, r2, #5
 8006692:	69fa      	ldr	r2, [r7, #28]
 8006694:	440a      	add	r2, r1
 8006696:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800669a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800669e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	69ba      	ldr	r2, [r7, #24]
 80066b0:	0151      	lsls	r1, r2, #5
 80066b2:	69fa      	ldr	r2, [r7, #28]
 80066b4:	440a      	add	r2, r1
 80066b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3720      	adds	r7, #32
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	1ff80000 	.word	0x1ff80000

080066d0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b087      	sub	sp, #28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	4613      	mov	r3, r2
 80066dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	785b      	ldrb	r3, [r3, #1]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	f040 80cd 	bne.w	800688c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d132      	bne.n	8006760 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	015a      	lsls	r2, r3, #5
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	4413      	add	r3, r2
 8006702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	0151      	lsls	r1, r2, #5
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	440a      	add	r2, r1
 8006710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006714:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006718:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800671c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	015a      	lsls	r2, r3, #5
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	4413      	add	r3, r2
 8006726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	0151      	lsls	r1, r2, #5
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	440a      	add	r2, r1
 8006734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006738:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800673c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	4413      	add	r3, r2
 8006746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	0151      	lsls	r1, r2, #5
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	440a      	add	r2, r1
 8006754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006758:	0cdb      	lsrs	r3, r3, #19
 800675a:	04db      	lsls	r3, r3, #19
 800675c:	6113      	str	r3, [r2, #16]
 800675e:	e04e      	b.n	80067fe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	015a      	lsls	r2, r3, #5
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	4413      	add	r3, r2
 8006768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	0151      	lsls	r1, r2, #5
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	440a      	add	r2, r1
 8006776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800677a:	0cdb      	lsrs	r3, r3, #19
 800677c:	04db      	lsls	r3, r3, #19
 800677e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	4413      	add	r3, r2
 8006788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	0151      	lsls	r1, r2, #5
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	440a      	add	r2, r1
 8006796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800679a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800679e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067a2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	695a      	ldr	r2, [r3, #20]
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d903      	bls.n	80067b8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	689a      	ldr	r2, [r3, #8]
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	0151      	lsls	r1, r2, #5
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	440a      	add	r2, r1
 80067ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	015a      	lsls	r2, r3, #5
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	4413      	add	r3, r2
 80067e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067e4:	691a      	ldr	r2, [r3, #16]
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067ee:	6939      	ldr	r1, [r7, #16]
 80067f0:	0148      	lsls	r0, r1, #5
 80067f2:	6979      	ldr	r1, [r7, #20]
 80067f4:	4401      	add	r1, r0
 80067f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80067fa:	4313      	orrs	r3, r2
 80067fc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80067fe:	79fb      	ldrb	r3, [r7, #7]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d11e      	bne.n	8006842 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d009      	beq.n	8006820 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	015a      	lsls	r2, r3, #5
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	4413      	add	r3, r2
 8006814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006818:	461a      	mov	r2, r3
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	015a      	lsls	r2, r3, #5
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	4413      	add	r3, r2
 8006828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	0151      	lsls	r1, r2, #5
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	440a      	add	r2, r1
 8006836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800683a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800683e:	6013      	str	r3, [r2, #0]
 8006840:	e092      	b.n	8006968 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	015a      	lsls	r2, r3, #5
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	4413      	add	r3, r2
 800684a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	0151      	lsls	r1, r2, #5
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	440a      	add	r2, r1
 8006858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800685c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006860:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d07e      	beq.n	8006968 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	f003 030f 	and.w	r3, r3, #15
 800687a:	2101      	movs	r1, #1
 800687c:	fa01 f303 	lsl.w	r3, r1, r3
 8006880:	6979      	ldr	r1, [r7, #20]
 8006882:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006886:	4313      	orrs	r3, r2
 8006888:	634b      	str	r3, [r1, #52]	; 0x34
 800688a:	e06d      	b.n	8006968 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	015a      	lsls	r2, r3, #5
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	4413      	add	r3, r2
 8006894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	0151      	lsls	r1, r2, #5
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	440a      	add	r2, r1
 80068a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068a6:	0cdb      	lsrs	r3, r3, #19
 80068a8:	04db      	lsls	r3, r3, #19
 80068aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	015a      	lsls	r2, r3, #5
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	0151      	lsls	r1, r2, #5
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	440a      	add	r2, r1
 80068c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80068ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80068ce:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d003      	beq.n	80068e0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	689a      	ldr	r2, [r3, #8]
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	0151      	lsls	r1, r2, #5
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	440a      	add	r2, r1
 80068f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	015a      	lsls	r2, r3, #5
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	4413      	add	r3, r2
 8006908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800690c:	691a      	ldr	r2, [r3, #16]
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006916:	6939      	ldr	r1, [r7, #16]
 8006918:	0148      	lsls	r0, r1, #5
 800691a:	6979      	ldr	r1, [r7, #20]
 800691c:	4401      	add	r1, r0
 800691e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006922:	4313      	orrs	r3, r2
 8006924:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006926:	79fb      	ldrb	r3, [r7, #7]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d10d      	bne.n	8006948 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d009      	beq.n	8006948 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	68d9      	ldr	r1, [r3, #12]
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	015a      	lsls	r2, r3, #5
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	4413      	add	r3, r2
 8006940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006944:	460a      	mov	r2, r1
 8006946:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	4413      	add	r3, r2
 8006950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	0151      	lsls	r1, r2, #5
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	440a      	add	r2, r1
 800695e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006962:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006966:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	371c      	adds	r7, #28
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr

08006976 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006976:	b480      	push	{r7}
 8006978:	b089      	sub	sp, #36	; 0x24
 800697a:	af00      	add	r7, sp, #0
 800697c:	60f8      	str	r0, [r7, #12]
 800697e:	60b9      	str	r1, [r7, #8]
 8006980:	4611      	mov	r1, r2
 8006982:	461a      	mov	r2, r3
 8006984:	460b      	mov	r3, r1
 8006986:	71fb      	strb	r3, [r7, #7]
 8006988:	4613      	mov	r3, r2
 800698a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006994:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006998:	2b00      	cmp	r3, #0
 800699a:	d123      	bne.n	80069e4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800699c:	88bb      	ldrh	r3, [r7, #4]
 800699e:	3303      	adds	r3, #3
 80069a0:	089b      	lsrs	r3, r3, #2
 80069a2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80069a4:	2300      	movs	r3, #0
 80069a6:	61bb      	str	r3, [r7, #24]
 80069a8:	e018      	b.n	80069dc <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80069aa:	79fb      	ldrb	r3, [r7, #7]
 80069ac:	031a      	lsls	r2, r3, #12
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069b6:	461a      	mov	r2, r3
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6013      	str	r3, [r2, #0]
      pSrc++;
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	3301      	adds	r3, #1
 80069c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	3301      	adds	r3, #1
 80069c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	3301      	adds	r3, #1
 80069ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	3301      	adds	r3, #1
 80069d4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	3301      	adds	r3, #1
 80069da:	61bb      	str	r3, [r7, #24]
 80069dc:	69ba      	ldr	r2, [r7, #24]
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d3e2      	bcc.n	80069aa <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3724      	adds	r7, #36	; 0x24
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b08b      	sub	sp, #44	; 0x2c
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	60f8      	str	r0, [r7, #12]
 80069fa:	60b9      	str	r1, [r7, #8]
 80069fc:	4613      	mov	r3, r2
 80069fe:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006a08:	88fb      	ldrh	r3, [r7, #6]
 8006a0a:	089b      	lsrs	r3, r3, #2
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006a10:	88fb      	ldrh	r3, [r7, #6]
 8006a12:	f003 0303 	and.w	r3, r3, #3
 8006a16:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006a18:	2300      	movs	r3, #0
 8006a1a:	623b      	str	r3, [r7, #32]
 8006a1c:	e014      	b.n	8006a48 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a28:	601a      	str	r2, [r3, #0]
    pDest++;
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	3301      	adds	r3, #1
 8006a34:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a38:	3301      	adds	r3, #1
 8006a3a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3e:	3301      	adds	r3, #1
 8006a40:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	3301      	adds	r3, #1
 8006a46:	623b      	str	r3, [r7, #32]
 8006a48:	6a3a      	ldr	r2, [r7, #32]
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d3e6      	bcc.n	8006a1e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006a50:	8bfb      	ldrh	r3, [r7, #30]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d01e      	beq.n	8006a94 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006a56:	2300      	movs	r3, #0
 8006a58:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a60:	461a      	mov	r2, r3
 8006a62:	f107 0310 	add.w	r3, r7, #16
 8006a66:	6812      	ldr	r2, [r2, #0]
 8006a68:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	00db      	lsls	r3, r3, #3
 8006a72:	fa22 f303 	lsr.w	r3, r2, r3
 8006a76:	b2da      	uxtb	r2, r3
 8006a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7a:	701a      	strb	r2, [r3, #0]
      i++;
 8006a7c:	6a3b      	ldr	r3, [r7, #32]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	623b      	str	r3, [r7, #32]
      pDest++;
 8006a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a84:	3301      	adds	r3, #1
 8006a86:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006a88:	8bfb      	ldrh	r3, [r7, #30]
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006a8e:	8bfb      	ldrh	r3, [r7, #30]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1ea      	bne.n	8006a6a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	372c      	adds	r7, #44	; 0x2c
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b085      	sub	sp, #20
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
 8006aaa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	785b      	ldrb	r3, [r3, #1]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d12c      	bne.n	8006b18 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	015a      	lsls	r2, r3, #5
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	db12      	blt.n	8006af6 <USB_EPSetStall+0x54>
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00f      	beq.n	8006af6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	0151      	lsls	r1, r2, #5
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	440a      	add	r2, r1
 8006aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006af0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006af4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	015a      	lsls	r2, r3, #5
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	0151      	lsls	r1, r2, #5
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	440a      	add	r2, r1
 8006b0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b14:	6013      	str	r3, [r2, #0]
 8006b16:	e02b      	b.n	8006b70 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	015a      	lsls	r2, r3, #5
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	4413      	add	r3, r2
 8006b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	db12      	blt.n	8006b50 <USB_EPSetStall+0xae>
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00f      	beq.n	8006b50 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	015a      	lsls	r2, r3, #5
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4413      	add	r3, r2
 8006b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	0151      	lsls	r1, r2, #5
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	440a      	add	r2, r1
 8006b46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b4e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	015a      	lsls	r2, r3, #5
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	4413      	add	r3, r2
 8006b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	0151      	lsls	r1, r2, #5
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	440a      	add	r2, r1
 8006b66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3714      	adds	r7, #20
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b085      	sub	sp, #20
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	785b      	ldrb	r3, [r3, #1]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d128      	bne.n	8006bec <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	015a      	lsls	r2, r3, #5
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	0151      	lsls	r1, r2, #5
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	440a      	add	r2, r1
 8006bb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bb4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006bb8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	78db      	ldrb	r3, [r3, #3]
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d003      	beq.n	8006bca <USB_EPClearStall+0x4c>
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	78db      	ldrb	r3, [r3, #3]
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d138      	bne.n	8006c3c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	015a      	lsls	r2, r3, #5
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	0151      	lsls	r1, r2, #5
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	440a      	add	r2, r1
 8006be0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006be8:	6013      	str	r3, [r2, #0]
 8006bea:	e027      	b.n	8006c3c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	015a      	lsls	r2, r3, #5
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	0151      	lsls	r1, r2, #5
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	440a      	add	r2, r1
 8006c02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c0a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	78db      	ldrb	r3, [r3, #3]
 8006c10:	2b03      	cmp	r3, #3
 8006c12:	d003      	beq.n	8006c1c <USB_EPClearStall+0x9e>
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	78db      	ldrb	r3, [r3, #3]
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d10f      	bne.n	8006c3c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68ba      	ldr	r2, [r7, #8]
 8006c2c:	0151      	lsls	r1, r2, #5
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	440a      	add	r2, r1
 8006c32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c3a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b085      	sub	sp, #20
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
 8006c52:	460b      	mov	r3, r1
 8006c54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c68:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006c6c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	78fb      	ldrb	r3, [r7, #3]
 8006c78:	011b      	lsls	r3, r3, #4
 8006c7a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006c7e:	68f9      	ldr	r1, [r7, #12]
 8006c80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c84:	4313      	orrs	r3, r2
 8006c86:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3714      	adds	r7, #20
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr

08006c96 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006c96:	b480      	push	{r7}
 8006c98:	b085      	sub	sp, #20
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006cb0:	f023 0303 	bic.w	r3, r3, #3
 8006cb4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cc4:	f023 0302 	bic.w	r3, r3, #2
 8006cc8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006cf2:	f023 0303 	bic.w	r3, r3, #3
 8006cf6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d06:	f043 0302 	orr.w	r3, r3, #2
 8006d0a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3714      	adds	r7, #20
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b085      	sub	sp, #20
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	4013      	ands	r3, r2
 8006d30:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006d32:	68fb      	ldr	r3, [r7, #12]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3714      	adds	r7, #20
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d5c:	69db      	ldr	r3, [r3, #28]
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	4013      	ands	r3, r2
 8006d62:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	0c1b      	lsrs	r3, r3, #16
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d90:	69db      	ldr	r3, [r3, #28]
 8006d92:	68ba      	ldr	r2, [r7, #8]
 8006d94:	4013      	ands	r3, r2
 8006d96:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	b29b      	uxth	r3, r3
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3714      	adds	r7, #20
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	460b      	mov	r3, r1
 8006db2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006db8:	78fb      	ldrb	r3, [r7, #3]
 8006dba:	015a      	lsls	r2, r3, #5
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006dd6:	68bb      	ldr	r3, [r7, #8]
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3714      	adds	r7, #20
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	460b      	mov	r3, r1
 8006dee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e06:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006e08:	78fb      	ldrb	r3, [r7, #3]
 8006e0a:	f003 030f 	and.w	r3, r3, #15
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	fa22 f303 	lsr.w	r3, r2, r3
 8006e14:	01db      	lsls	r3, r3, #7
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006e1e:	78fb      	ldrb	r3, [r7, #3]
 8006e20:	015a      	lsls	r2, r3, #5
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	4413      	add	r3, r2
 8006e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	693a      	ldr	r2, [r7, #16]
 8006e2e:	4013      	ands	r3, r2
 8006e30:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e32:	68bb      	ldr	r3, [r7, #8]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	371c      	adds	r7, #28
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	695b      	ldr	r3, [r3, #20]
 8006e4c:	f003 0301 	and.w	r3, r3, #1
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e76:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006e7a:	f023 0307 	bic.w	r3, r3, #7
 8006e7e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e92:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3714      	adds	r7, #20
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
	...

08006ea4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b087      	sub	sp, #28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	460b      	mov	r3, r1
 8006eae:	607a      	str	r2, [r7, #4]
 8006eb0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	333c      	adds	r3, #60	; 0x3c
 8006eba:	3304      	adds	r3, #4
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	4a26      	ldr	r2, [pc, #152]	; (8006f5c <USB_EP0_OutStart+0xb8>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d90a      	bls.n	8006ede <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ed4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ed8:	d101      	bne.n	8006ede <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006eda:	2300      	movs	r3, #0
 8006edc:	e037      	b.n	8006f4e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ef8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006efc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	697a      	ldr	r2, [r7, #20]
 8006f08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f0c:	f043 0318 	orr.w	r3, r3, #24
 8006f10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f20:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006f24:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006f26:	7afb      	ldrb	r3, [r7, #11]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d10f      	bne.n	8006f4c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f32:	461a      	mov	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f46:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006f4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	371c      	adds	r7, #28
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	4f54300a 	.word	0x4f54300a

08006f60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	60fb      	str	r3, [r7, #12]
 8006f72:	4a13      	ldr	r2, [pc, #76]	; (8006fc0 <USB_CoreReset+0x60>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d901      	bls.n	8006f7c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e01a      	b.n	8006fb2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	daf3      	bge.n	8006f6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f84:	2300      	movs	r3, #0
 8006f86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	f043 0201 	orr.w	r2, r3, #1
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	3301      	adds	r3, #1
 8006f98:	60fb      	str	r3, [r7, #12]
 8006f9a:	4a09      	ldr	r2, [pc, #36]	; (8006fc0 <USB_CoreReset+0x60>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d901      	bls.n	8006fa4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e006      	b.n	8006fb2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	f003 0301 	and.w	r3, r3, #1
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d0f1      	beq.n	8006f94 <USB_CoreReset+0x34>

  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3714      	adds	r7, #20
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	00030d40 	.word	0x00030d40

08006fc4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	460b      	mov	r3, r1
 8006fce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006fd0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006fd4:	f002 f952 	bl	800927c <USBD_static_malloc>
 8006fd8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d105      	bne.n	8006fec <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006fe8:	2302      	movs	r3, #2
 8006fea:	e066      	b.n	80070ba <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	7c1b      	ldrb	r3, [r3, #16]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d119      	bne.n	8007030 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006ffc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007000:	2202      	movs	r2, #2
 8007002:	2181      	movs	r1, #129	; 0x81
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f002 f816 	bl	8009036 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2201      	movs	r2, #1
 800700e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007010:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007014:	2202      	movs	r2, #2
 8007016:	2101      	movs	r1, #1
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f002 f80c 	bl	8009036 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2210      	movs	r2, #16
 800702a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800702e:	e016      	b.n	800705e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007030:	2340      	movs	r3, #64	; 0x40
 8007032:	2202      	movs	r2, #2
 8007034:	2181      	movs	r1, #129	; 0x81
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f001 fffd 	bl	8009036 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007042:	2340      	movs	r3, #64	; 0x40
 8007044:	2202      	movs	r2, #2
 8007046:	2101      	movs	r1, #1
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f001 fff4 	bl	8009036 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2210      	movs	r2, #16
 800705a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800705e:	2308      	movs	r3, #8
 8007060:	2203      	movs	r2, #3
 8007062:	2182      	movs	r1, #130	; 0x82
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f001 ffe6 	bl	8009036 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	7c1b      	ldrb	r3, [r3, #16]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d109      	bne.n	80070a8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800709a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800709e:	2101      	movs	r1, #1
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f002 f8b7 	bl	8009214 <USBD_LL_PrepareReceive>
 80070a6:	e007      	b.n	80070b8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070ae:	2340      	movs	r3, #64	; 0x40
 80070b0:	2101      	movs	r1, #1
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f002 f8ae 	bl	8009214 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b082      	sub	sp, #8
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
 80070ca:	460b      	mov	r3, r1
 80070cc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80070ce:	2181      	movs	r1, #129	; 0x81
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f001 ffd6 	bl	8009082 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80070dc:	2101      	movs	r1, #1
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f001 ffcf 	bl	8009082 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80070ec:	2182      	movs	r1, #130	; 0x82
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f001 ffc7 	bl	8009082 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00e      	beq.n	800712c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800711e:	4618      	mov	r0, r3
 8007120:	f002 f8ba 	bl	8009298 <USBD_static_free>
    pdev->pClassData = NULL;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
	...

08007138 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b086      	sub	sp, #24
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007148:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800714a:	2300      	movs	r3, #0
 800714c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800714e:	2300      	movs	r3, #0
 8007150:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007152:	2300      	movs	r3, #0
 8007154:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800715c:	2303      	movs	r3, #3
 800715e:	e0af      	b.n	80072c0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007168:	2b00      	cmp	r3, #0
 800716a:	d03f      	beq.n	80071ec <USBD_CDC_Setup+0xb4>
 800716c:	2b20      	cmp	r3, #32
 800716e:	f040 809f 	bne.w	80072b0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	88db      	ldrh	r3, [r3, #6]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d02e      	beq.n	80071d8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	b25b      	sxtb	r3, r3
 8007180:	2b00      	cmp	r3, #0
 8007182:	da16      	bge.n	80071b2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	683a      	ldr	r2, [r7, #0]
 800718e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007190:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007192:	683a      	ldr	r2, [r7, #0]
 8007194:	88d2      	ldrh	r2, [r2, #6]
 8007196:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	88db      	ldrh	r3, [r3, #6]
 800719c:	2b07      	cmp	r3, #7
 800719e:	bf28      	it	cs
 80071a0:	2307      	movcs	r3, #7
 80071a2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	89fa      	ldrh	r2, [r7, #14]
 80071a8:	4619      	mov	r1, r3
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f001 fb19 	bl	80087e2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80071b0:	e085      	b.n	80072be <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	785a      	ldrb	r2, [r3, #1]
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	88db      	ldrh	r3, [r3, #6]
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80071c8:	6939      	ldr	r1, [r7, #16]
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	88db      	ldrh	r3, [r3, #6]
 80071ce:	461a      	mov	r2, r3
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f001 fb32 	bl	800883a <USBD_CtlPrepareRx>
      break;
 80071d6:	e072      	b.n	80072be <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	683a      	ldr	r2, [r7, #0]
 80071e2:	7850      	ldrb	r0, [r2, #1]
 80071e4:	2200      	movs	r2, #0
 80071e6:	6839      	ldr	r1, [r7, #0]
 80071e8:	4798      	blx	r3
      break;
 80071ea:	e068      	b.n	80072be <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	785b      	ldrb	r3, [r3, #1]
 80071f0:	2b0b      	cmp	r3, #11
 80071f2:	d852      	bhi.n	800729a <USBD_CDC_Setup+0x162>
 80071f4:	a201      	add	r2, pc, #4	; (adr r2, 80071fc <USBD_CDC_Setup+0xc4>)
 80071f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fa:	bf00      	nop
 80071fc:	0800722d 	.word	0x0800722d
 8007200:	080072a9 	.word	0x080072a9
 8007204:	0800729b 	.word	0x0800729b
 8007208:	0800729b 	.word	0x0800729b
 800720c:	0800729b 	.word	0x0800729b
 8007210:	0800729b 	.word	0x0800729b
 8007214:	0800729b 	.word	0x0800729b
 8007218:	0800729b 	.word	0x0800729b
 800721c:	0800729b 	.word	0x0800729b
 8007220:	0800729b 	.word	0x0800729b
 8007224:	08007257 	.word	0x08007257
 8007228:	08007281 	.word	0x08007281
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007232:	b2db      	uxtb	r3, r3
 8007234:	2b03      	cmp	r3, #3
 8007236:	d107      	bne.n	8007248 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007238:	f107 030a 	add.w	r3, r7, #10
 800723c:	2202      	movs	r2, #2
 800723e:	4619      	mov	r1, r3
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f001 face 	bl	80087e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007246:	e032      	b.n	80072ae <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007248:	6839      	ldr	r1, [r7, #0]
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f001 fa58 	bl	8008700 <USBD_CtlError>
            ret = USBD_FAIL;
 8007250:	2303      	movs	r3, #3
 8007252:	75fb      	strb	r3, [r7, #23]
          break;
 8007254:	e02b      	b.n	80072ae <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b03      	cmp	r3, #3
 8007260:	d107      	bne.n	8007272 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007262:	f107 030d 	add.w	r3, r7, #13
 8007266:	2201      	movs	r2, #1
 8007268:	4619      	mov	r1, r3
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f001 fab9 	bl	80087e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007270:	e01d      	b.n	80072ae <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007272:	6839      	ldr	r1, [r7, #0]
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f001 fa43 	bl	8008700 <USBD_CtlError>
            ret = USBD_FAIL;
 800727a:	2303      	movs	r3, #3
 800727c:	75fb      	strb	r3, [r7, #23]
          break;
 800727e:	e016      	b.n	80072ae <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007286:	b2db      	uxtb	r3, r3
 8007288:	2b03      	cmp	r3, #3
 800728a:	d00f      	beq.n	80072ac <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800728c:	6839      	ldr	r1, [r7, #0]
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f001 fa36 	bl	8008700 <USBD_CtlError>
            ret = USBD_FAIL;
 8007294:	2303      	movs	r3, #3
 8007296:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007298:	e008      	b.n	80072ac <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800729a:	6839      	ldr	r1, [r7, #0]
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f001 fa2f 	bl	8008700 <USBD_CtlError>
          ret = USBD_FAIL;
 80072a2:	2303      	movs	r3, #3
 80072a4:	75fb      	strb	r3, [r7, #23]
          break;
 80072a6:	e002      	b.n	80072ae <USBD_CDC_Setup+0x176>
          break;
 80072a8:	bf00      	nop
 80072aa:	e008      	b.n	80072be <USBD_CDC_Setup+0x186>
          break;
 80072ac:	bf00      	nop
      }
      break;
 80072ae:	e006      	b.n	80072be <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f001 fa24 	bl	8008700 <USBD_CtlError>
      ret = USBD_FAIL;
 80072b8:	2303      	movs	r3, #3
 80072ba:	75fb      	strb	r3, [r7, #23]
      break;
 80072bc:	bf00      	nop
  }

  return (uint8_t)ret;
 80072be:	7dfb      	ldrb	r3, [r7, #23]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3718      	adds	r7, #24
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	460b      	mov	r3, r1
 80072d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80072da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d101      	bne.n	80072ea <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e04f      	b.n	800738a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80072f2:	78fa      	ldrb	r2, [r7, #3]
 80072f4:	6879      	ldr	r1, [r7, #4]
 80072f6:	4613      	mov	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4413      	add	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	440b      	add	r3, r1
 8007300:	3318      	adds	r3, #24
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d029      	beq.n	800735c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007308:	78fa      	ldrb	r2, [r7, #3]
 800730a:	6879      	ldr	r1, [r7, #4]
 800730c:	4613      	mov	r3, r2
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	4413      	add	r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	440b      	add	r3, r1
 8007316:	3318      	adds	r3, #24
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	78f9      	ldrb	r1, [r7, #3]
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	460b      	mov	r3, r1
 8007320:	00db      	lsls	r3, r3, #3
 8007322:	1a5b      	subs	r3, r3, r1
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4403      	add	r3, r0
 8007328:	3344      	adds	r3, #68	; 0x44
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007330:	fb03 f301 	mul.w	r3, r3, r1
 8007334:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007336:	2b00      	cmp	r3, #0
 8007338:	d110      	bne.n	800735c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800733a:	78fa      	ldrb	r2, [r7, #3]
 800733c:	6879      	ldr	r1, [r7, #4]
 800733e:	4613      	mov	r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	4413      	add	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	440b      	add	r3, r1
 8007348:	3318      	adds	r3, #24
 800734a:	2200      	movs	r2, #0
 800734c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800734e:	78f9      	ldrb	r1, [r7, #3]
 8007350:	2300      	movs	r3, #0
 8007352:	2200      	movs	r2, #0
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f001 ff3c 	bl	80091d2 <USBD_LL_Transmit>
 800735a:	e015      	b.n	8007388 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	2200      	movs	r2, #0
 8007360:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00b      	beq.n	8007388 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800737e:	68ba      	ldr	r2, [r7, #8]
 8007380:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007384:	78fa      	ldrb	r2, [r7, #3]
 8007386:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b084      	sub	sp, #16
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
 800739a:	460b      	mov	r3, r1
 800739c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d101      	bne.n	80073b4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e015      	b.n	80073e0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80073b4:	78fb      	ldrb	r3, [r7, #3]
 80073b6:	4619      	mov	r1, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f001 ff4c 	bl	8009256 <USBD_LL_GetRxDataSize>
 80073be:	4602      	mov	r2, r0
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80073da:	4611      	mov	r1, r2
 80073dc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073f6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d101      	bne.n	8007402 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80073fe:	2303      	movs	r3, #3
 8007400:	e01b      	b.n	800743a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d015      	beq.n	8007438 <USBD_CDC_EP0_RxReady+0x50>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007412:	2bff      	cmp	r3, #255	; 0xff
 8007414:	d010      	beq.n	8007438 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007424:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800742c:	b292      	uxth	r2, r2
 800742e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	22ff      	movs	r2, #255	; 0xff
 8007434:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
	...

08007444 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2243      	movs	r2, #67	; 0x43
 8007450:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007452:	4b03      	ldr	r3, [pc, #12]	; (8007460 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007454:	4618      	mov	r0, r3
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr
 8007460:	200000d0 	.word	0x200000d0

08007464 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2243      	movs	r2, #67	; 0x43
 8007470:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007472:	4b03      	ldr	r3, [pc, #12]	; (8007480 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007474:	4618      	mov	r0, r3
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr
 8007480:	2000008c 	.word	0x2000008c

08007484 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2243      	movs	r2, #67	; 0x43
 8007490:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007492:	4b03      	ldr	r3, [pc, #12]	; (80074a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007494:	4618      	mov	r0, r3
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr
 80074a0:	20000114 	.word	0x20000114

080074a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	220a      	movs	r2, #10
 80074b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80074b2:	4b03      	ldr	r3, [pc, #12]	; (80074c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr
 80074c0:	20000048 	.word	0x20000048

080074c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d101      	bne.n	80074d8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e004      	b.n	80074e2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	683a      	ldr	r2, [r7, #0]
 80074dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	370c      	adds	r7, #12
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80074ee:	b480      	push	{r7}
 80074f0:	b087      	sub	sp, #28
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	60f8      	str	r0, [r7, #12]
 80074f6:	60b9      	str	r1, [r7, #8]
 80074f8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007500:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d101      	bne.n	800750c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007508:	2303      	movs	r3, #3
 800750a:	e008      	b.n	800751e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	68ba      	ldr	r2, [r7, #8]
 8007510:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	371c      	adds	r7, #28
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800752a:	b480      	push	{r7}
 800752c:	b085      	sub	sp, #20
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
 8007532:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800753a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d101      	bne.n	8007546 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007542:	2303      	movs	r3, #3
 8007544:	e004      	b.n	8007550 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	683a      	ldr	r2, [r7, #0]
 800754a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3714      	adds	r7, #20
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800756a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800756c:	2301      	movs	r3, #1
 800756e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007576:	2b00      	cmp	r3, #0
 8007578:	d101      	bne.n	800757e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800757a:	2303      	movs	r3, #3
 800757c:	e01a      	b.n	80075b4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007584:	2b00      	cmp	r3, #0
 8007586:	d114      	bne.n	80075b2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	2201      	movs	r2, #1
 800758c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80075a6:	2181      	movs	r1, #129	; 0x81
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f001 fe12 	bl	80091d2 <USBD_LL_Transmit>

    ret = USBD_OK;
 80075ae:	2300      	movs	r3, #0
 80075b0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80075b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d101      	bne.n	80075da <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e016      	b.n	8007608 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	7c1b      	ldrb	r3, [r3, #16]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d109      	bne.n	80075f6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075ec:	2101      	movs	r1, #1
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f001 fe10 	bl	8009214 <USBD_LL_PrepareReceive>
 80075f4:	e007      	b.n	8007606 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075fc:	2340      	movs	r3, #64	; 0x40
 80075fe:	2101      	movs	r1, #1
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f001 fe07 	bl	8009214 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	4613      	mov	r3, r2
 800761c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d101      	bne.n	8007628 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007624:	2303      	movs	r3, #3
 8007626:	e01f      	b.n	8007668 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2200      	movs	r2, #0
 800763c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d003      	beq.n	800764e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	79fa      	ldrb	r2, [r7, #7]
 800765a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f001 fc83 	bl	8008f68 <USBD_LL_Init>
 8007662:	4603      	mov	r3, r0
 8007664:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007666:	7dfb      	ldrb	r3, [r7, #23]
}
 8007668:	4618      	mov	r0, r3
 800766a:	3718      	adds	r7, #24
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800767a:	2300      	movs	r3, #0
 800767c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d101      	bne.n	8007688 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007684:	2303      	movs	r3, #3
 8007686:	e016      	b.n	80076b6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	683a      	ldr	r2, [r7, #0]
 800768c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00b      	beq.n	80076b4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a4:	f107 020e 	add.w	r2, r7, #14
 80076a8:	4610      	mov	r0, r2
 80076aa:	4798      	blx	r3
 80076ac:	4602      	mov	r2, r0
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b082      	sub	sp, #8
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f001 fc9a 	bl	8009000 <USBD_LL_Start>
 80076cc:	4603      	mov	r3, r0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3708      	adds	r7, #8
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80076d6:	b480      	push	{r7}
 80076d8:	b083      	sub	sp, #12
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	460b      	mov	r3, r1
 80076f6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80076f8:	2303      	movs	r3, #3
 80076fa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007702:	2b00      	cmp	r3, #0
 8007704:	d009      	beq.n	800771a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	78fa      	ldrb	r2, [r7, #3]
 8007710:	4611      	mov	r1, r2
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	4798      	blx	r3
 8007716:	4603      	mov	r3, r0
 8007718:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800771a:	7bfb      	ldrb	r3, [r7, #15]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	460b      	mov	r3, r1
 800772e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007736:	2b00      	cmp	r3, #0
 8007738:	d007      	beq.n	800774a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	78fa      	ldrb	r2, [r7, #3]
 8007744:	4611      	mov	r1, r2
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	4798      	blx	r3
  }

  return USBD_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007764:	6839      	ldr	r1, [r7, #0]
 8007766:	4618      	mov	r0, r3
 8007768:	f000 ff90 	bl	800868c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800777a:	461a      	mov	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007788:	f003 031f 	and.w	r3, r3, #31
 800778c:	2b02      	cmp	r3, #2
 800778e:	d01a      	beq.n	80077c6 <USBD_LL_SetupStage+0x72>
 8007790:	2b02      	cmp	r3, #2
 8007792:	d822      	bhi.n	80077da <USBD_LL_SetupStage+0x86>
 8007794:	2b00      	cmp	r3, #0
 8007796:	d002      	beq.n	800779e <USBD_LL_SetupStage+0x4a>
 8007798:	2b01      	cmp	r3, #1
 800779a:	d00a      	beq.n	80077b2 <USBD_LL_SetupStage+0x5e>
 800779c:	e01d      	b.n	80077da <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80077a4:	4619      	mov	r1, r3
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fa62 	bl	8007c70 <USBD_StdDevReq>
 80077ac:	4603      	mov	r3, r0
 80077ae:	73fb      	strb	r3, [r7, #15]
      break;
 80077b0:	e020      	b.n	80077f4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80077b8:	4619      	mov	r1, r3
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 fac6 	bl	8007d4c <USBD_StdItfReq>
 80077c0:	4603      	mov	r3, r0
 80077c2:	73fb      	strb	r3, [r7, #15]
      break;
 80077c4:	e016      	b.n	80077f4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80077cc:	4619      	mov	r1, r3
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fb05 	bl	8007dde <USBD_StdEPReq>
 80077d4:	4603      	mov	r3, r0
 80077d6:	73fb      	strb	r3, [r7, #15]
      break;
 80077d8:	e00c      	b.n	80077f4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80077e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	4619      	mov	r1, r3
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f001 fc69 	bl	80090c0 <USBD_LL_StallEP>
 80077ee:	4603      	mov	r3, r0
 80077f0:	73fb      	strb	r3, [r7, #15]
      break;
 80077f2:	bf00      	nop
  }

  return ret;
 80077f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b086      	sub	sp, #24
 8007802:	af00      	add	r7, sp, #0
 8007804:	60f8      	str	r0, [r7, #12]
 8007806:	460b      	mov	r3, r1
 8007808:	607a      	str	r2, [r7, #4]
 800780a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800780c:	7afb      	ldrb	r3, [r7, #11]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d138      	bne.n	8007884 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007818:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007820:	2b03      	cmp	r3, #3
 8007822:	d14a      	bne.n	80078ba <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	689a      	ldr	r2, [r3, #8]
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	429a      	cmp	r2, r3
 800782e:	d913      	bls.n	8007858 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	689a      	ldr	r2, [r3, #8]
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	1ad2      	subs	r2, r2, r3
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	68da      	ldr	r2, [r3, #12]
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	4293      	cmp	r3, r2
 8007848:	bf28      	it	cs
 800784a:	4613      	movcs	r3, r2
 800784c:	461a      	mov	r2, r3
 800784e:	6879      	ldr	r1, [r7, #4]
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f001 f80f 	bl	8008874 <USBD_CtlContinueRx>
 8007856:	e030      	b.n	80078ba <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800785e:	b2db      	uxtb	r3, r3
 8007860:	2b03      	cmp	r3, #3
 8007862:	d10b      	bne.n	800787c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d005      	beq.n	800787c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	f001 f80a 	bl	8008896 <USBD_CtlSendStatus>
 8007882:	e01a      	b.n	80078ba <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800788a:	b2db      	uxtb	r3, r3
 800788c:	2b03      	cmp	r3, #3
 800788e:	d114      	bne.n	80078ba <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00e      	beq.n	80078ba <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	7afa      	ldrb	r2, [r7, #11]
 80078a6:	4611      	mov	r1, r2
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	4798      	blx	r3
 80078ac:	4603      	mov	r3, r0
 80078ae:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80078b0:	7dfb      	ldrb	r3, [r7, #23]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d001      	beq.n	80078ba <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80078b6:	7dfb      	ldrb	r3, [r7, #23]
 80078b8:	e000      	b.n	80078bc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3718      	adds	r7, #24
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	460b      	mov	r3, r1
 80078ce:	607a      	str	r2, [r7, #4]
 80078d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80078d2:	7afb      	ldrb	r3, [r7, #11]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d16b      	bne.n	80079b0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	3314      	adds	r3, #20
 80078dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d156      	bne.n	8007996 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	689a      	ldr	r2, [r3, #8]
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d914      	bls.n	800791e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	689a      	ldr	r2, [r3, #8]
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	1ad2      	subs	r2, r2, r3
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	461a      	mov	r2, r3
 8007908:	6879      	ldr	r1, [r7, #4]
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f000 ff84 	bl	8008818 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007910:	2300      	movs	r3, #0
 8007912:	2200      	movs	r2, #0
 8007914:	2100      	movs	r1, #0
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f001 fc7c 	bl	8009214 <USBD_LL_PrepareReceive>
 800791c:	e03b      	b.n	8007996 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	68da      	ldr	r2, [r3, #12]
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	429a      	cmp	r2, r3
 8007928:	d11c      	bne.n	8007964 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	685a      	ldr	r2, [r3, #4]
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007932:	429a      	cmp	r2, r3
 8007934:	d316      	bcc.n	8007964 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	685a      	ldr	r2, [r3, #4]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007940:	429a      	cmp	r2, r3
 8007942:	d20f      	bcs.n	8007964 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007944:	2200      	movs	r2, #0
 8007946:	2100      	movs	r1, #0
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f000 ff65 	bl	8008818 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007956:	2300      	movs	r3, #0
 8007958:	2200      	movs	r2, #0
 800795a:	2100      	movs	r1, #0
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f001 fc59 	bl	8009214 <USBD_LL_PrepareReceive>
 8007962:	e018      	b.n	8007996 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800796a:	b2db      	uxtb	r3, r3
 800796c:	2b03      	cmp	r3, #3
 800796e:	d10b      	bne.n	8007988 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d005      	beq.n	8007988 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007988:	2180      	movs	r1, #128	; 0x80
 800798a:	68f8      	ldr	r0, [r7, #12]
 800798c:	f001 fb98 	bl	80090c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f000 ff93 	bl	80088bc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800799c:	2b01      	cmp	r3, #1
 800799e:	d122      	bne.n	80079e6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f7ff fe98 	bl	80076d6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80079ae:	e01a      	b.n	80079e6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	2b03      	cmp	r3, #3
 80079ba:	d114      	bne.n	80079e6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079c2:	695b      	ldr	r3, [r3, #20]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00e      	beq.n	80079e6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ce:	695b      	ldr	r3, [r3, #20]
 80079d0:	7afa      	ldrb	r2, [r7, #11]
 80079d2:	4611      	mov	r1, r2
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	4798      	blx	r3
 80079d8:	4603      	mov	r3, r0
 80079da:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80079dc:	7dfb      	ldrb	r3, [r7, #23]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d001      	beq.n	80079e6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80079e2:	7dfb      	ldrb	r3, [r7, #23]
 80079e4:	e000      	b.n	80079e8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3718      	adds	r7, #24
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d101      	bne.n	8007a24 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007a20:	2303      	movs	r3, #3
 8007a22:	e02f      	b.n	8007a84 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00f      	beq.n	8007a4e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d009      	beq.n	8007a4e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	6852      	ldr	r2, [r2, #4]
 8007a46:	b2d2      	uxtb	r2, r2
 8007a48:	4611      	mov	r1, r2
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a4e:	2340      	movs	r3, #64	; 0x40
 8007a50:	2200      	movs	r2, #0
 8007a52:	2100      	movs	r1, #0
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f001 faee 	bl	8009036 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2240      	movs	r2, #64	; 0x40
 8007a66:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a6a:	2340      	movs	r3, #64	; 0x40
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	2180      	movs	r1, #128	; 0x80
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f001 fae0 	bl	8009036 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2240      	movs	r2, #64	; 0x40
 8007a80:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	460b      	mov	r3, r1
 8007a96:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	78fa      	ldrb	r2, [r7, #3]
 8007a9c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aba:	b2da      	uxtb	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2204      	movs	r2, #4
 8007ac6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	2b04      	cmp	r3, #4
 8007aea:	d106      	bne.n	8007afa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007af2:	b2da      	uxtb	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d101      	bne.n	8007b1e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	e012      	b.n	8007b44 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d10b      	bne.n	8007b42 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b30:	69db      	ldr	r3, [r3, #28]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d005      	beq.n	8007b42 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b3c:	69db      	ldr	r3, [r3, #28]
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	460b      	mov	r3, r1
 8007b56:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d101      	bne.n	8007b66 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007b62:	2303      	movs	r3, #3
 8007b64:	e014      	b.n	8007b90 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b03      	cmp	r3, #3
 8007b70:	d10d      	bne.n	8007b8e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d007      	beq.n	8007b8e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	78fa      	ldrb	r2, [r7, #3]
 8007b88:	4611      	mov	r1, r2
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3708      	adds	r7, #8
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d101      	bne.n	8007bb2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e014      	b.n	8007bdc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	2b03      	cmp	r3, #3
 8007bbc:	d10d      	bne.n	8007bda <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d007      	beq.n	8007bda <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd2:	78fa      	ldrb	r2, [r7, #3]
 8007bd4:	4611      	mov	r1, r2
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	370c      	adds	r7, #12
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b082      	sub	sp, #8
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d009      	beq.n	8007c28 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	6852      	ldr	r2, [r2, #4]
 8007c20:	b2d2      	uxtb	r2, r2
 8007c22:	4611      	mov	r1, r2
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	4798      	blx	r3
  }

  return USBD_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007c32:	b480      	push	{r7}
 8007c34:	b087      	sub	sp, #28
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	3301      	adds	r3, #1
 8007c48:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007c50:	8a3b      	ldrh	r3, [r7, #16]
 8007c52:	021b      	lsls	r3, r3, #8
 8007c54:	b21a      	sxth	r2, r3
 8007c56:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	b21b      	sxth	r3, r3
 8007c5e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007c60:	89fb      	ldrh	r3, [r7, #14]
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	371c      	adds	r7, #28
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr
	...

08007c70 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c86:	2b40      	cmp	r3, #64	; 0x40
 8007c88:	d005      	beq.n	8007c96 <USBD_StdDevReq+0x26>
 8007c8a:	2b40      	cmp	r3, #64	; 0x40
 8007c8c:	d853      	bhi.n	8007d36 <USBD_StdDevReq+0xc6>
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00b      	beq.n	8007caa <USBD_StdDevReq+0x3a>
 8007c92:	2b20      	cmp	r3, #32
 8007c94:	d14f      	bne.n	8007d36 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	6839      	ldr	r1, [r7, #0]
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	4798      	blx	r3
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ca8:	e04a      	b.n	8007d40 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	785b      	ldrb	r3, [r3, #1]
 8007cae:	2b09      	cmp	r3, #9
 8007cb0:	d83b      	bhi.n	8007d2a <USBD_StdDevReq+0xba>
 8007cb2:	a201      	add	r2, pc, #4	; (adr r2, 8007cb8 <USBD_StdDevReq+0x48>)
 8007cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb8:	08007d0d 	.word	0x08007d0d
 8007cbc:	08007d21 	.word	0x08007d21
 8007cc0:	08007d2b 	.word	0x08007d2b
 8007cc4:	08007d17 	.word	0x08007d17
 8007cc8:	08007d2b 	.word	0x08007d2b
 8007ccc:	08007ceb 	.word	0x08007ceb
 8007cd0:	08007ce1 	.word	0x08007ce1
 8007cd4:	08007d2b 	.word	0x08007d2b
 8007cd8:	08007d03 	.word	0x08007d03
 8007cdc:	08007cf5 	.word	0x08007cf5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f9de 	bl	80080a4 <USBD_GetDescriptor>
          break;
 8007ce8:	e024      	b.n	8007d34 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007cea:	6839      	ldr	r1, [r7, #0]
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fb43 	bl	8008378 <USBD_SetAddress>
          break;
 8007cf2:	e01f      	b.n	8007d34 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007cf4:	6839      	ldr	r1, [r7, #0]
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fb82 	bl	8008400 <USBD_SetConfig>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	73fb      	strb	r3, [r7, #15]
          break;
 8007d00:	e018      	b.n	8007d34 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007d02:	6839      	ldr	r1, [r7, #0]
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fc21 	bl	800854c <USBD_GetConfig>
          break;
 8007d0a:	e013      	b.n	8007d34 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fc52 	bl	80085b8 <USBD_GetStatus>
          break;
 8007d14:	e00e      	b.n	8007d34 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007d16:	6839      	ldr	r1, [r7, #0]
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 fc81 	bl	8008620 <USBD_SetFeature>
          break;
 8007d1e:	e009      	b.n	8007d34 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fc90 	bl	8008648 <USBD_ClrFeature>
          break;
 8007d28:	e004      	b.n	8007d34 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007d2a:	6839      	ldr	r1, [r7, #0]
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fce7 	bl	8008700 <USBD_CtlError>
          break;
 8007d32:	bf00      	nop
      }
      break;
 8007d34:	e004      	b.n	8007d40 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007d36:	6839      	ldr	r1, [r7, #0]
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fce1 	bl	8008700 <USBD_CtlError>
      break;
 8007d3e:	bf00      	nop
  }

  return ret;
 8007d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop

08007d4c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d62:	2b40      	cmp	r3, #64	; 0x40
 8007d64:	d005      	beq.n	8007d72 <USBD_StdItfReq+0x26>
 8007d66:	2b40      	cmp	r3, #64	; 0x40
 8007d68:	d82f      	bhi.n	8007dca <USBD_StdItfReq+0x7e>
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d001      	beq.n	8007d72 <USBD_StdItfReq+0x26>
 8007d6e:	2b20      	cmp	r3, #32
 8007d70:	d12b      	bne.n	8007dca <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d81d      	bhi.n	8007dbc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	889b      	ldrh	r3, [r3, #4]
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d813      	bhi.n	8007db2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	4798      	blx	r3
 8007d98:	4603      	mov	r3, r0
 8007d9a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	88db      	ldrh	r3, [r3, #6]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d110      	bne.n	8007dc6 <USBD_StdItfReq+0x7a>
 8007da4:	7bfb      	ldrb	r3, [r7, #15]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d10d      	bne.n	8007dc6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fd73 	bl	8008896 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007db0:	e009      	b.n	8007dc6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007db2:	6839      	ldr	r1, [r7, #0]
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 fca3 	bl	8008700 <USBD_CtlError>
          break;
 8007dba:	e004      	b.n	8007dc6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007dbc:	6839      	ldr	r1, [r7, #0]
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fc9e 	bl	8008700 <USBD_CtlError>
          break;
 8007dc4:	e000      	b.n	8007dc8 <USBD_StdItfReq+0x7c>
          break;
 8007dc6:	bf00      	nop
      }
      break;
 8007dc8:	e004      	b.n	8007dd4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007dca:	6839      	ldr	r1, [r7, #0]
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 fc97 	bl	8008700 <USBD_CtlError>
      break;
 8007dd2:	bf00      	nop
  }

  return ret;
 8007dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b084      	sub	sp, #16
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
 8007de6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007de8:	2300      	movs	r3, #0
 8007dea:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	889b      	ldrh	r3, [r3, #4]
 8007df0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dfa:	2b40      	cmp	r3, #64	; 0x40
 8007dfc:	d007      	beq.n	8007e0e <USBD_StdEPReq+0x30>
 8007dfe:	2b40      	cmp	r3, #64	; 0x40
 8007e00:	f200 8145 	bhi.w	800808e <USBD_StdEPReq+0x2b0>
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00c      	beq.n	8007e22 <USBD_StdEPReq+0x44>
 8007e08:	2b20      	cmp	r3, #32
 8007e0a:	f040 8140 	bne.w	800808e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	6839      	ldr	r1, [r7, #0]
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	4798      	blx	r3
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e20:	e13a      	b.n	8008098 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	785b      	ldrb	r3, [r3, #1]
 8007e26:	2b03      	cmp	r3, #3
 8007e28:	d007      	beq.n	8007e3a <USBD_StdEPReq+0x5c>
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	f300 8129 	bgt.w	8008082 <USBD_StdEPReq+0x2a4>
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d07f      	beq.n	8007f34 <USBD_StdEPReq+0x156>
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d03c      	beq.n	8007eb2 <USBD_StdEPReq+0xd4>
 8007e38:	e123      	b.n	8008082 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d002      	beq.n	8007e4c <USBD_StdEPReq+0x6e>
 8007e46:	2b03      	cmp	r3, #3
 8007e48:	d016      	beq.n	8007e78 <USBD_StdEPReq+0x9a>
 8007e4a:	e02c      	b.n	8007ea6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e4c:	7bbb      	ldrb	r3, [r7, #14]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00d      	beq.n	8007e6e <USBD_StdEPReq+0x90>
 8007e52:	7bbb      	ldrb	r3, [r7, #14]
 8007e54:	2b80      	cmp	r3, #128	; 0x80
 8007e56:	d00a      	beq.n	8007e6e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e58:	7bbb      	ldrb	r3, [r7, #14]
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f001 f92f 	bl	80090c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e62:	2180      	movs	r1, #128	; 0x80
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f001 f92b 	bl	80090c0 <USBD_LL_StallEP>
 8007e6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e6c:	e020      	b.n	8007eb0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007e6e:	6839      	ldr	r1, [r7, #0]
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fc45 	bl	8008700 <USBD_CtlError>
              break;
 8007e76:	e01b      	b.n	8007eb0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	885b      	ldrh	r3, [r3, #2]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d10e      	bne.n	8007e9e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e80:	7bbb      	ldrb	r3, [r7, #14]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00b      	beq.n	8007e9e <USBD_StdEPReq+0xc0>
 8007e86:	7bbb      	ldrb	r3, [r7, #14]
 8007e88:	2b80      	cmp	r3, #128	; 0x80
 8007e8a:	d008      	beq.n	8007e9e <USBD_StdEPReq+0xc0>
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	88db      	ldrh	r3, [r3, #6]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d104      	bne.n	8007e9e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e94:	7bbb      	ldrb	r3, [r7, #14]
 8007e96:	4619      	mov	r1, r3
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f001 f911 	bl	80090c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fcf9 	bl	8008896 <USBD_CtlSendStatus>

              break;
 8007ea4:	e004      	b.n	8007eb0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007ea6:	6839      	ldr	r1, [r7, #0]
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fc29 	bl	8008700 <USBD_CtlError>
              break;
 8007eae:	bf00      	nop
          }
          break;
 8007eb0:	e0ec      	b.n	800808c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d002      	beq.n	8007ec4 <USBD_StdEPReq+0xe6>
 8007ebe:	2b03      	cmp	r3, #3
 8007ec0:	d016      	beq.n	8007ef0 <USBD_StdEPReq+0x112>
 8007ec2:	e030      	b.n	8007f26 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ec4:	7bbb      	ldrb	r3, [r7, #14]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00d      	beq.n	8007ee6 <USBD_StdEPReq+0x108>
 8007eca:	7bbb      	ldrb	r3, [r7, #14]
 8007ecc:	2b80      	cmp	r3, #128	; 0x80
 8007ece:	d00a      	beq.n	8007ee6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ed0:	7bbb      	ldrb	r3, [r7, #14]
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f001 f8f3 	bl	80090c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007eda:	2180      	movs	r1, #128	; 0x80
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f001 f8ef 	bl	80090c0 <USBD_LL_StallEP>
 8007ee2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ee4:	e025      	b.n	8007f32 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007ee6:	6839      	ldr	r1, [r7, #0]
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fc09 	bl	8008700 <USBD_CtlError>
              break;
 8007eee:	e020      	b.n	8007f32 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	885b      	ldrh	r3, [r3, #2]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d11b      	bne.n	8007f30 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ef8:	7bbb      	ldrb	r3, [r7, #14]
 8007efa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d004      	beq.n	8007f0c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007f02:	7bbb      	ldrb	r3, [r7, #14]
 8007f04:	4619      	mov	r1, r3
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f001 f8f9 	bl	80090fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 fcc2 	bl	8008896 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	6839      	ldr	r1, [r7, #0]
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	4798      	blx	r3
 8007f20:	4603      	mov	r3, r0
 8007f22:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007f24:	e004      	b.n	8007f30 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007f26:	6839      	ldr	r1, [r7, #0]
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fbe9 	bl	8008700 <USBD_CtlError>
              break;
 8007f2e:	e000      	b.n	8007f32 <USBD_StdEPReq+0x154>
              break;
 8007f30:	bf00      	nop
          }
          break;
 8007f32:	e0ab      	b.n	800808c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d002      	beq.n	8007f46 <USBD_StdEPReq+0x168>
 8007f40:	2b03      	cmp	r3, #3
 8007f42:	d032      	beq.n	8007faa <USBD_StdEPReq+0x1cc>
 8007f44:	e097      	b.n	8008076 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f46:	7bbb      	ldrb	r3, [r7, #14]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d007      	beq.n	8007f5c <USBD_StdEPReq+0x17e>
 8007f4c:	7bbb      	ldrb	r3, [r7, #14]
 8007f4e:	2b80      	cmp	r3, #128	; 0x80
 8007f50:	d004      	beq.n	8007f5c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007f52:	6839      	ldr	r1, [r7, #0]
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 fbd3 	bl	8008700 <USBD_CtlError>
                break;
 8007f5a:	e091      	b.n	8008080 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	da0b      	bge.n	8007f7c <USBD_StdEPReq+0x19e>
 8007f64:	7bbb      	ldrb	r3, [r7, #14]
 8007f66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4413      	add	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	3310      	adds	r3, #16
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	4413      	add	r3, r2
 8007f78:	3304      	adds	r3, #4
 8007f7a:	e00b      	b.n	8007f94 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f7c:	7bbb      	ldrb	r3, [r7, #14]
 8007f7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f82:	4613      	mov	r3, r2
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	4413      	add	r3, r2
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	4413      	add	r3, r2
 8007f92:	3304      	adds	r3, #4
 8007f94:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	2202      	movs	r2, #2
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 fc1d 	bl	80087e2 <USBD_CtlSendData>
              break;
 8007fa8:	e06a      	b.n	8008080 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007faa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	da11      	bge.n	8007fd6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007fb2:	7bbb      	ldrb	r3, [r7, #14]
 8007fb4:	f003 020f 	and.w	r2, r3, #15
 8007fb8:	6879      	ldr	r1, [r7, #4]
 8007fba:	4613      	mov	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4413      	add	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	440b      	add	r3, r1
 8007fc4:	3324      	adds	r3, #36	; 0x24
 8007fc6:	881b      	ldrh	r3, [r3, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d117      	bne.n	8007ffc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007fcc:	6839      	ldr	r1, [r7, #0]
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fb96 	bl	8008700 <USBD_CtlError>
                  break;
 8007fd4:	e054      	b.n	8008080 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007fd6:	7bbb      	ldrb	r3, [r7, #14]
 8007fd8:	f003 020f 	and.w	r2, r3, #15
 8007fdc:	6879      	ldr	r1, [r7, #4]
 8007fde:	4613      	mov	r3, r2
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4413      	add	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	440b      	add	r3, r1
 8007fe8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007fec:	881b      	ldrh	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d104      	bne.n	8007ffc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007ff2:	6839      	ldr	r1, [r7, #0]
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fb83 	bl	8008700 <USBD_CtlError>
                  break;
 8007ffa:	e041      	b.n	8008080 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ffc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008000:	2b00      	cmp	r3, #0
 8008002:	da0b      	bge.n	800801c <USBD_StdEPReq+0x23e>
 8008004:	7bbb      	ldrb	r3, [r7, #14]
 8008006:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800800a:	4613      	mov	r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	4413      	add	r3, r2
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	3310      	adds	r3, #16
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	4413      	add	r3, r2
 8008018:	3304      	adds	r3, #4
 800801a:	e00b      	b.n	8008034 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800801c:	7bbb      	ldrb	r3, [r7, #14]
 800801e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008022:	4613      	mov	r3, r2
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	4413      	add	r3, r2
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	4413      	add	r3, r2
 8008032:	3304      	adds	r3, #4
 8008034:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008036:	7bbb      	ldrb	r3, [r7, #14]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d002      	beq.n	8008042 <USBD_StdEPReq+0x264>
 800803c:	7bbb      	ldrb	r3, [r7, #14]
 800803e:	2b80      	cmp	r3, #128	; 0x80
 8008040:	d103      	bne.n	800804a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	2200      	movs	r2, #0
 8008046:	601a      	str	r2, [r3, #0]
 8008048:	e00e      	b.n	8008068 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800804a:	7bbb      	ldrb	r3, [r7, #14]
 800804c:	4619      	mov	r1, r3
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f001 f874 	bl	800913c <USBD_LL_IsStallEP>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d003      	beq.n	8008062 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	2201      	movs	r2, #1
 800805e:	601a      	str	r2, [r3, #0]
 8008060:	e002      	b.n	8008068 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	2200      	movs	r2, #0
 8008066:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	2202      	movs	r2, #2
 800806c:	4619      	mov	r1, r3
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 fbb7 	bl	80087e2 <USBD_CtlSendData>
              break;
 8008074:	e004      	b.n	8008080 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008076:	6839      	ldr	r1, [r7, #0]
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 fb41 	bl	8008700 <USBD_CtlError>
              break;
 800807e:	bf00      	nop
          }
          break;
 8008080:	e004      	b.n	800808c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008082:	6839      	ldr	r1, [r7, #0]
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fb3b 	bl	8008700 <USBD_CtlError>
          break;
 800808a:	bf00      	nop
      }
      break;
 800808c:	e004      	b.n	8008098 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800808e:	6839      	ldr	r1, [r7, #0]
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fb35 	bl	8008700 <USBD_CtlError>
      break;
 8008096:	bf00      	nop
  }

  return ret;
 8008098:	7bfb      	ldrb	r3, [r7, #15]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
	...

080080a4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80080ae:	2300      	movs	r3, #0
 80080b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80080b2:	2300      	movs	r3, #0
 80080b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80080b6:	2300      	movs	r3, #0
 80080b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	885b      	ldrh	r3, [r3, #2]
 80080be:	0a1b      	lsrs	r3, r3, #8
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	3b01      	subs	r3, #1
 80080c4:	2b06      	cmp	r3, #6
 80080c6:	f200 8128 	bhi.w	800831a <USBD_GetDescriptor+0x276>
 80080ca:	a201      	add	r2, pc, #4	; (adr r2, 80080d0 <USBD_GetDescriptor+0x2c>)
 80080cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d0:	080080ed 	.word	0x080080ed
 80080d4:	08008105 	.word	0x08008105
 80080d8:	08008145 	.word	0x08008145
 80080dc:	0800831b 	.word	0x0800831b
 80080e0:	0800831b 	.word	0x0800831b
 80080e4:	080082bb 	.word	0x080082bb
 80080e8:	080082e7 	.word	0x080082e7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	7c12      	ldrb	r2, [r2, #16]
 80080f8:	f107 0108 	add.w	r1, r7, #8
 80080fc:	4610      	mov	r0, r2
 80080fe:	4798      	blx	r3
 8008100:	60f8      	str	r0, [r7, #12]
      break;
 8008102:	e112      	b.n	800832a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	7c1b      	ldrb	r3, [r3, #16]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d10d      	bne.n	8008128 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008114:	f107 0208 	add.w	r2, r7, #8
 8008118:	4610      	mov	r0, r2
 800811a:	4798      	blx	r3
 800811c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	3301      	adds	r3, #1
 8008122:	2202      	movs	r2, #2
 8008124:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008126:	e100      	b.n	800832a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800812e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008130:	f107 0208 	add.w	r2, r7, #8
 8008134:	4610      	mov	r0, r2
 8008136:	4798      	blx	r3
 8008138:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	3301      	adds	r3, #1
 800813e:	2202      	movs	r2, #2
 8008140:	701a      	strb	r2, [r3, #0]
      break;
 8008142:	e0f2      	b.n	800832a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	885b      	ldrh	r3, [r3, #2]
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b05      	cmp	r3, #5
 800814c:	f200 80ac 	bhi.w	80082a8 <USBD_GetDescriptor+0x204>
 8008150:	a201      	add	r2, pc, #4	; (adr r2, 8008158 <USBD_GetDescriptor+0xb4>)
 8008152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008156:	bf00      	nop
 8008158:	08008171 	.word	0x08008171
 800815c:	080081a5 	.word	0x080081a5
 8008160:	080081d9 	.word	0x080081d9
 8008164:	0800820d 	.word	0x0800820d
 8008168:	08008241 	.word	0x08008241
 800816c:	08008275 	.word	0x08008275
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00b      	beq.n	8008194 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	7c12      	ldrb	r2, [r2, #16]
 8008188:	f107 0108 	add.w	r1, r7, #8
 800818c:	4610      	mov	r0, r2
 800818e:	4798      	blx	r3
 8008190:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008192:	e091      	b.n	80082b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008194:	6839      	ldr	r1, [r7, #0]
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fab2 	bl	8008700 <USBD_CtlError>
            err++;
 800819c:	7afb      	ldrb	r3, [r7, #11]
 800819e:	3301      	adds	r3, #1
 80081a0:	72fb      	strb	r3, [r7, #11]
          break;
 80081a2:	e089      	b.n	80082b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00b      	beq.n	80081c8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	7c12      	ldrb	r2, [r2, #16]
 80081bc:	f107 0108 	add.w	r1, r7, #8
 80081c0:	4610      	mov	r0, r2
 80081c2:	4798      	blx	r3
 80081c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081c6:	e077      	b.n	80082b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081c8:	6839      	ldr	r1, [r7, #0]
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fa98 	bl	8008700 <USBD_CtlError>
            err++;
 80081d0:	7afb      	ldrb	r3, [r7, #11]
 80081d2:	3301      	adds	r3, #1
 80081d4:	72fb      	strb	r3, [r7, #11]
          break;
 80081d6:	e06f      	b.n	80082b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00b      	beq.n	80081fc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	7c12      	ldrb	r2, [r2, #16]
 80081f0:	f107 0108 	add.w	r1, r7, #8
 80081f4:	4610      	mov	r0, r2
 80081f6:	4798      	blx	r3
 80081f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081fa:	e05d      	b.n	80082b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081fc:	6839      	ldr	r1, [r7, #0]
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fa7e 	bl	8008700 <USBD_CtlError>
            err++;
 8008204:	7afb      	ldrb	r3, [r7, #11]
 8008206:	3301      	adds	r3, #1
 8008208:	72fb      	strb	r3, [r7, #11]
          break;
 800820a:	e055      	b.n	80082b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00b      	beq.n	8008230 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	7c12      	ldrb	r2, [r2, #16]
 8008224:	f107 0108 	add.w	r1, r7, #8
 8008228:	4610      	mov	r0, r2
 800822a:	4798      	blx	r3
 800822c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800822e:	e043      	b.n	80082b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008230:	6839      	ldr	r1, [r7, #0]
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 fa64 	bl	8008700 <USBD_CtlError>
            err++;
 8008238:	7afb      	ldrb	r3, [r7, #11]
 800823a:	3301      	adds	r3, #1
 800823c:	72fb      	strb	r3, [r7, #11]
          break;
 800823e:	e03b      	b.n	80082b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008246:	695b      	ldr	r3, [r3, #20]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00b      	beq.n	8008264 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008252:	695b      	ldr	r3, [r3, #20]
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	7c12      	ldrb	r2, [r2, #16]
 8008258:	f107 0108 	add.w	r1, r7, #8
 800825c:	4610      	mov	r0, r2
 800825e:	4798      	blx	r3
 8008260:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008262:	e029      	b.n	80082b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008264:	6839      	ldr	r1, [r7, #0]
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fa4a 	bl	8008700 <USBD_CtlError>
            err++;
 800826c:	7afb      	ldrb	r3, [r7, #11]
 800826e:	3301      	adds	r3, #1
 8008270:	72fb      	strb	r3, [r7, #11]
          break;
 8008272:	e021      	b.n	80082b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800827a:	699b      	ldr	r3, [r3, #24]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00b      	beq.n	8008298 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008286:	699b      	ldr	r3, [r3, #24]
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	7c12      	ldrb	r2, [r2, #16]
 800828c:	f107 0108 	add.w	r1, r7, #8
 8008290:	4610      	mov	r0, r2
 8008292:	4798      	blx	r3
 8008294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008296:	e00f      	b.n	80082b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008298:	6839      	ldr	r1, [r7, #0]
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 fa30 	bl	8008700 <USBD_CtlError>
            err++;
 80082a0:	7afb      	ldrb	r3, [r7, #11]
 80082a2:	3301      	adds	r3, #1
 80082a4:	72fb      	strb	r3, [r7, #11]
          break;
 80082a6:	e007      	b.n	80082b8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80082a8:	6839      	ldr	r1, [r7, #0]
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 fa28 	bl	8008700 <USBD_CtlError>
          err++;
 80082b0:	7afb      	ldrb	r3, [r7, #11]
 80082b2:	3301      	adds	r3, #1
 80082b4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80082b6:	bf00      	nop
      }
      break;
 80082b8:	e037      	b.n	800832a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	7c1b      	ldrb	r3, [r3, #16]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d109      	bne.n	80082d6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ca:	f107 0208 	add.w	r2, r7, #8
 80082ce:	4610      	mov	r0, r2
 80082d0:	4798      	blx	r3
 80082d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082d4:	e029      	b.n	800832a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082d6:	6839      	ldr	r1, [r7, #0]
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 fa11 	bl	8008700 <USBD_CtlError>
        err++;
 80082de:	7afb      	ldrb	r3, [r7, #11]
 80082e0:	3301      	adds	r3, #1
 80082e2:	72fb      	strb	r3, [r7, #11]
      break;
 80082e4:	e021      	b.n	800832a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	7c1b      	ldrb	r3, [r3, #16]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10d      	bne.n	800830a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f6:	f107 0208 	add.w	r2, r7, #8
 80082fa:	4610      	mov	r0, r2
 80082fc:	4798      	blx	r3
 80082fe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	3301      	adds	r3, #1
 8008304:	2207      	movs	r2, #7
 8008306:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008308:	e00f      	b.n	800832a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800830a:	6839      	ldr	r1, [r7, #0]
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 f9f7 	bl	8008700 <USBD_CtlError>
        err++;
 8008312:	7afb      	ldrb	r3, [r7, #11]
 8008314:	3301      	adds	r3, #1
 8008316:	72fb      	strb	r3, [r7, #11]
      break;
 8008318:	e007      	b.n	800832a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800831a:	6839      	ldr	r1, [r7, #0]
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 f9ef 	bl	8008700 <USBD_CtlError>
      err++;
 8008322:	7afb      	ldrb	r3, [r7, #11]
 8008324:	3301      	adds	r3, #1
 8008326:	72fb      	strb	r3, [r7, #11]
      break;
 8008328:	bf00      	nop
  }

  if (err != 0U)
 800832a:	7afb      	ldrb	r3, [r7, #11]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d11e      	bne.n	800836e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	88db      	ldrh	r3, [r3, #6]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d016      	beq.n	8008366 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008338:	893b      	ldrh	r3, [r7, #8]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00e      	beq.n	800835c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	88da      	ldrh	r2, [r3, #6]
 8008342:	893b      	ldrh	r3, [r7, #8]
 8008344:	4293      	cmp	r3, r2
 8008346:	bf28      	it	cs
 8008348:	4613      	movcs	r3, r2
 800834a:	b29b      	uxth	r3, r3
 800834c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800834e:	893b      	ldrh	r3, [r7, #8]
 8008350:	461a      	mov	r2, r3
 8008352:	68f9      	ldr	r1, [r7, #12]
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 fa44 	bl	80087e2 <USBD_CtlSendData>
 800835a:	e009      	b.n	8008370 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800835c:	6839      	ldr	r1, [r7, #0]
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f9ce 	bl	8008700 <USBD_CtlError>
 8008364:	e004      	b.n	8008370 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fa95 	bl	8008896 <USBD_CtlSendStatus>
 800836c:	e000      	b.n	8008370 <USBD_GetDescriptor+0x2cc>
    return;
 800836e:	bf00      	nop
  }
}
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop

08008378 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	889b      	ldrh	r3, [r3, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d131      	bne.n	80083ee <USBD_SetAddress+0x76>
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	88db      	ldrh	r3, [r3, #6]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d12d      	bne.n	80083ee <USBD_SetAddress+0x76>
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	885b      	ldrh	r3, [r3, #2]
 8008396:	2b7f      	cmp	r3, #127	; 0x7f
 8008398:	d829      	bhi.n	80083ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	885b      	ldrh	r3, [r3, #2]
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	2b03      	cmp	r3, #3
 80083b0:	d104      	bne.n	80083bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80083b2:	6839      	ldr	r1, [r7, #0]
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 f9a3 	bl	8008700 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083ba:	e01d      	b.n	80083f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	7bfa      	ldrb	r2, [r7, #15]
 80083c0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80083c4:	7bfb      	ldrb	r3, [r7, #15]
 80083c6:	4619      	mov	r1, r3
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 fee3 	bl	8009194 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fa61 	bl	8008896 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80083d4:	7bfb      	ldrb	r3, [r7, #15]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d004      	beq.n	80083e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2202      	movs	r2, #2
 80083de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083e2:	e009      	b.n	80083f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083ec:	e004      	b.n	80083f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80083ee:	6839      	ldr	r1, [r7, #0]
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f985 	bl	8008700 <USBD_CtlError>
  }
}
 80083f6:	bf00      	nop
 80083f8:	bf00      	nop
 80083fa:	3710      	adds	r7, #16
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800840a:	2300      	movs	r3, #0
 800840c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	885b      	ldrh	r3, [r3, #2]
 8008412:	b2da      	uxtb	r2, r3
 8008414:	4b4c      	ldr	r3, [pc, #304]	; (8008548 <USBD_SetConfig+0x148>)
 8008416:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008418:	4b4b      	ldr	r3, [pc, #300]	; (8008548 <USBD_SetConfig+0x148>)
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	2b01      	cmp	r3, #1
 800841e:	d905      	bls.n	800842c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008420:	6839      	ldr	r1, [r7, #0]
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f96c 	bl	8008700 <USBD_CtlError>
    return USBD_FAIL;
 8008428:	2303      	movs	r3, #3
 800842a:	e088      	b.n	800853e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008432:	b2db      	uxtb	r3, r3
 8008434:	2b02      	cmp	r3, #2
 8008436:	d002      	beq.n	800843e <USBD_SetConfig+0x3e>
 8008438:	2b03      	cmp	r3, #3
 800843a:	d025      	beq.n	8008488 <USBD_SetConfig+0x88>
 800843c:	e071      	b.n	8008522 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800843e:	4b42      	ldr	r3, [pc, #264]	; (8008548 <USBD_SetConfig+0x148>)
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d01c      	beq.n	8008480 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008446:	4b40      	ldr	r3, [pc, #256]	; (8008548 <USBD_SetConfig+0x148>)
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	461a      	mov	r2, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008450:	4b3d      	ldr	r3, [pc, #244]	; (8008548 <USBD_SetConfig+0x148>)
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	4619      	mov	r1, r3
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f7ff f948 	bl	80076ec <USBD_SetClassConfig>
 800845c:	4603      	mov	r3, r0
 800845e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008460:	7bfb      	ldrb	r3, [r7, #15]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d004      	beq.n	8008470 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008466:	6839      	ldr	r1, [r7, #0]
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 f949 	bl	8008700 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800846e:	e065      	b.n	800853c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 fa10 	bl	8008896 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2203      	movs	r2, #3
 800847a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800847e:	e05d      	b.n	800853c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 fa08 	bl	8008896 <USBD_CtlSendStatus>
      break;
 8008486:	e059      	b.n	800853c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008488:	4b2f      	ldr	r3, [pc, #188]	; (8008548 <USBD_SetConfig+0x148>)
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d112      	bne.n	80084b6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2202      	movs	r2, #2
 8008494:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008498:	4b2b      	ldr	r3, [pc, #172]	; (8008548 <USBD_SetConfig+0x148>)
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	461a      	mov	r2, r3
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80084a2:	4b29      	ldr	r3, [pc, #164]	; (8008548 <USBD_SetConfig+0x148>)
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	4619      	mov	r1, r3
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f7ff f93b 	bl	8007724 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f9f1 	bl	8008896 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80084b4:	e042      	b.n	800853c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80084b6:	4b24      	ldr	r3, [pc, #144]	; (8008548 <USBD_SetConfig+0x148>)
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	461a      	mov	r2, r3
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d02a      	beq.n	800851a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	4619      	mov	r1, r3
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f7ff f929 	bl	8007724 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80084d2:	4b1d      	ldr	r3, [pc, #116]	; (8008548 <USBD_SetConfig+0x148>)
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	461a      	mov	r2, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80084dc:	4b1a      	ldr	r3, [pc, #104]	; (8008548 <USBD_SetConfig+0x148>)
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	4619      	mov	r1, r3
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f7ff f902 	bl	80076ec <USBD_SetClassConfig>
 80084e8:	4603      	mov	r3, r0
 80084ea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80084ec:	7bfb      	ldrb	r3, [r7, #15]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00f      	beq.n	8008512 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80084f2:	6839      	ldr	r1, [r7, #0]
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 f903 	bl	8008700 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	4619      	mov	r1, r3
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f7ff f90e 	bl	8007724 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2202      	movs	r2, #2
 800850c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008510:	e014      	b.n	800853c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f9bf 	bl	8008896 <USBD_CtlSendStatus>
      break;
 8008518:	e010      	b.n	800853c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 f9bb 	bl	8008896 <USBD_CtlSendStatus>
      break;
 8008520:	e00c      	b.n	800853c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008522:	6839      	ldr	r1, [r7, #0]
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 f8eb 	bl	8008700 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800852a:	4b07      	ldr	r3, [pc, #28]	; (8008548 <USBD_SetConfig+0x148>)
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	4619      	mov	r1, r3
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f7ff f8f7 	bl	8007724 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008536:	2303      	movs	r3, #3
 8008538:	73fb      	strb	r3, [r7, #15]
      break;
 800853a:	bf00      	nop
  }

  return ret;
 800853c:	7bfb      	ldrb	r3, [r7, #15]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	20000268 	.word	0x20000268

0800854c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	88db      	ldrh	r3, [r3, #6]
 800855a:	2b01      	cmp	r3, #1
 800855c:	d004      	beq.n	8008568 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800855e:	6839      	ldr	r1, [r7, #0]
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 f8cd 	bl	8008700 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008566:	e023      	b.n	80085b0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800856e:	b2db      	uxtb	r3, r3
 8008570:	2b02      	cmp	r3, #2
 8008572:	dc02      	bgt.n	800857a <USBD_GetConfig+0x2e>
 8008574:	2b00      	cmp	r3, #0
 8008576:	dc03      	bgt.n	8008580 <USBD_GetConfig+0x34>
 8008578:	e015      	b.n	80085a6 <USBD_GetConfig+0x5a>
 800857a:	2b03      	cmp	r3, #3
 800857c:	d00b      	beq.n	8008596 <USBD_GetConfig+0x4a>
 800857e:	e012      	b.n	80085a6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	3308      	adds	r3, #8
 800858a:	2201      	movs	r2, #1
 800858c:	4619      	mov	r1, r3
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f927 	bl	80087e2 <USBD_CtlSendData>
        break;
 8008594:	e00c      	b.n	80085b0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	3304      	adds	r3, #4
 800859a:	2201      	movs	r2, #1
 800859c:	4619      	mov	r1, r3
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 f91f 	bl	80087e2 <USBD_CtlSendData>
        break;
 80085a4:	e004      	b.n	80085b0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80085a6:	6839      	ldr	r1, [r7, #0]
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 f8a9 	bl	8008700 <USBD_CtlError>
        break;
 80085ae:	bf00      	nop
}
 80085b0:	bf00      	nop
 80085b2:	3708      	adds	r7, #8
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	3b01      	subs	r3, #1
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d81e      	bhi.n	800860e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	88db      	ldrh	r3, [r3, #6]
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	d004      	beq.n	80085e2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80085d8:	6839      	ldr	r1, [r7, #0]
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f890 	bl	8008700 <USBD_CtlError>
        break;
 80085e0:	e01a      	b.n	8008618 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2201      	movs	r2, #1
 80085e6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d005      	beq.n	80085fe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	f043 0202 	orr.w	r2, r3, #2
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	330c      	adds	r3, #12
 8008602:	2202      	movs	r2, #2
 8008604:	4619      	mov	r1, r3
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 f8eb 	bl	80087e2 <USBD_CtlSendData>
      break;
 800860c:	e004      	b.n	8008618 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800860e:	6839      	ldr	r1, [r7, #0]
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 f875 	bl	8008700 <USBD_CtlError>
      break;
 8008616:	bf00      	nop
  }
}
 8008618:	bf00      	nop
 800861a:	3708      	adds	r7, #8
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	885b      	ldrh	r3, [r3, #2]
 800862e:	2b01      	cmp	r3, #1
 8008630:	d106      	bne.n	8008640 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2201      	movs	r2, #1
 8008636:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 f92b 	bl	8008896 <USBD_CtlSendStatus>
  }
}
 8008640:	bf00      	nop
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008658:	b2db      	uxtb	r3, r3
 800865a:	3b01      	subs	r3, #1
 800865c:	2b02      	cmp	r3, #2
 800865e:	d80b      	bhi.n	8008678 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	885b      	ldrh	r3, [r3, #2]
 8008664:	2b01      	cmp	r3, #1
 8008666:	d10c      	bne.n	8008682 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 f910 	bl	8008896 <USBD_CtlSendStatus>
      }
      break;
 8008676:	e004      	b.n	8008682 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008678:	6839      	ldr	r1, [r7, #0]
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 f840 	bl	8008700 <USBD_CtlError>
      break;
 8008680:	e000      	b.n	8008684 <USBD_ClrFeature+0x3c>
      break;
 8008682:	bf00      	nop
  }
}
 8008684:	bf00      	nop
 8008686:	3708      	adds	r7, #8
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	781a      	ldrb	r2, [r3, #0]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	3301      	adds	r3, #1
 80086a6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	781a      	ldrb	r2, [r3, #0]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	3301      	adds	r3, #1
 80086b4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f7ff fabb 	bl	8007c32 <SWAPBYTE>
 80086bc:	4603      	mov	r3, r0
 80086be:	461a      	mov	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	3301      	adds	r3, #1
 80086c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	3301      	adds	r3, #1
 80086ce:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f7ff faae 	bl	8007c32 <SWAPBYTE>
 80086d6:	4603      	mov	r3, r0
 80086d8:	461a      	mov	r2, r3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	3301      	adds	r3, #1
 80086e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	3301      	adds	r3, #1
 80086e8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80086ea:	68f8      	ldr	r0, [r7, #12]
 80086ec:	f7ff faa1 	bl	8007c32 <SWAPBYTE>
 80086f0:	4603      	mov	r3, r0
 80086f2:	461a      	mov	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	80da      	strh	r2, [r3, #6]
}
 80086f8:	bf00      	nop
 80086fa:	3710      	adds	r7, #16
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800870a:	2180      	movs	r1, #128	; 0x80
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fcd7 	bl	80090c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008712:	2100      	movs	r1, #0
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 fcd3 	bl	80090c0 <USBD_LL_StallEP>
}
 800871a:	bf00      	nop
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008722:	b580      	push	{r7, lr}
 8008724:	b086      	sub	sp, #24
 8008726:	af00      	add	r7, sp, #0
 8008728:	60f8      	str	r0, [r7, #12]
 800872a:	60b9      	str	r1, [r7, #8]
 800872c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800872e:	2300      	movs	r3, #0
 8008730:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d036      	beq.n	80087a6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800873c:	6938      	ldr	r0, [r7, #16]
 800873e:	f000 f836 	bl	80087ae <USBD_GetLen>
 8008742:	4603      	mov	r3, r0
 8008744:	3301      	adds	r3, #1
 8008746:	b29b      	uxth	r3, r3
 8008748:	005b      	lsls	r3, r3, #1
 800874a:	b29a      	uxth	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008750:	7dfb      	ldrb	r3, [r7, #23]
 8008752:	68ba      	ldr	r2, [r7, #8]
 8008754:	4413      	add	r3, r2
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	7812      	ldrb	r2, [r2, #0]
 800875a:	701a      	strb	r2, [r3, #0]
  idx++;
 800875c:	7dfb      	ldrb	r3, [r7, #23]
 800875e:	3301      	adds	r3, #1
 8008760:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008762:	7dfb      	ldrb	r3, [r7, #23]
 8008764:	68ba      	ldr	r2, [r7, #8]
 8008766:	4413      	add	r3, r2
 8008768:	2203      	movs	r2, #3
 800876a:	701a      	strb	r2, [r3, #0]
  idx++;
 800876c:	7dfb      	ldrb	r3, [r7, #23]
 800876e:	3301      	adds	r3, #1
 8008770:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008772:	e013      	b.n	800879c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008774:	7dfb      	ldrb	r3, [r7, #23]
 8008776:	68ba      	ldr	r2, [r7, #8]
 8008778:	4413      	add	r3, r2
 800877a:	693a      	ldr	r2, [r7, #16]
 800877c:	7812      	ldrb	r2, [r2, #0]
 800877e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	3301      	adds	r3, #1
 8008784:	613b      	str	r3, [r7, #16]
    idx++;
 8008786:	7dfb      	ldrb	r3, [r7, #23]
 8008788:	3301      	adds	r3, #1
 800878a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800878c:	7dfb      	ldrb	r3, [r7, #23]
 800878e:	68ba      	ldr	r2, [r7, #8]
 8008790:	4413      	add	r3, r2
 8008792:	2200      	movs	r2, #0
 8008794:	701a      	strb	r2, [r3, #0]
    idx++;
 8008796:	7dfb      	ldrb	r3, [r7, #23]
 8008798:	3301      	adds	r3, #1
 800879a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d1e7      	bne.n	8008774 <USBD_GetString+0x52>
 80087a4:	e000      	b.n	80087a8 <USBD_GetString+0x86>
    return;
 80087a6:	bf00      	nop
  }
}
 80087a8:	3718      	adds	r7, #24
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80087ae:	b480      	push	{r7}
 80087b0:	b085      	sub	sp, #20
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80087b6:	2300      	movs	r3, #0
 80087b8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80087be:	e005      	b.n	80087cc <USBD_GetLen+0x1e>
  {
    len++;
 80087c0:	7bfb      	ldrb	r3, [r7, #15]
 80087c2:	3301      	adds	r3, #1
 80087c4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	3301      	adds	r3, #1
 80087ca:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1f5      	bne.n	80087c0 <USBD_GetLen+0x12>
  }

  return len;
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3714      	adds	r7, #20
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b084      	sub	sp, #16
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	60f8      	str	r0, [r7, #12]
 80087ea:	60b9      	str	r1, [r7, #8]
 80087ec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2202      	movs	r2, #2
 80087f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	2100      	movs	r1, #0
 8008808:	68f8      	ldr	r0, [r7, #12]
 800880a:	f000 fce2 	bl	80091d2 <USBD_LL_Transmit>

  return USBD_OK;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	3710      	adds	r7, #16
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	68ba      	ldr	r2, [r7, #8]
 8008828:	2100      	movs	r1, #0
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f000 fcd1 	bl	80091d2 <USBD_LL_Transmit>

  return USBD_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b084      	sub	sp, #16
 800883e:	af00      	add	r7, sp, #0
 8008840:	60f8      	str	r0, [r7, #12]
 8008842:	60b9      	str	r1, [r7, #8]
 8008844:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2203      	movs	r2, #3
 800884a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	68ba      	ldr	r2, [r7, #8]
 8008862:	2100      	movs	r1, #0
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	f000 fcd5 	bl	8009214 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3710      	adds	r7, #16
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	68ba      	ldr	r2, [r7, #8]
 8008884:	2100      	movs	r1, #0
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f000 fcc4 	bl	8009214 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b082      	sub	sp, #8
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2204      	movs	r2, #4
 80088a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80088a6:	2300      	movs	r3, #0
 80088a8:	2200      	movs	r2, #0
 80088aa:	2100      	movs	r1, #0
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 fc90 	bl	80091d2 <USBD_LL_Transmit>

  return USBD_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3708      	adds	r7, #8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2205      	movs	r2, #5
 80088c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088cc:	2300      	movs	r3, #0
 80088ce:	2200      	movs	r2, #0
 80088d0:	2100      	movs	r1, #0
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 fc9e 	bl	8009214 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
	...

080088e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80088e8:	2200      	movs	r2, #0
 80088ea:	4912      	ldr	r1, [pc, #72]	; (8008934 <MX_USB_DEVICE_Init+0x50>)
 80088ec:	4812      	ldr	r0, [pc, #72]	; (8008938 <MX_USB_DEVICE_Init+0x54>)
 80088ee:	f7fe fe8f 	bl	8007610 <USBD_Init>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d001      	beq.n	80088fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80088f8:	f7f8 fbba 	bl	8001070 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80088fc:	490f      	ldr	r1, [pc, #60]	; (800893c <MX_USB_DEVICE_Init+0x58>)
 80088fe:	480e      	ldr	r0, [pc, #56]	; (8008938 <MX_USB_DEVICE_Init+0x54>)
 8008900:	f7fe feb6 	bl	8007670 <USBD_RegisterClass>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d001      	beq.n	800890e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800890a:	f7f8 fbb1 	bl	8001070 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800890e:	490c      	ldr	r1, [pc, #48]	; (8008940 <MX_USB_DEVICE_Init+0x5c>)
 8008910:	4809      	ldr	r0, [pc, #36]	; (8008938 <MX_USB_DEVICE_Init+0x54>)
 8008912:	f7fe fdd7 	bl	80074c4 <USBD_CDC_RegisterInterface>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d001      	beq.n	8008920 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800891c:	f7f8 fba8 	bl	8001070 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008920:	4805      	ldr	r0, [pc, #20]	; (8008938 <MX_USB_DEVICE_Init+0x54>)
 8008922:	f7fe fecc 	bl	80076be <USBD_Start>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d001      	beq.n	8008930 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800892c:	f7f8 fba0 	bl	8001070 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008930:	bf00      	nop
 8008932:	bd80      	pop	{r7, pc}
 8008934:	2000016c 	.word	0x2000016c
 8008938:	20001df8 	.word	0x20001df8
 800893c:	20000054 	.word	0x20000054
 8008940:	20000158 	.word	0x20000158

08008944 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008948:	2200      	movs	r2, #0
 800894a:	4905      	ldr	r1, [pc, #20]	; (8008960 <CDC_Init_FS+0x1c>)
 800894c:	4805      	ldr	r0, [pc, #20]	; (8008964 <CDC_Init_FS+0x20>)
 800894e:	f7fe fdce 	bl	80074ee <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008952:	4905      	ldr	r1, [pc, #20]	; (8008968 <CDC_Init_FS+0x24>)
 8008954:	4803      	ldr	r0, [pc, #12]	; (8008964 <CDC_Init_FS+0x20>)
 8008956:	f7fe fde8 	bl	800752a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800895a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800895c:	4618      	mov	r0, r3
 800895e:	bd80      	pop	{r7, pc}
 8008960:	200024b0 	.word	0x200024b0
 8008964:	20001df8 	.word	0x20001df8
 8008968:	200020c8 	.word	0x200020c8

0800896c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800896c:	b480      	push	{r7}
 800896e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008970:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008972:	4618      	mov	r0, r3
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	4603      	mov	r3, r0
 8008984:	6039      	str	r1, [r7, #0]
 8008986:	71fb      	strb	r3, [r7, #7]
 8008988:	4613      	mov	r3, r2
 800898a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800898c:	79fb      	ldrb	r3, [r7, #7]
 800898e:	2b23      	cmp	r3, #35	; 0x23
 8008990:	d84a      	bhi.n	8008a28 <CDC_Control_FS+0xac>
 8008992:	a201      	add	r2, pc, #4	; (adr r2, 8008998 <CDC_Control_FS+0x1c>)
 8008994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008998:	08008a29 	.word	0x08008a29
 800899c:	08008a29 	.word	0x08008a29
 80089a0:	08008a29 	.word	0x08008a29
 80089a4:	08008a29 	.word	0x08008a29
 80089a8:	08008a29 	.word	0x08008a29
 80089ac:	08008a29 	.word	0x08008a29
 80089b0:	08008a29 	.word	0x08008a29
 80089b4:	08008a29 	.word	0x08008a29
 80089b8:	08008a29 	.word	0x08008a29
 80089bc:	08008a29 	.word	0x08008a29
 80089c0:	08008a29 	.word	0x08008a29
 80089c4:	08008a29 	.word	0x08008a29
 80089c8:	08008a29 	.word	0x08008a29
 80089cc:	08008a29 	.word	0x08008a29
 80089d0:	08008a29 	.word	0x08008a29
 80089d4:	08008a29 	.word	0x08008a29
 80089d8:	08008a29 	.word	0x08008a29
 80089dc:	08008a29 	.word	0x08008a29
 80089e0:	08008a29 	.word	0x08008a29
 80089e4:	08008a29 	.word	0x08008a29
 80089e8:	08008a29 	.word	0x08008a29
 80089ec:	08008a29 	.word	0x08008a29
 80089f0:	08008a29 	.word	0x08008a29
 80089f4:	08008a29 	.word	0x08008a29
 80089f8:	08008a29 	.word	0x08008a29
 80089fc:	08008a29 	.word	0x08008a29
 8008a00:	08008a29 	.word	0x08008a29
 8008a04:	08008a29 	.word	0x08008a29
 8008a08:	08008a29 	.word	0x08008a29
 8008a0c:	08008a29 	.word	0x08008a29
 8008a10:	08008a29 	.word	0x08008a29
 8008a14:	08008a29 	.word	0x08008a29
 8008a18:	08008a29 	.word	0x08008a29
 8008a1c:	08008a29 	.word	0x08008a29
 8008a20:	08008a29 	.word	0x08008a29
 8008a24:	08008a29 	.word	0x08008a29
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008a28:	bf00      	nop
  }

  return (USBD_OK);
 8008a2a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008a42:	6879      	ldr	r1, [r7, #4]
 8008a44:	4805      	ldr	r0, [pc, #20]	; (8008a5c <CDC_Receive_FS+0x24>)
 8008a46:	f7fe fd70 	bl	800752a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008a4a:	4804      	ldr	r0, [pc, #16]	; (8008a5c <CDC_Receive_FS+0x24>)
 8008a4c:	f7fe fdb6 	bl	80075bc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008a50:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3708      	adds	r7, #8
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	20001df8 	.word	0x20001df8

08008a60 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	460b      	mov	r3, r1
 8008a6a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008a70:	4b0d      	ldr	r3, [pc, #52]	; (8008aa8 <CDC_Transmit_FS+0x48>)
 8008a72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a76:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d001      	beq.n	8008a86 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008a82:	2301      	movs	r3, #1
 8008a84:	e00b      	b.n	8008a9e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008a86:	887b      	ldrh	r3, [r7, #2]
 8008a88:	461a      	mov	r2, r3
 8008a8a:	6879      	ldr	r1, [r7, #4]
 8008a8c:	4806      	ldr	r0, [pc, #24]	; (8008aa8 <CDC_Transmit_FS+0x48>)
 8008a8e:	f7fe fd2e 	bl	80074ee <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008a92:	4805      	ldr	r0, [pc, #20]	; (8008aa8 <CDC_Transmit_FS+0x48>)
 8008a94:	f7fe fd62 	bl	800755c <USBD_CDC_TransmitPacket>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	20001df8 	.word	0x20001df8

08008aac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b087      	sub	sp, #28
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008abe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	371c      	adds	r7, #28
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
	...

08008ad0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	6039      	str	r1, [r7, #0]
 8008ada:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	2212      	movs	r2, #18
 8008ae0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008ae2:	4b03      	ldr	r3, [pc, #12]	; (8008af0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr
 8008af0:	20000188 	.word	0x20000188

08008af4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	4603      	mov	r3, r0
 8008afc:	6039      	str	r1, [r7, #0]
 8008afe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	2204      	movs	r2, #4
 8008b04:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008b06:	4b03      	ldr	r3, [pc, #12]	; (8008b14 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr
 8008b14:	2000019c 	.word	0x2000019c

08008b18 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	4603      	mov	r3, r0
 8008b20:	6039      	str	r1, [r7, #0]
 8008b22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b24:	79fb      	ldrb	r3, [r7, #7]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d105      	bne.n	8008b36 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b2a:	683a      	ldr	r2, [r7, #0]
 8008b2c:	4907      	ldr	r1, [pc, #28]	; (8008b4c <USBD_FS_ProductStrDescriptor+0x34>)
 8008b2e:	4808      	ldr	r0, [pc, #32]	; (8008b50 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b30:	f7ff fdf7 	bl	8008722 <USBD_GetString>
 8008b34:	e004      	b.n	8008b40 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b36:	683a      	ldr	r2, [r7, #0]
 8008b38:	4904      	ldr	r1, [pc, #16]	; (8008b4c <USBD_FS_ProductStrDescriptor+0x34>)
 8008b3a:	4805      	ldr	r0, [pc, #20]	; (8008b50 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b3c:	f7ff fdf1 	bl	8008722 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b40:	4b02      	ldr	r3, [pc, #8]	; (8008b4c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3708      	adds	r7, #8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	20002898 	.word	0x20002898
 8008b50:	0800a244 	.word	0x0800a244

08008b54 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	6039      	str	r1, [r7, #0]
 8008b5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008b60:	683a      	ldr	r2, [r7, #0]
 8008b62:	4904      	ldr	r1, [pc, #16]	; (8008b74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008b64:	4804      	ldr	r0, [pc, #16]	; (8008b78 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008b66:	f7ff fddc 	bl	8008722 <USBD_GetString>
  return USBD_StrDesc;
 8008b6a:	4b02      	ldr	r3, [pc, #8]	; (8008b74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3708      	adds	r7, #8
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	20002898 	.word	0x20002898
 8008b78:	0800a25c 	.word	0x0800a25c

08008b7c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	4603      	mov	r3, r0
 8008b84:	6039      	str	r1, [r7, #0]
 8008b86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	221a      	movs	r2, #26
 8008b8c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b8e:	f000 f843 	bl	8008c18 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008b92:	4b02      	ldr	r3, [pc, #8]	; (8008b9c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3708      	adds	r7, #8
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	200001a0 	.word	0x200001a0

08008ba0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b082      	sub	sp, #8
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	6039      	str	r1, [r7, #0]
 8008baa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008bac:	79fb      	ldrb	r3, [r7, #7]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d105      	bne.n	8008bbe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008bb2:	683a      	ldr	r2, [r7, #0]
 8008bb4:	4907      	ldr	r1, [pc, #28]	; (8008bd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008bb6:	4808      	ldr	r0, [pc, #32]	; (8008bd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008bb8:	f7ff fdb3 	bl	8008722 <USBD_GetString>
 8008bbc:	e004      	b.n	8008bc8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008bbe:	683a      	ldr	r2, [r7, #0]
 8008bc0:	4904      	ldr	r1, [pc, #16]	; (8008bd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008bc2:	4805      	ldr	r0, [pc, #20]	; (8008bd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008bc4:	f7ff fdad 	bl	8008722 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bc8:	4b02      	ldr	r3, [pc, #8]	; (8008bd4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3708      	adds	r7, #8
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	20002898 	.word	0x20002898
 8008bd8:	0800a270 	.word	0x0800a270

08008bdc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	4603      	mov	r3, r0
 8008be4:	6039      	str	r1, [r7, #0]
 8008be6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008be8:	79fb      	ldrb	r3, [r7, #7]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d105      	bne.n	8008bfa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008bee:	683a      	ldr	r2, [r7, #0]
 8008bf0:	4907      	ldr	r1, [pc, #28]	; (8008c10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008bf2:	4808      	ldr	r0, [pc, #32]	; (8008c14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008bf4:	f7ff fd95 	bl	8008722 <USBD_GetString>
 8008bf8:	e004      	b.n	8008c04 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008bfa:	683a      	ldr	r2, [r7, #0]
 8008bfc:	4904      	ldr	r1, [pc, #16]	; (8008c10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008bfe:	4805      	ldr	r0, [pc, #20]	; (8008c14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c00:	f7ff fd8f 	bl	8008722 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c04:	4b02      	ldr	r3, [pc, #8]	; (8008c10 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3708      	adds	r7, #8
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	20002898 	.word	0x20002898
 8008c14:	0800a27c 	.word	0x0800a27c

08008c18 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008c1e:	4b0f      	ldr	r3, [pc, #60]	; (8008c5c <Get_SerialNum+0x44>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008c24:	4b0e      	ldr	r3, [pc, #56]	; (8008c60 <Get_SerialNum+0x48>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008c2a:	4b0e      	ldr	r3, [pc, #56]	; (8008c64 <Get_SerialNum+0x4c>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4413      	add	r3, r2
 8008c36:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d009      	beq.n	8008c52 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008c3e:	2208      	movs	r2, #8
 8008c40:	4909      	ldr	r1, [pc, #36]	; (8008c68 <Get_SerialNum+0x50>)
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f000 f814 	bl	8008c70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c48:	2204      	movs	r2, #4
 8008c4a:	4908      	ldr	r1, [pc, #32]	; (8008c6c <Get_SerialNum+0x54>)
 8008c4c:	68b8      	ldr	r0, [r7, #8]
 8008c4e:	f000 f80f 	bl	8008c70 <IntToUnicode>
  }
}
 8008c52:	bf00      	nop
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	1fff7a10 	.word	0x1fff7a10
 8008c60:	1fff7a14 	.word	0x1fff7a14
 8008c64:	1fff7a18 	.word	0x1fff7a18
 8008c68:	200001a2 	.word	0x200001a2
 8008c6c:	200001b2 	.word	0x200001b2

08008c70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b087      	sub	sp, #28
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c82:	2300      	movs	r3, #0
 8008c84:	75fb      	strb	r3, [r7, #23]
 8008c86:	e027      	b.n	8008cd8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	0f1b      	lsrs	r3, r3, #28
 8008c8c:	2b09      	cmp	r3, #9
 8008c8e:	d80b      	bhi.n	8008ca8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	0f1b      	lsrs	r3, r3, #28
 8008c94:	b2da      	uxtb	r2, r3
 8008c96:	7dfb      	ldrb	r3, [r7, #23]
 8008c98:	005b      	lsls	r3, r3, #1
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	440b      	add	r3, r1
 8008ca0:	3230      	adds	r2, #48	; 0x30
 8008ca2:	b2d2      	uxtb	r2, r2
 8008ca4:	701a      	strb	r2, [r3, #0]
 8008ca6:	e00a      	b.n	8008cbe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	0f1b      	lsrs	r3, r3, #28
 8008cac:	b2da      	uxtb	r2, r3
 8008cae:	7dfb      	ldrb	r3, [r7, #23]
 8008cb0:	005b      	lsls	r3, r3, #1
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	440b      	add	r3, r1
 8008cb8:	3237      	adds	r2, #55	; 0x37
 8008cba:	b2d2      	uxtb	r2, r2
 8008cbc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	011b      	lsls	r3, r3, #4
 8008cc2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008cc4:	7dfb      	ldrb	r3, [r7, #23]
 8008cc6:	005b      	lsls	r3, r3, #1
 8008cc8:	3301      	adds	r3, #1
 8008cca:	68ba      	ldr	r2, [r7, #8]
 8008ccc:	4413      	add	r3, r2
 8008cce:	2200      	movs	r2, #0
 8008cd0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008cd2:	7dfb      	ldrb	r3, [r7, #23]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	75fb      	strb	r3, [r7, #23]
 8008cd8:	7dfa      	ldrb	r2, [r7, #23]
 8008cda:	79fb      	ldrb	r3, [r7, #7]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d3d3      	bcc.n	8008c88 <IntToUnicode+0x18>
  }
}
 8008ce0:	bf00      	nop
 8008ce2:	bf00      	nop
 8008ce4:	371c      	adds	r7, #28
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
	...

08008cf0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b08a      	sub	sp, #40	; 0x28
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cf8:	f107 0314 	add.w	r3, r7, #20
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	601a      	str	r2, [r3, #0]
 8008d00:	605a      	str	r2, [r3, #4]
 8008d02:	609a      	str	r2, [r3, #8]
 8008d04:	60da      	str	r2, [r3, #12]
 8008d06:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d10:	d13a      	bne.n	8008d88 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d12:	2300      	movs	r3, #0
 8008d14:	613b      	str	r3, [r7, #16]
 8008d16:	4b1e      	ldr	r3, [pc, #120]	; (8008d90 <HAL_PCD_MspInit+0xa0>)
 8008d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d1a:	4a1d      	ldr	r2, [pc, #116]	; (8008d90 <HAL_PCD_MspInit+0xa0>)
 8008d1c:	f043 0301 	orr.w	r3, r3, #1
 8008d20:	6313      	str	r3, [r2, #48]	; 0x30
 8008d22:	4b1b      	ldr	r3, [pc, #108]	; (8008d90 <HAL_PCD_MspInit+0xa0>)
 8008d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d26:	f003 0301 	and.w	r3, r3, #1
 8008d2a:	613b      	str	r3, [r7, #16]
 8008d2c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008d2e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d34:	2302      	movs	r3, #2
 8008d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d3c:	2303      	movs	r3, #3
 8008d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d40:	230a      	movs	r3, #10
 8008d42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d44:	f107 0314 	add.w	r3, r7, #20
 8008d48:	4619      	mov	r1, r3
 8008d4a:	4812      	ldr	r0, [pc, #72]	; (8008d94 <HAL_PCD_MspInit+0xa4>)
 8008d4c:	f7f9 fcc0 	bl	80026d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d50:	4b0f      	ldr	r3, [pc, #60]	; (8008d90 <HAL_PCD_MspInit+0xa0>)
 8008d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d54:	4a0e      	ldr	r2, [pc, #56]	; (8008d90 <HAL_PCD_MspInit+0xa0>)
 8008d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d5a:	6353      	str	r3, [r2, #52]	; 0x34
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	60fb      	str	r3, [r7, #12]
 8008d60:	4b0b      	ldr	r3, [pc, #44]	; (8008d90 <HAL_PCD_MspInit+0xa0>)
 8008d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d64:	4a0a      	ldr	r2, [pc, #40]	; (8008d90 <HAL_PCD_MspInit+0xa0>)
 8008d66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d6a:	6453      	str	r3, [r2, #68]	; 0x44
 8008d6c:	4b08      	ldr	r3, [pc, #32]	; (8008d90 <HAL_PCD_MspInit+0xa0>)
 8008d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d74:	60fb      	str	r3, [r7, #12]
 8008d76:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008d78:	2200      	movs	r2, #0
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	2043      	movs	r0, #67	; 0x43
 8008d7e:	f7f9 f900 	bl	8001f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008d82:	2043      	movs	r0, #67	; 0x43
 8008d84:	f7f9 f919 	bl	8001fba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008d88:	bf00      	nop
 8008d8a:	3728      	adds	r7, #40	; 0x28
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	40023800 	.word	0x40023800
 8008d94:	40020000 	.word	0x40020000

08008d98 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008dac:	4619      	mov	r1, r3
 8008dae:	4610      	mov	r0, r2
 8008db0:	f7fe fcd0 	bl	8007754 <USBD_LL_SetupStage>
}
 8008db4:	bf00      	nop
 8008db6:	3708      	adds	r7, #8
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008dce:	78fa      	ldrb	r2, [r7, #3]
 8008dd0:	6879      	ldr	r1, [r7, #4]
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	00db      	lsls	r3, r3, #3
 8008dd6:	1a9b      	subs	r3, r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	440b      	add	r3, r1
 8008ddc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	78fb      	ldrb	r3, [r7, #3]
 8008de4:	4619      	mov	r1, r3
 8008de6:	f7fe fd0a 	bl	80077fe <USBD_LL_DataOutStage>
}
 8008dea:	bf00      	nop
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b082      	sub	sp, #8
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008e04:	78fa      	ldrb	r2, [r7, #3]
 8008e06:	6879      	ldr	r1, [r7, #4]
 8008e08:	4613      	mov	r3, r2
 8008e0a:	00db      	lsls	r3, r3, #3
 8008e0c:	1a9b      	subs	r3, r3, r2
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	440b      	add	r3, r1
 8008e12:	3348      	adds	r3, #72	; 0x48
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	78fb      	ldrb	r3, [r7, #3]
 8008e18:	4619      	mov	r1, r3
 8008e1a:	f7fe fd53 	bl	80078c4 <USBD_LL_DataInStage>
}
 8008e1e:	bf00      	nop
 8008e20:	3708      	adds	r7, #8
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b082      	sub	sp, #8
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7fe fe67 	bl	8007b08 <USBD_LL_SOF>
}
 8008e3a:	bf00      	nop
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b084      	sub	sp, #16
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	68db      	ldr	r3, [r3, #12]
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d001      	beq.n	8008e5a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008e56:	f7f8 f90b 	bl	8001070 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e60:	7bfa      	ldrb	r2, [r7, #15]
 8008e62:	4611      	mov	r1, r2
 8008e64:	4618      	mov	r0, r3
 8008e66:	f7fe fe11 	bl	8007a8c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e70:	4618      	mov	r0, r3
 8008e72:	f7fe fdbd 	bl	80079f0 <USBD_LL_Reset>
}
 8008e76:	bf00      	nop
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
	...

08008e80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7fe fe0c 	bl	8007aac <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	6812      	ldr	r2, [r2, #0]
 8008ea2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ea6:	f043 0301 	orr.w	r3, r3, #1
 8008eaa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a1b      	ldr	r3, [r3, #32]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d005      	beq.n	8008ec0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008eb4:	4b04      	ldr	r3, [pc, #16]	; (8008ec8 <HAL_PCD_SuspendCallback+0x48>)
 8008eb6:	691b      	ldr	r3, [r3, #16]
 8008eb8:	4a03      	ldr	r2, [pc, #12]	; (8008ec8 <HAL_PCD_SuspendCallback+0x48>)
 8008eba:	f043 0306 	orr.w	r3, r3, #6
 8008ebe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ec0:	bf00      	nop
 8008ec2:	3708      	adds	r7, #8
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	e000ed00 	.word	0xe000ed00

08008ecc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7fe fdfc 	bl	8007ad8 <USBD_LL_Resume>
}
 8008ee0:	bf00      	nop
 8008ee2:	3708      	adds	r7, #8
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008efa:	78fa      	ldrb	r2, [r7, #3]
 8008efc:	4611      	mov	r1, r2
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7fe fe4a 	bl	8007b98 <USBD_LL_IsoOUTIncomplete>
}
 8008f04:	bf00      	nop
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	460b      	mov	r3, r1
 8008f16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f1e:	78fa      	ldrb	r2, [r7, #3]
 8008f20:	4611      	mov	r1, r2
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7fe fe12 	bl	8007b4c <USBD_LL_IsoINIncomplete>
}
 8008f28:	bf00      	nop
 8008f2a:	3708      	adds	r7, #8
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7fe fe50 	bl	8007be4 <USBD_LL_DevConnected>
}
 8008f44:	bf00      	nop
 8008f46:	3708      	adds	r7, #8
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7fe fe4d 	bl	8007bfa <USBD_LL_DevDisconnected>
}
 8008f60:	bf00      	nop
 8008f62:	3708      	adds	r7, #8
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d13c      	bne.n	8008ff2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008f78:	4a20      	ldr	r2, [pc, #128]	; (8008ffc <USBD_LL_Init+0x94>)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a1e      	ldr	r2, [pc, #120]	; (8008ffc <USBD_LL_Init+0x94>)
 8008f84:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f88:	4b1c      	ldr	r3, [pc, #112]	; (8008ffc <USBD_LL_Init+0x94>)
 8008f8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008f8e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008f90:	4b1a      	ldr	r3, [pc, #104]	; (8008ffc <USBD_LL_Init+0x94>)
 8008f92:	2204      	movs	r2, #4
 8008f94:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008f96:	4b19      	ldr	r3, [pc, #100]	; (8008ffc <USBD_LL_Init+0x94>)
 8008f98:	2202      	movs	r2, #2
 8008f9a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f9c:	4b17      	ldr	r3, [pc, #92]	; (8008ffc <USBD_LL_Init+0x94>)
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008fa2:	4b16      	ldr	r3, [pc, #88]	; (8008ffc <USBD_LL_Init+0x94>)
 8008fa4:	2202      	movs	r2, #2
 8008fa6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008fa8:	4b14      	ldr	r3, [pc, #80]	; (8008ffc <USBD_LL_Init+0x94>)
 8008faa:	2200      	movs	r2, #0
 8008fac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008fae:	4b13      	ldr	r3, [pc, #76]	; (8008ffc <USBD_LL_Init+0x94>)
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008fb4:	4b11      	ldr	r3, [pc, #68]	; (8008ffc <USBD_LL_Init+0x94>)
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008fba:	4b10      	ldr	r3, [pc, #64]	; (8008ffc <USBD_LL_Init+0x94>)
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008fc0:	4b0e      	ldr	r3, [pc, #56]	; (8008ffc <USBD_LL_Init+0x94>)
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008fc6:	480d      	ldr	r0, [pc, #52]	; (8008ffc <USBD_LL_Init+0x94>)
 8008fc8:	f7f9 fd37 	bl	8002a3a <HAL_PCD_Init>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d001      	beq.n	8008fd6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008fd2:	f7f8 f84d 	bl	8001070 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008fd6:	2180      	movs	r1, #128	; 0x80
 8008fd8:	4808      	ldr	r0, [pc, #32]	; (8008ffc <USBD_LL_Init+0x94>)
 8008fda:	f7fa fe94 	bl	8003d06 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008fde:	2240      	movs	r2, #64	; 0x40
 8008fe0:	2100      	movs	r1, #0
 8008fe2:	4806      	ldr	r0, [pc, #24]	; (8008ffc <USBD_LL_Init+0x94>)
 8008fe4:	f7fa fe48 	bl	8003c78 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008fe8:	2280      	movs	r2, #128	; 0x80
 8008fea:	2101      	movs	r1, #1
 8008fec:	4803      	ldr	r0, [pc, #12]	; (8008ffc <USBD_LL_Init+0x94>)
 8008fee:	f7fa fe43 	bl	8003c78 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3708      	adds	r7, #8
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	20002a98 	.word	0x20002a98

08009000 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009008:	2300      	movs	r3, #0
 800900a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800900c:	2300      	movs	r3, #0
 800900e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009016:	4618      	mov	r0, r3
 8009018:	f7f9 fe2c 	bl	8002c74 <HAL_PCD_Start>
 800901c:	4603      	mov	r3, r0
 800901e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009020:	7bfb      	ldrb	r3, [r7, #15]
 8009022:	4618      	mov	r0, r3
 8009024:	f000 f942 	bl	80092ac <USBD_Get_USB_Status>
 8009028:	4603      	mov	r3, r0
 800902a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800902c:	7bbb      	ldrb	r3, [r7, #14]
}
 800902e:	4618      	mov	r0, r3
 8009030:	3710      	adds	r7, #16
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b084      	sub	sp, #16
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
 800903e:	4608      	mov	r0, r1
 8009040:	4611      	mov	r1, r2
 8009042:	461a      	mov	r2, r3
 8009044:	4603      	mov	r3, r0
 8009046:	70fb      	strb	r3, [r7, #3]
 8009048:	460b      	mov	r3, r1
 800904a:	70bb      	strb	r3, [r7, #2]
 800904c:	4613      	mov	r3, r2
 800904e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009050:	2300      	movs	r3, #0
 8009052:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009054:	2300      	movs	r3, #0
 8009056:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800905e:	78bb      	ldrb	r3, [r7, #2]
 8009060:	883a      	ldrh	r2, [r7, #0]
 8009062:	78f9      	ldrb	r1, [r7, #3]
 8009064:	f7fa fa10 	bl	8003488 <HAL_PCD_EP_Open>
 8009068:	4603      	mov	r3, r0
 800906a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800906c:	7bfb      	ldrb	r3, [r7, #15]
 800906e:	4618      	mov	r0, r3
 8009070:	f000 f91c 	bl	80092ac <USBD_Get_USB_Status>
 8009074:	4603      	mov	r3, r0
 8009076:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009078:	7bbb      	ldrb	r3, [r7, #14]
}
 800907a:	4618      	mov	r0, r3
 800907c:	3710      	adds	r7, #16
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}

08009082 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009082:	b580      	push	{r7, lr}
 8009084:	b084      	sub	sp, #16
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
 800908a:	460b      	mov	r3, r1
 800908c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800908e:	2300      	movs	r3, #0
 8009090:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009092:	2300      	movs	r3, #0
 8009094:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800909c:	78fa      	ldrb	r2, [r7, #3]
 800909e:	4611      	mov	r1, r2
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7fa fa59 	bl	8003558 <HAL_PCD_EP_Close>
 80090a6:	4603      	mov	r3, r0
 80090a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090aa:	7bfb      	ldrb	r3, [r7, #15]
 80090ac:	4618      	mov	r0, r3
 80090ae:	f000 f8fd 	bl	80092ac <USBD_Get_USB_Status>
 80090b2:	4603      	mov	r3, r0
 80090b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3710      	adds	r7, #16
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	460b      	mov	r3, r1
 80090ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090cc:	2300      	movs	r3, #0
 80090ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090d0:	2300      	movs	r3, #0
 80090d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80090da:	78fa      	ldrb	r2, [r7, #3]
 80090dc:	4611      	mov	r1, r2
 80090de:	4618      	mov	r0, r3
 80090e0:	f7fa fb31 	bl	8003746 <HAL_PCD_EP_SetStall>
 80090e4:	4603      	mov	r3, r0
 80090e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090e8:	7bfb      	ldrb	r3, [r7, #15]
 80090ea:	4618      	mov	r0, r3
 80090ec:	f000 f8de 	bl	80092ac <USBD_Get_USB_Status>
 80090f0:	4603      	mov	r3, r0
 80090f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b084      	sub	sp, #16
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
 8009106:	460b      	mov	r3, r1
 8009108:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800910a:	2300      	movs	r3, #0
 800910c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800910e:	2300      	movs	r3, #0
 8009110:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009118:	78fa      	ldrb	r2, [r7, #3]
 800911a:	4611      	mov	r1, r2
 800911c:	4618      	mov	r0, r3
 800911e:	f7fa fb76 	bl	800380e <HAL_PCD_EP_ClrStall>
 8009122:	4603      	mov	r3, r0
 8009124:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009126:	7bfb      	ldrb	r3, [r7, #15]
 8009128:	4618      	mov	r0, r3
 800912a:	f000 f8bf 	bl	80092ac <USBD_Get_USB_Status>
 800912e:	4603      	mov	r3, r0
 8009130:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009132:	7bbb      	ldrb	r3, [r7, #14]
}
 8009134:	4618      	mov	r0, r3
 8009136:	3710      	adds	r7, #16
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	460b      	mov	r3, r1
 8009146:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800914e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009150:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009154:	2b00      	cmp	r3, #0
 8009156:	da0b      	bge.n	8009170 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009158:	78fb      	ldrb	r3, [r7, #3]
 800915a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800915e:	68f9      	ldr	r1, [r7, #12]
 8009160:	4613      	mov	r3, r2
 8009162:	00db      	lsls	r3, r3, #3
 8009164:	1a9b      	subs	r3, r3, r2
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	440b      	add	r3, r1
 800916a:	333e      	adds	r3, #62	; 0x3e
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	e00b      	b.n	8009188 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009170:	78fb      	ldrb	r3, [r7, #3]
 8009172:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009176:	68f9      	ldr	r1, [r7, #12]
 8009178:	4613      	mov	r3, r2
 800917a:	00db      	lsls	r3, r3, #3
 800917c:	1a9b      	subs	r3, r3, r2
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	440b      	add	r3, r1
 8009182:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009186:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009188:	4618      	mov	r0, r3
 800918a:	3714      	adds	r7, #20
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	460b      	mov	r3, r1
 800919e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091a0:	2300      	movs	r3, #0
 80091a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091a4:	2300      	movs	r3, #0
 80091a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80091ae:	78fa      	ldrb	r2, [r7, #3]
 80091b0:	4611      	mov	r1, r2
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7fa f943 	bl	800343e <HAL_PCD_SetAddress>
 80091b8:	4603      	mov	r3, r0
 80091ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091bc:	7bfb      	ldrb	r3, [r7, #15]
 80091be:	4618      	mov	r0, r3
 80091c0:	f000 f874 	bl	80092ac <USBD_Get_USB_Status>
 80091c4:	4603      	mov	r3, r0
 80091c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b086      	sub	sp, #24
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	60f8      	str	r0, [r7, #12]
 80091da:	607a      	str	r2, [r7, #4]
 80091dc:	603b      	str	r3, [r7, #0]
 80091de:	460b      	mov	r3, r1
 80091e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091e2:	2300      	movs	r3, #0
 80091e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091e6:	2300      	movs	r3, #0
 80091e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80091f0:	7af9      	ldrb	r1, [r7, #11]
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	f7fa fa5c 	bl	80036b2 <HAL_PCD_EP_Transmit>
 80091fa:	4603      	mov	r3, r0
 80091fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091fe:	7dfb      	ldrb	r3, [r7, #23]
 8009200:	4618      	mov	r0, r3
 8009202:	f000 f853 	bl	80092ac <USBD_Get_USB_Status>
 8009206:	4603      	mov	r3, r0
 8009208:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800920a:	7dbb      	ldrb	r3, [r7, #22]
}
 800920c:	4618      	mov	r0, r3
 800920e:	3718      	adds	r7, #24
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b086      	sub	sp, #24
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	607a      	str	r2, [r7, #4]
 800921e:	603b      	str	r3, [r7, #0]
 8009220:	460b      	mov	r3, r1
 8009222:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009224:	2300      	movs	r3, #0
 8009226:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009228:	2300      	movs	r3, #0
 800922a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009232:	7af9      	ldrb	r1, [r7, #11]
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	f7fa f9d8 	bl	80035ec <HAL_PCD_EP_Receive>
 800923c:	4603      	mov	r3, r0
 800923e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009240:	7dfb      	ldrb	r3, [r7, #23]
 8009242:	4618      	mov	r0, r3
 8009244:	f000 f832 	bl	80092ac <USBD_Get_USB_Status>
 8009248:	4603      	mov	r3, r0
 800924a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800924c:	7dbb      	ldrb	r3, [r7, #22]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3718      	adds	r7, #24
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b082      	sub	sp, #8
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
 800925e:	460b      	mov	r3, r1
 8009260:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009268:	78fa      	ldrb	r2, [r7, #3]
 800926a:	4611      	mov	r1, r2
 800926c:	4618      	mov	r0, r3
 800926e:	f7fa fa08 	bl	8003682 <HAL_PCD_EP_GetRxCount>
 8009272:	4603      	mov	r3, r0
}
 8009274:	4618      	mov	r0, r3
 8009276:	3708      	adds	r7, #8
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009284:	4b03      	ldr	r3, [pc, #12]	; (8009294 <USBD_static_malloc+0x18>)
}
 8009286:	4618      	mov	r0, r3
 8009288:	370c      	adds	r7, #12
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr
 8009292:	bf00      	nop
 8009294:	2000026c 	.word	0x2000026c

08009298 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]

}
 80092a0:	bf00      	nop
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b085      	sub	sp, #20
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	4603      	mov	r3, r0
 80092b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092b6:	2300      	movs	r3, #0
 80092b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80092ba:	79fb      	ldrb	r3, [r7, #7]
 80092bc:	2b03      	cmp	r3, #3
 80092be:	d817      	bhi.n	80092f0 <USBD_Get_USB_Status+0x44>
 80092c0:	a201      	add	r2, pc, #4	; (adr r2, 80092c8 <USBD_Get_USB_Status+0x1c>)
 80092c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c6:	bf00      	nop
 80092c8:	080092d9 	.word	0x080092d9
 80092cc:	080092df 	.word	0x080092df
 80092d0:	080092e5 	.word	0x080092e5
 80092d4:	080092eb 	.word	0x080092eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80092d8:	2300      	movs	r3, #0
 80092da:	73fb      	strb	r3, [r7, #15]
    break;
 80092dc:	e00b      	b.n	80092f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80092de:	2303      	movs	r3, #3
 80092e0:	73fb      	strb	r3, [r7, #15]
    break;
 80092e2:	e008      	b.n	80092f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80092e4:	2301      	movs	r3, #1
 80092e6:	73fb      	strb	r3, [r7, #15]
    break;
 80092e8:	e005      	b.n	80092f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80092ea:	2303      	movs	r3, #3
 80092ec:	73fb      	strb	r3, [r7, #15]
    break;
 80092ee:	e002      	b.n	80092f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80092f0:	2303      	movs	r3, #3
 80092f2:	73fb      	strb	r3, [r7, #15]
    break;
 80092f4:	bf00      	nop
  }
  return usb_status;
 80092f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3714      	adds	r7, #20
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <__errno>:
 8009304:	4b01      	ldr	r3, [pc, #4]	; (800930c <__errno+0x8>)
 8009306:	6818      	ldr	r0, [r3, #0]
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop
 800930c:	200001bc 	.word	0x200001bc

08009310 <__libc_init_array>:
 8009310:	b570      	push	{r4, r5, r6, lr}
 8009312:	4d0d      	ldr	r5, [pc, #52]	; (8009348 <__libc_init_array+0x38>)
 8009314:	4c0d      	ldr	r4, [pc, #52]	; (800934c <__libc_init_array+0x3c>)
 8009316:	1b64      	subs	r4, r4, r5
 8009318:	10a4      	asrs	r4, r4, #2
 800931a:	2600      	movs	r6, #0
 800931c:	42a6      	cmp	r6, r4
 800931e:	d109      	bne.n	8009334 <__libc_init_array+0x24>
 8009320:	4d0b      	ldr	r5, [pc, #44]	; (8009350 <__libc_init_array+0x40>)
 8009322:	4c0c      	ldr	r4, [pc, #48]	; (8009354 <__libc_init_array+0x44>)
 8009324:	f000 ff76 	bl	800a214 <_init>
 8009328:	1b64      	subs	r4, r4, r5
 800932a:	10a4      	asrs	r4, r4, #2
 800932c:	2600      	movs	r6, #0
 800932e:	42a6      	cmp	r6, r4
 8009330:	d105      	bne.n	800933e <__libc_init_array+0x2e>
 8009332:	bd70      	pop	{r4, r5, r6, pc}
 8009334:	f855 3b04 	ldr.w	r3, [r5], #4
 8009338:	4798      	blx	r3
 800933a:	3601      	adds	r6, #1
 800933c:	e7ee      	b.n	800931c <__libc_init_array+0xc>
 800933e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009342:	4798      	blx	r3
 8009344:	3601      	adds	r6, #1
 8009346:	e7f2      	b.n	800932e <__libc_init_array+0x1e>
 8009348:	0800a358 	.word	0x0800a358
 800934c:	0800a358 	.word	0x0800a358
 8009350:	0800a358 	.word	0x0800a358
 8009354:	0800a35c 	.word	0x0800a35c

08009358 <memset>:
 8009358:	4402      	add	r2, r0
 800935a:	4603      	mov	r3, r0
 800935c:	4293      	cmp	r3, r2
 800935e:	d100      	bne.n	8009362 <memset+0xa>
 8009360:	4770      	bx	lr
 8009362:	f803 1b01 	strb.w	r1, [r3], #1
 8009366:	e7f9      	b.n	800935c <memset+0x4>

08009368 <iprintf>:
 8009368:	b40f      	push	{r0, r1, r2, r3}
 800936a:	4b0a      	ldr	r3, [pc, #40]	; (8009394 <iprintf+0x2c>)
 800936c:	b513      	push	{r0, r1, r4, lr}
 800936e:	681c      	ldr	r4, [r3, #0]
 8009370:	b124      	cbz	r4, 800937c <iprintf+0x14>
 8009372:	69a3      	ldr	r3, [r4, #24]
 8009374:	b913      	cbnz	r3, 800937c <iprintf+0x14>
 8009376:	4620      	mov	r0, r4
 8009378:	f000 f866 	bl	8009448 <__sinit>
 800937c:	ab05      	add	r3, sp, #20
 800937e:	9a04      	ldr	r2, [sp, #16]
 8009380:	68a1      	ldr	r1, [r4, #8]
 8009382:	9301      	str	r3, [sp, #4]
 8009384:	4620      	mov	r0, r4
 8009386:	f000 f983 	bl	8009690 <_vfiprintf_r>
 800938a:	b002      	add	sp, #8
 800938c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009390:	b004      	add	sp, #16
 8009392:	4770      	bx	lr
 8009394:	200001bc 	.word	0x200001bc

08009398 <std>:
 8009398:	2300      	movs	r3, #0
 800939a:	b510      	push	{r4, lr}
 800939c:	4604      	mov	r4, r0
 800939e:	e9c0 3300 	strd	r3, r3, [r0]
 80093a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80093a6:	6083      	str	r3, [r0, #8]
 80093a8:	8181      	strh	r1, [r0, #12]
 80093aa:	6643      	str	r3, [r0, #100]	; 0x64
 80093ac:	81c2      	strh	r2, [r0, #14]
 80093ae:	6183      	str	r3, [r0, #24]
 80093b0:	4619      	mov	r1, r3
 80093b2:	2208      	movs	r2, #8
 80093b4:	305c      	adds	r0, #92	; 0x5c
 80093b6:	f7ff ffcf 	bl	8009358 <memset>
 80093ba:	4b05      	ldr	r3, [pc, #20]	; (80093d0 <std+0x38>)
 80093bc:	6263      	str	r3, [r4, #36]	; 0x24
 80093be:	4b05      	ldr	r3, [pc, #20]	; (80093d4 <std+0x3c>)
 80093c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80093c2:	4b05      	ldr	r3, [pc, #20]	; (80093d8 <std+0x40>)
 80093c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80093c6:	4b05      	ldr	r3, [pc, #20]	; (80093dc <std+0x44>)
 80093c8:	6224      	str	r4, [r4, #32]
 80093ca:	6323      	str	r3, [r4, #48]	; 0x30
 80093cc:	bd10      	pop	{r4, pc}
 80093ce:	bf00      	nop
 80093d0:	08009c39 	.word	0x08009c39
 80093d4:	08009c5b 	.word	0x08009c5b
 80093d8:	08009c93 	.word	0x08009c93
 80093dc:	08009cb7 	.word	0x08009cb7

080093e0 <_cleanup_r>:
 80093e0:	4901      	ldr	r1, [pc, #4]	; (80093e8 <_cleanup_r+0x8>)
 80093e2:	f000 b8af 	b.w	8009544 <_fwalk_reent>
 80093e6:	bf00      	nop
 80093e8:	08009f91 	.word	0x08009f91

080093ec <__sfmoreglue>:
 80093ec:	b570      	push	{r4, r5, r6, lr}
 80093ee:	1e4a      	subs	r2, r1, #1
 80093f0:	2568      	movs	r5, #104	; 0x68
 80093f2:	4355      	muls	r5, r2
 80093f4:	460e      	mov	r6, r1
 80093f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80093fa:	f000 f8c5 	bl	8009588 <_malloc_r>
 80093fe:	4604      	mov	r4, r0
 8009400:	b140      	cbz	r0, 8009414 <__sfmoreglue+0x28>
 8009402:	2100      	movs	r1, #0
 8009404:	e9c0 1600 	strd	r1, r6, [r0]
 8009408:	300c      	adds	r0, #12
 800940a:	60a0      	str	r0, [r4, #8]
 800940c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009410:	f7ff ffa2 	bl	8009358 <memset>
 8009414:	4620      	mov	r0, r4
 8009416:	bd70      	pop	{r4, r5, r6, pc}

08009418 <__sfp_lock_acquire>:
 8009418:	4801      	ldr	r0, [pc, #4]	; (8009420 <__sfp_lock_acquire+0x8>)
 800941a:	f000 b8b3 	b.w	8009584 <__retarget_lock_acquire_recursive>
 800941e:	bf00      	nop
 8009420:	20002ea8 	.word	0x20002ea8

08009424 <__sfp_lock_release>:
 8009424:	4801      	ldr	r0, [pc, #4]	; (800942c <__sfp_lock_release+0x8>)
 8009426:	f000 b8ae 	b.w	8009586 <__retarget_lock_release_recursive>
 800942a:	bf00      	nop
 800942c:	20002ea8 	.word	0x20002ea8

08009430 <__sinit_lock_acquire>:
 8009430:	4801      	ldr	r0, [pc, #4]	; (8009438 <__sinit_lock_acquire+0x8>)
 8009432:	f000 b8a7 	b.w	8009584 <__retarget_lock_acquire_recursive>
 8009436:	bf00      	nop
 8009438:	20002ea3 	.word	0x20002ea3

0800943c <__sinit_lock_release>:
 800943c:	4801      	ldr	r0, [pc, #4]	; (8009444 <__sinit_lock_release+0x8>)
 800943e:	f000 b8a2 	b.w	8009586 <__retarget_lock_release_recursive>
 8009442:	bf00      	nop
 8009444:	20002ea3 	.word	0x20002ea3

08009448 <__sinit>:
 8009448:	b510      	push	{r4, lr}
 800944a:	4604      	mov	r4, r0
 800944c:	f7ff fff0 	bl	8009430 <__sinit_lock_acquire>
 8009450:	69a3      	ldr	r3, [r4, #24]
 8009452:	b11b      	cbz	r3, 800945c <__sinit+0x14>
 8009454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009458:	f7ff bff0 	b.w	800943c <__sinit_lock_release>
 800945c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009460:	6523      	str	r3, [r4, #80]	; 0x50
 8009462:	4b13      	ldr	r3, [pc, #76]	; (80094b0 <__sinit+0x68>)
 8009464:	4a13      	ldr	r2, [pc, #76]	; (80094b4 <__sinit+0x6c>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	62a2      	str	r2, [r4, #40]	; 0x28
 800946a:	42a3      	cmp	r3, r4
 800946c:	bf04      	itt	eq
 800946e:	2301      	moveq	r3, #1
 8009470:	61a3      	streq	r3, [r4, #24]
 8009472:	4620      	mov	r0, r4
 8009474:	f000 f820 	bl	80094b8 <__sfp>
 8009478:	6060      	str	r0, [r4, #4]
 800947a:	4620      	mov	r0, r4
 800947c:	f000 f81c 	bl	80094b8 <__sfp>
 8009480:	60a0      	str	r0, [r4, #8]
 8009482:	4620      	mov	r0, r4
 8009484:	f000 f818 	bl	80094b8 <__sfp>
 8009488:	2200      	movs	r2, #0
 800948a:	60e0      	str	r0, [r4, #12]
 800948c:	2104      	movs	r1, #4
 800948e:	6860      	ldr	r0, [r4, #4]
 8009490:	f7ff ff82 	bl	8009398 <std>
 8009494:	68a0      	ldr	r0, [r4, #8]
 8009496:	2201      	movs	r2, #1
 8009498:	2109      	movs	r1, #9
 800949a:	f7ff ff7d 	bl	8009398 <std>
 800949e:	68e0      	ldr	r0, [r4, #12]
 80094a0:	2202      	movs	r2, #2
 80094a2:	2112      	movs	r1, #18
 80094a4:	f7ff ff78 	bl	8009398 <std>
 80094a8:	2301      	movs	r3, #1
 80094aa:	61a3      	str	r3, [r4, #24]
 80094ac:	e7d2      	b.n	8009454 <__sinit+0xc>
 80094ae:	bf00      	nop
 80094b0:	0800a2b8 	.word	0x0800a2b8
 80094b4:	080093e1 	.word	0x080093e1

080094b8 <__sfp>:
 80094b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ba:	4607      	mov	r7, r0
 80094bc:	f7ff ffac 	bl	8009418 <__sfp_lock_acquire>
 80094c0:	4b1e      	ldr	r3, [pc, #120]	; (800953c <__sfp+0x84>)
 80094c2:	681e      	ldr	r6, [r3, #0]
 80094c4:	69b3      	ldr	r3, [r6, #24]
 80094c6:	b913      	cbnz	r3, 80094ce <__sfp+0x16>
 80094c8:	4630      	mov	r0, r6
 80094ca:	f7ff ffbd 	bl	8009448 <__sinit>
 80094ce:	3648      	adds	r6, #72	; 0x48
 80094d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80094d4:	3b01      	subs	r3, #1
 80094d6:	d503      	bpl.n	80094e0 <__sfp+0x28>
 80094d8:	6833      	ldr	r3, [r6, #0]
 80094da:	b30b      	cbz	r3, 8009520 <__sfp+0x68>
 80094dc:	6836      	ldr	r6, [r6, #0]
 80094de:	e7f7      	b.n	80094d0 <__sfp+0x18>
 80094e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80094e4:	b9d5      	cbnz	r5, 800951c <__sfp+0x64>
 80094e6:	4b16      	ldr	r3, [pc, #88]	; (8009540 <__sfp+0x88>)
 80094e8:	60e3      	str	r3, [r4, #12]
 80094ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80094ee:	6665      	str	r5, [r4, #100]	; 0x64
 80094f0:	f000 f847 	bl	8009582 <__retarget_lock_init_recursive>
 80094f4:	f7ff ff96 	bl	8009424 <__sfp_lock_release>
 80094f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80094fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009500:	6025      	str	r5, [r4, #0]
 8009502:	61a5      	str	r5, [r4, #24]
 8009504:	2208      	movs	r2, #8
 8009506:	4629      	mov	r1, r5
 8009508:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800950c:	f7ff ff24 	bl	8009358 <memset>
 8009510:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009514:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009518:	4620      	mov	r0, r4
 800951a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800951c:	3468      	adds	r4, #104	; 0x68
 800951e:	e7d9      	b.n	80094d4 <__sfp+0x1c>
 8009520:	2104      	movs	r1, #4
 8009522:	4638      	mov	r0, r7
 8009524:	f7ff ff62 	bl	80093ec <__sfmoreglue>
 8009528:	4604      	mov	r4, r0
 800952a:	6030      	str	r0, [r6, #0]
 800952c:	2800      	cmp	r0, #0
 800952e:	d1d5      	bne.n	80094dc <__sfp+0x24>
 8009530:	f7ff ff78 	bl	8009424 <__sfp_lock_release>
 8009534:	230c      	movs	r3, #12
 8009536:	603b      	str	r3, [r7, #0]
 8009538:	e7ee      	b.n	8009518 <__sfp+0x60>
 800953a:	bf00      	nop
 800953c:	0800a2b8 	.word	0x0800a2b8
 8009540:	ffff0001 	.word	0xffff0001

08009544 <_fwalk_reent>:
 8009544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009548:	4606      	mov	r6, r0
 800954a:	4688      	mov	r8, r1
 800954c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009550:	2700      	movs	r7, #0
 8009552:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009556:	f1b9 0901 	subs.w	r9, r9, #1
 800955a:	d505      	bpl.n	8009568 <_fwalk_reent+0x24>
 800955c:	6824      	ldr	r4, [r4, #0]
 800955e:	2c00      	cmp	r4, #0
 8009560:	d1f7      	bne.n	8009552 <_fwalk_reent+0xe>
 8009562:	4638      	mov	r0, r7
 8009564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009568:	89ab      	ldrh	r3, [r5, #12]
 800956a:	2b01      	cmp	r3, #1
 800956c:	d907      	bls.n	800957e <_fwalk_reent+0x3a>
 800956e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009572:	3301      	adds	r3, #1
 8009574:	d003      	beq.n	800957e <_fwalk_reent+0x3a>
 8009576:	4629      	mov	r1, r5
 8009578:	4630      	mov	r0, r6
 800957a:	47c0      	blx	r8
 800957c:	4307      	orrs	r7, r0
 800957e:	3568      	adds	r5, #104	; 0x68
 8009580:	e7e9      	b.n	8009556 <_fwalk_reent+0x12>

08009582 <__retarget_lock_init_recursive>:
 8009582:	4770      	bx	lr

08009584 <__retarget_lock_acquire_recursive>:
 8009584:	4770      	bx	lr

08009586 <__retarget_lock_release_recursive>:
 8009586:	4770      	bx	lr

08009588 <_malloc_r>:
 8009588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958a:	1ccd      	adds	r5, r1, #3
 800958c:	f025 0503 	bic.w	r5, r5, #3
 8009590:	3508      	adds	r5, #8
 8009592:	2d0c      	cmp	r5, #12
 8009594:	bf38      	it	cc
 8009596:	250c      	movcc	r5, #12
 8009598:	2d00      	cmp	r5, #0
 800959a:	4606      	mov	r6, r0
 800959c:	db01      	blt.n	80095a2 <_malloc_r+0x1a>
 800959e:	42a9      	cmp	r1, r5
 80095a0:	d903      	bls.n	80095aa <_malloc_r+0x22>
 80095a2:	230c      	movs	r3, #12
 80095a4:	6033      	str	r3, [r6, #0]
 80095a6:	2000      	movs	r0, #0
 80095a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095aa:	f000 fda3 	bl	800a0f4 <__malloc_lock>
 80095ae:	4921      	ldr	r1, [pc, #132]	; (8009634 <_malloc_r+0xac>)
 80095b0:	680a      	ldr	r2, [r1, #0]
 80095b2:	4614      	mov	r4, r2
 80095b4:	b99c      	cbnz	r4, 80095de <_malloc_r+0x56>
 80095b6:	4f20      	ldr	r7, [pc, #128]	; (8009638 <_malloc_r+0xb0>)
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	b923      	cbnz	r3, 80095c6 <_malloc_r+0x3e>
 80095bc:	4621      	mov	r1, r4
 80095be:	4630      	mov	r0, r6
 80095c0:	f000 fb2a 	bl	8009c18 <_sbrk_r>
 80095c4:	6038      	str	r0, [r7, #0]
 80095c6:	4629      	mov	r1, r5
 80095c8:	4630      	mov	r0, r6
 80095ca:	f000 fb25 	bl	8009c18 <_sbrk_r>
 80095ce:	1c43      	adds	r3, r0, #1
 80095d0:	d123      	bne.n	800961a <_malloc_r+0x92>
 80095d2:	230c      	movs	r3, #12
 80095d4:	6033      	str	r3, [r6, #0]
 80095d6:	4630      	mov	r0, r6
 80095d8:	f000 fd92 	bl	800a100 <__malloc_unlock>
 80095dc:	e7e3      	b.n	80095a6 <_malloc_r+0x1e>
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	1b5b      	subs	r3, r3, r5
 80095e2:	d417      	bmi.n	8009614 <_malloc_r+0x8c>
 80095e4:	2b0b      	cmp	r3, #11
 80095e6:	d903      	bls.n	80095f0 <_malloc_r+0x68>
 80095e8:	6023      	str	r3, [r4, #0]
 80095ea:	441c      	add	r4, r3
 80095ec:	6025      	str	r5, [r4, #0]
 80095ee:	e004      	b.n	80095fa <_malloc_r+0x72>
 80095f0:	6863      	ldr	r3, [r4, #4]
 80095f2:	42a2      	cmp	r2, r4
 80095f4:	bf0c      	ite	eq
 80095f6:	600b      	streq	r3, [r1, #0]
 80095f8:	6053      	strne	r3, [r2, #4]
 80095fa:	4630      	mov	r0, r6
 80095fc:	f000 fd80 	bl	800a100 <__malloc_unlock>
 8009600:	f104 000b 	add.w	r0, r4, #11
 8009604:	1d23      	adds	r3, r4, #4
 8009606:	f020 0007 	bic.w	r0, r0, #7
 800960a:	1ac2      	subs	r2, r0, r3
 800960c:	d0cc      	beq.n	80095a8 <_malloc_r+0x20>
 800960e:	1a1b      	subs	r3, r3, r0
 8009610:	50a3      	str	r3, [r4, r2]
 8009612:	e7c9      	b.n	80095a8 <_malloc_r+0x20>
 8009614:	4622      	mov	r2, r4
 8009616:	6864      	ldr	r4, [r4, #4]
 8009618:	e7cc      	b.n	80095b4 <_malloc_r+0x2c>
 800961a:	1cc4      	adds	r4, r0, #3
 800961c:	f024 0403 	bic.w	r4, r4, #3
 8009620:	42a0      	cmp	r0, r4
 8009622:	d0e3      	beq.n	80095ec <_malloc_r+0x64>
 8009624:	1a21      	subs	r1, r4, r0
 8009626:	4630      	mov	r0, r6
 8009628:	f000 faf6 	bl	8009c18 <_sbrk_r>
 800962c:	3001      	adds	r0, #1
 800962e:	d1dd      	bne.n	80095ec <_malloc_r+0x64>
 8009630:	e7cf      	b.n	80095d2 <_malloc_r+0x4a>
 8009632:	bf00      	nop
 8009634:	2000048c 	.word	0x2000048c
 8009638:	20000490 	.word	0x20000490

0800963c <__sfputc_r>:
 800963c:	6893      	ldr	r3, [r2, #8]
 800963e:	3b01      	subs	r3, #1
 8009640:	2b00      	cmp	r3, #0
 8009642:	b410      	push	{r4}
 8009644:	6093      	str	r3, [r2, #8]
 8009646:	da08      	bge.n	800965a <__sfputc_r+0x1e>
 8009648:	6994      	ldr	r4, [r2, #24]
 800964a:	42a3      	cmp	r3, r4
 800964c:	db01      	blt.n	8009652 <__sfputc_r+0x16>
 800964e:	290a      	cmp	r1, #10
 8009650:	d103      	bne.n	800965a <__sfputc_r+0x1e>
 8009652:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009656:	f000 bb33 	b.w	8009cc0 <__swbuf_r>
 800965a:	6813      	ldr	r3, [r2, #0]
 800965c:	1c58      	adds	r0, r3, #1
 800965e:	6010      	str	r0, [r2, #0]
 8009660:	7019      	strb	r1, [r3, #0]
 8009662:	4608      	mov	r0, r1
 8009664:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009668:	4770      	bx	lr

0800966a <__sfputs_r>:
 800966a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800966c:	4606      	mov	r6, r0
 800966e:	460f      	mov	r7, r1
 8009670:	4614      	mov	r4, r2
 8009672:	18d5      	adds	r5, r2, r3
 8009674:	42ac      	cmp	r4, r5
 8009676:	d101      	bne.n	800967c <__sfputs_r+0x12>
 8009678:	2000      	movs	r0, #0
 800967a:	e007      	b.n	800968c <__sfputs_r+0x22>
 800967c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009680:	463a      	mov	r2, r7
 8009682:	4630      	mov	r0, r6
 8009684:	f7ff ffda 	bl	800963c <__sfputc_r>
 8009688:	1c43      	adds	r3, r0, #1
 800968a:	d1f3      	bne.n	8009674 <__sfputs_r+0xa>
 800968c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009690 <_vfiprintf_r>:
 8009690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009694:	460d      	mov	r5, r1
 8009696:	b09d      	sub	sp, #116	; 0x74
 8009698:	4614      	mov	r4, r2
 800969a:	4698      	mov	r8, r3
 800969c:	4606      	mov	r6, r0
 800969e:	b118      	cbz	r0, 80096a8 <_vfiprintf_r+0x18>
 80096a0:	6983      	ldr	r3, [r0, #24]
 80096a2:	b90b      	cbnz	r3, 80096a8 <_vfiprintf_r+0x18>
 80096a4:	f7ff fed0 	bl	8009448 <__sinit>
 80096a8:	4b89      	ldr	r3, [pc, #548]	; (80098d0 <_vfiprintf_r+0x240>)
 80096aa:	429d      	cmp	r5, r3
 80096ac:	d11b      	bne.n	80096e6 <_vfiprintf_r+0x56>
 80096ae:	6875      	ldr	r5, [r6, #4]
 80096b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096b2:	07d9      	lsls	r1, r3, #31
 80096b4:	d405      	bmi.n	80096c2 <_vfiprintf_r+0x32>
 80096b6:	89ab      	ldrh	r3, [r5, #12]
 80096b8:	059a      	lsls	r2, r3, #22
 80096ba:	d402      	bmi.n	80096c2 <_vfiprintf_r+0x32>
 80096bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096be:	f7ff ff61 	bl	8009584 <__retarget_lock_acquire_recursive>
 80096c2:	89ab      	ldrh	r3, [r5, #12]
 80096c4:	071b      	lsls	r3, r3, #28
 80096c6:	d501      	bpl.n	80096cc <_vfiprintf_r+0x3c>
 80096c8:	692b      	ldr	r3, [r5, #16]
 80096ca:	b9eb      	cbnz	r3, 8009708 <_vfiprintf_r+0x78>
 80096cc:	4629      	mov	r1, r5
 80096ce:	4630      	mov	r0, r6
 80096d0:	f000 fb5a 	bl	8009d88 <__swsetup_r>
 80096d4:	b1c0      	cbz	r0, 8009708 <_vfiprintf_r+0x78>
 80096d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096d8:	07dc      	lsls	r4, r3, #31
 80096da:	d50e      	bpl.n	80096fa <_vfiprintf_r+0x6a>
 80096dc:	f04f 30ff 	mov.w	r0, #4294967295
 80096e0:	b01d      	add	sp, #116	; 0x74
 80096e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096e6:	4b7b      	ldr	r3, [pc, #492]	; (80098d4 <_vfiprintf_r+0x244>)
 80096e8:	429d      	cmp	r5, r3
 80096ea:	d101      	bne.n	80096f0 <_vfiprintf_r+0x60>
 80096ec:	68b5      	ldr	r5, [r6, #8]
 80096ee:	e7df      	b.n	80096b0 <_vfiprintf_r+0x20>
 80096f0:	4b79      	ldr	r3, [pc, #484]	; (80098d8 <_vfiprintf_r+0x248>)
 80096f2:	429d      	cmp	r5, r3
 80096f4:	bf08      	it	eq
 80096f6:	68f5      	ldreq	r5, [r6, #12]
 80096f8:	e7da      	b.n	80096b0 <_vfiprintf_r+0x20>
 80096fa:	89ab      	ldrh	r3, [r5, #12]
 80096fc:	0598      	lsls	r0, r3, #22
 80096fe:	d4ed      	bmi.n	80096dc <_vfiprintf_r+0x4c>
 8009700:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009702:	f7ff ff40 	bl	8009586 <__retarget_lock_release_recursive>
 8009706:	e7e9      	b.n	80096dc <_vfiprintf_r+0x4c>
 8009708:	2300      	movs	r3, #0
 800970a:	9309      	str	r3, [sp, #36]	; 0x24
 800970c:	2320      	movs	r3, #32
 800970e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009712:	f8cd 800c 	str.w	r8, [sp, #12]
 8009716:	2330      	movs	r3, #48	; 0x30
 8009718:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80098dc <_vfiprintf_r+0x24c>
 800971c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009720:	f04f 0901 	mov.w	r9, #1
 8009724:	4623      	mov	r3, r4
 8009726:	469a      	mov	sl, r3
 8009728:	f813 2b01 	ldrb.w	r2, [r3], #1
 800972c:	b10a      	cbz	r2, 8009732 <_vfiprintf_r+0xa2>
 800972e:	2a25      	cmp	r2, #37	; 0x25
 8009730:	d1f9      	bne.n	8009726 <_vfiprintf_r+0x96>
 8009732:	ebba 0b04 	subs.w	fp, sl, r4
 8009736:	d00b      	beq.n	8009750 <_vfiprintf_r+0xc0>
 8009738:	465b      	mov	r3, fp
 800973a:	4622      	mov	r2, r4
 800973c:	4629      	mov	r1, r5
 800973e:	4630      	mov	r0, r6
 8009740:	f7ff ff93 	bl	800966a <__sfputs_r>
 8009744:	3001      	adds	r0, #1
 8009746:	f000 80aa 	beq.w	800989e <_vfiprintf_r+0x20e>
 800974a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800974c:	445a      	add	r2, fp
 800974e:	9209      	str	r2, [sp, #36]	; 0x24
 8009750:	f89a 3000 	ldrb.w	r3, [sl]
 8009754:	2b00      	cmp	r3, #0
 8009756:	f000 80a2 	beq.w	800989e <_vfiprintf_r+0x20e>
 800975a:	2300      	movs	r3, #0
 800975c:	f04f 32ff 	mov.w	r2, #4294967295
 8009760:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009764:	f10a 0a01 	add.w	sl, sl, #1
 8009768:	9304      	str	r3, [sp, #16]
 800976a:	9307      	str	r3, [sp, #28]
 800976c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009770:	931a      	str	r3, [sp, #104]	; 0x68
 8009772:	4654      	mov	r4, sl
 8009774:	2205      	movs	r2, #5
 8009776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800977a:	4858      	ldr	r0, [pc, #352]	; (80098dc <_vfiprintf_r+0x24c>)
 800977c:	f7f6 fd30 	bl	80001e0 <memchr>
 8009780:	9a04      	ldr	r2, [sp, #16]
 8009782:	b9d8      	cbnz	r0, 80097bc <_vfiprintf_r+0x12c>
 8009784:	06d1      	lsls	r1, r2, #27
 8009786:	bf44      	itt	mi
 8009788:	2320      	movmi	r3, #32
 800978a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800978e:	0713      	lsls	r3, r2, #28
 8009790:	bf44      	itt	mi
 8009792:	232b      	movmi	r3, #43	; 0x2b
 8009794:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009798:	f89a 3000 	ldrb.w	r3, [sl]
 800979c:	2b2a      	cmp	r3, #42	; 0x2a
 800979e:	d015      	beq.n	80097cc <_vfiprintf_r+0x13c>
 80097a0:	9a07      	ldr	r2, [sp, #28]
 80097a2:	4654      	mov	r4, sl
 80097a4:	2000      	movs	r0, #0
 80097a6:	f04f 0c0a 	mov.w	ip, #10
 80097aa:	4621      	mov	r1, r4
 80097ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097b0:	3b30      	subs	r3, #48	; 0x30
 80097b2:	2b09      	cmp	r3, #9
 80097b4:	d94e      	bls.n	8009854 <_vfiprintf_r+0x1c4>
 80097b6:	b1b0      	cbz	r0, 80097e6 <_vfiprintf_r+0x156>
 80097b8:	9207      	str	r2, [sp, #28]
 80097ba:	e014      	b.n	80097e6 <_vfiprintf_r+0x156>
 80097bc:	eba0 0308 	sub.w	r3, r0, r8
 80097c0:	fa09 f303 	lsl.w	r3, r9, r3
 80097c4:	4313      	orrs	r3, r2
 80097c6:	9304      	str	r3, [sp, #16]
 80097c8:	46a2      	mov	sl, r4
 80097ca:	e7d2      	b.n	8009772 <_vfiprintf_r+0xe2>
 80097cc:	9b03      	ldr	r3, [sp, #12]
 80097ce:	1d19      	adds	r1, r3, #4
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	9103      	str	r1, [sp, #12]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	bfbb      	ittet	lt
 80097d8:	425b      	neglt	r3, r3
 80097da:	f042 0202 	orrlt.w	r2, r2, #2
 80097de:	9307      	strge	r3, [sp, #28]
 80097e0:	9307      	strlt	r3, [sp, #28]
 80097e2:	bfb8      	it	lt
 80097e4:	9204      	strlt	r2, [sp, #16]
 80097e6:	7823      	ldrb	r3, [r4, #0]
 80097e8:	2b2e      	cmp	r3, #46	; 0x2e
 80097ea:	d10c      	bne.n	8009806 <_vfiprintf_r+0x176>
 80097ec:	7863      	ldrb	r3, [r4, #1]
 80097ee:	2b2a      	cmp	r3, #42	; 0x2a
 80097f0:	d135      	bne.n	800985e <_vfiprintf_r+0x1ce>
 80097f2:	9b03      	ldr	r3, [sp, #12]
 80097f4:	1d1a      	adds	r2, r3, #4
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	9203      	str	r2, [sp, #12]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	bfb8      	it	lt
 80097fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8009802:	3402      	adds	r4, #2
 8009804:	9305      	str	r3, [sp, #20]
 8009806:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80098ec <_vfiprintf_r+0x25c>
 800980a:	7821      	ldrb	r1, [r4, #0]
 800980c:	2203      	movs	r2, #3
 800980e:	4650      	mov	r0, sl
 8009810:	f7f6 fce6 	bl	80001e0 <memchr>
 8009814:	b140      	cbz	r0, 8009828 <_vfiprintf_r+0x198>
 8009816:	2340      	movs	r3, #64	; 0x40
 8009818:	eba0 000a 	sub.w	r0, r0, sl
 800981c:	fa03 f000 	lsl.w	r0, r3, r0
 8009820:	9b04      	ldr	r3, [sp, #16]
 8009822:	4303      	orrs	r3, r0
 8009824:	3401      	adds	r4, #1
 8009826:	9304      	str	r3, [sp, #16]
 8009828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800982c:	482c      	ldr	r0, [pc, #176]	; (80098e0 <_vfiprintf_r+0x250>)
 800982e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009832:	2206      	movs	r2, #6
 8009834:	f7f6 fcd4 	bl	80001e0 <memchr>
 8009838:	2800      	cmp	r0, #0
 800983a:	d03f      	beq.n	80098bc <_vfiprintf_r+0x22c>
 800983c:	4b29      	ldr	r3, [pc, #164]	; (80098e4 <_vfiprintf_r+0x254>)
 800983e:	bb1b      	cbnz	r3, 8009888 <_vfiprintf_r+0x1f8>
 8009840:	9b03      	ldr	r3, [sp, #12]
 8009842:	3307      	adds	r3, #7
 8009844:	f023 0307 	bic.w	r3, r3, #7
 8009848:	3308      	adds	r3, #8
 800984a:	9303      	str	r3, [sp, #12]
 800984c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800984e:	443b      	add	r3, r7
 8009850:	9309      	str	r3, [sp, #36]	; 0x24
 8009852:	e767      	b.n	8009724 <_vfiprintf_r+0x94>
 8009854:	fb0c 3202 	mla	r2, ip, r2, r3
 8009858:	460c      	mov	r4, r1
 800985a:	2001      	movs	r0, #1
 800985c:	e7a5      	b.n	80097aa <_vfiprintf_r+0x11a>
 800985e:	2300      	movs	r3, #0
 8009860:	3401      	adds	r4, #1
 8009862:	9305      	str	r3, [sp, #20]
 8009864:	4619      	mov	r1, r3
 8009866:	f04f 0c0a 	mov.w	ip, #10
 800986a:	4620      	mov	r0, r4
 800986c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009870:	3a30      	subs	r2, #48	; 0x30
 8009872:	2a09      	cmp	r2, #9
 8009874:	d903      	bls.n	800987e <_vfiprintf_r+0x1ee>
 8009876:	2b00      	cmp	r3, #0
 8009878:	d0c5      	beq.n	8009806 <_vfiprintf_r+0x176>
 800987a:	9105      	str	r1, [sp, #20]
 800987c:	e7c3      	b.n	8009806 <_vfiprintf_r+0x176>
 800987e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009882:	4604      	mov	r4, r0
 8009884:	2301      	movs	r3, #1
 8009886:	e7f0      	b.n	800986a <_vfiprintf_r+0x1da>
 8009888:	ab03      	add	r3, sp, #12
 800988a:	9300      	str	r3, [sp, #0]
 800988c:	462a      	mov	r2, r5
 800988e:	4b16      	ldr	r3, [pc, #88]	; (80098e8 <_vfiprintf_r+0x258>)
 8009890:	a904      	add	r1, sp, #16
 8009892:	4630      	mov	r0, r6
 8009894:	f3af 8000 	nop.w
 8009898:	4607      	mov	r7, r0
 800989a:	1c78      	adds	r0, r7, #1
 800989c:	d1d6      	bne.n	800984c <_vfiprintf_r+0x1bc>
 800989e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098a0:	07d9      	lsls	r1, r3, #31
 80098a2:	d405      	bmi.n	80098b0 <_vfiprintf_r+0x220>
 80098a4:	89ab      	ldrh	r3, [r5, #12]
 80098a6:	059a      	lsls	r2, r3, #22
 80098a8:	d402      	bmi.n	80098b0 <_vfiprintf_r+0x220>
 80098aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098ac:	f7ff fe6b 	bl	8009586 <__retarget_lock_release_recursive>
 80098b0:	89ab      	ldrh	r3, [r5, #12]
 80098b2:	065b      	lsls	r3, r3, #25
 80098b4:	f53f af12 	bmi.w	80096dc <_vfiprintf_r+0x4c>
 80098b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098ba:	e711      	b.n	80096e0 <_vfiprintf_r+0x50>
 80098bc:	ab03      	add	r3, sp, #12
 80098be:	9300      	str	r3, [sp, #0]
 80098c0:	462a      	mov	r2, r5
 80098c2:	4b09      	ldr	r3, [pc, #36]	; (80098e8 <_vfiprintf_r+0x258>)
 80098c4:	a904      	add	r1, sp, #16
 80098c6:	4630      	mov	r0, r6
 80098c8:	f000 f880 	bl	80099cc <_printf_i>
 80098cc:	e7e4      	b.n	8009898 <_vfiprintf_r+0x208>
 80098ce:	bf00      	nop
 80098d0:	0800a2dc 	.word	0x0800a2dc
 80098d4:	0800a2fc 	.word	0x0800a2fc
 80098d8:	0800a2bc 	.word	0x0800a2bc
 80098dc:	0800a31c 	.word	0x0800a31c
 80098e0:	0800a326 	.word	0x0800a326
 80098e4:	00000000 	.word	0x00000000
 80098e8:	0800966b 	.word	0x0800966b
 80098ec:	0800a322 	.word	0x0800a322

080098f0 <_printf_common>:
 80098f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098f4:	4616      	mov	r6, r2
 80098f6:	4699      	mov	r9, r3
 80098f8:	688a      	ldr	r2, [r1, #8]
 80098fa:	690b      	ldr	r3, [r1, #16]
 80098fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009900:	4293      	cmp	r3, r2
 8009902:	bfb8      	it	lt
 8009904:	4613      	movlt	r3, r2
 8009906:	6033      	str	r3, [r6, #0]
 8009908:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800990c:	4607      	mov	r7, r0
 800990e:	460c      	mov	r4, r1
 8009910:	b10a      	cbz	r2, 8009916 <_printf_common+0x26>
 8009912:	3301      	adds	r3, #1
 8009914:	6033      	str	r3, [r6, #0]
 8009916:	6823      	ldr	r3, [r4, #0]
 8009918:	0699      	lsls	r1, r3, #26
 800991a:	bf42      	ittt	mi
 800991c:	6833      	ldrmi	r3, [r6, #0]
 800991e:	3302      	addmi	r3, #2
 8009920:	6033      	strmi	r3, [r6, #0]
 8009922:	6825      	ldr	r5, [r4, #0]
 8009924:	f015 0506 	ands.w	r5, r5, #6
 8009928:	d106      	bne.n	8009938 <_printf_common+0x48>
 800992a:	f104 0a19 	add.w	sl, r4, #25
 800992e:	68e3      	ldr	r3, [r4, #12]
 8009930:	6832      	ldr	r2, [r6, #0]
 8009932:	1a9b      	subs	r3, r3, r2
 8009934:	42ab      	cmp	r3, r5
 8009936:	dc26      	bgt.n	8009986 <_printf_common+0x96>
 8009938:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800993c:	1e13      	subs	r3, r2, #0
 800993e:	6822      	ldr	r2, [r4, #0]
 8009940:	bf18      	it	ne
 8009942:	2301      	movne	r3, #1
 8009944:	0692      	lsls	r2, r2, #26
 8009946:	d42b      	bmi.n	80099a0 <_printf_common+0xb0>
 8009948:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800994c:	4649      	mov	r1, r9
 800994e:	4638      	mov	r0, r7
 8009950:	47c0      	blx	r8
 8009952:	3001      	adds	r0, #1
 8009954:	d01e      	beq.n	8009994 <_printf_common+0xa4>
 8009956:	6823      	ldr	r3, [r4, #0]
 8009958:	68e5      	ldr	r5, [r4, #12]
 800995a:	6832      	ldr	r2, [r6, #0]
 800995c:	f003 0306 	and.w	r3, r3, #6
 8009960:	2b04      	cmp	r3, #4
 8009962:	bf08      	it	eq
 8009964:	1aad      	subeq	r5, r5, r2
 8009966:	68a3      	ldr	r3, [r4, #8]
 8009968:	6922      	ldr	r2, [r4, #16]
 800996a:	bf0c      	ite	eq
 800996c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009970:	2500      	movne	r5, #0
 8009972:	4293      	cmp	r3, r2
 8009974:	bfc4      	itt	gt
 8009976:	1a9b      	subgt	r3, r3, r2
 8009978:	18ed      	addgt	r5, r5, r3
 800997a:	2600      	movs	r6, #0
 800997c:	341a      	adds	r4, #26
 800997e:	42b5      	cmp	r5, r6
 8009980:	d11a      	bne.n	80099b8 <_printf_common+0xc8>
 8009982:	2000      	movs	r0, #0
 8009984:	e008      	b.n	8009998 <_printf_common+0xa8>
 8009986:	2301      	movs	r3, #1
 8009988:	4652      	mov	r2, sl
 800998a:	4649      	mov	r1, r9
 800998c:	4638      	mov	r0, r7
 800998e:	47c0      	blx	r8
 8009990:	3001      	adds	r0, #1
 8009992:	d103      	bne.n	800999c <_printf_common+0xac>
 8009994:	f04f 30ff 	mov.w	r0, #4294967295
 8009998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800999c:	3501      	adds	r5, #1
 800999e:	e7c6      	b.n	800992e <_printf_common+0x3e>
 80099a0:	18e1      	adds	r1, r4, r3
 80099a2:	1c5a      	adds	r2, r3, #1
 80099a4:	2030      	movs	r0, #48	; 0x30
 80099a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80099aa:	4422      	add	r2, r4
 80099ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80099b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099b4:	3302      	adds	r3, #2
 80099b6:	e7c7      	b.n	8009948 <_printf_common+0x58>
 80099b8:	2301      	movs	r3, #1
 80099ba:	4622      	mov	r2, r4
 80099bc:	4649      	mov	r1, r9
 80099be:	4638      	mov	r0, r7
 80099c0:	47c0      	blx	r8
 80099c2:	3001      	adds	r0, #1
 80099c4:	d0e6      	beq.n	8009994 <_printf_common+0xa4>
 80099c6:	3601      	adds	r6, #1
 80099c8:	e7d9      	b.n	800997e <_printf_common+0x8e>
	...

080099cc <_printf_i>:
 80099cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099d0:	460c      	mov	r4, r1
 80099d2:	4691      	mov	r9, r2
 80099d4:	7e27      	ldrb	r7, [r4, #24]
 80099d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80099d8:	2f78      	cmp	r7, #120	; 0x78
 80099da:	4680      	mov	r8, r0
 80099dc:	469a      	mov	sl, r3
 80099de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099e2:	d807      	bhi.n	80099f4 <_printf_i+0x28>
 80099e4:	2f62      	cmp	r7, #98	; 0x62
 80099e6:	d80a      	bhi.n	80099fe <_printf_i+0x32>
 80099e8:	2f00      	cmp	r7, #0
 80099ea:	f000 80d8 	beq.w	8009b9e <_printf_i+0x1d2>
 80099ee:	2f58      	cmp	r7, #88	; 0x58
 80099f0:	f000 80a3 	beq.w	8009b3a <_printf_i+0x16e>
 80099f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80099f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80099fc:	e03a      	b.n	8009a74 <_printf_i+0xa8>
 80099fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a02:	2b15      	cmp	r3, #21
 8009a04:	d8f6      	bhi.n	80099f4 <_printf_i+0x28>
 8009a06:	a001      	add	r0, pc, #4	; (adr r0, 8009a0c <_printf_i+0x40>)
 8009a08:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009a0c:	08009a65 	.word	0x08009a65
 8009a10:	08009a79 	.word	0x08009a79
 8009a14:	080099f5 	.word	0x080099f5
 8009a18:	080099f5 	.word	0x080099f5
 8009a1c:	080099f5 	.word	0x080099f5
 8009a20:	080099f5 	.word	0x080099f5
 8009a24:	08009a79 	.word	0x08009a79
 8009a28:	080099f5 	.word	0x080099f5
 8009a2c:	080099f5 	.word	0x080099f5
 8009a30:	080099f5 	.word	0x080099f5
 8009a34:	080099f5 	.word	0x080099f5
 8009a38:	08009b85 	.word	0x08009b85
 8009a3c:	08009aa9 	.word	0x08009aa9
 8009a40:	08009b67 	.word	0x08009b67
 8009a44:	080099f5 	.word	0x080099f5
 8009a48:	080099f5 	.word	0x080099f5
 8009a4c:	08009ba7 	.word	0x08009ba7
 8009a50:	080099f5 	.word	0x080099f5
 8009a54:	08009aa9 	.word	0x08009aa9
 8009a58:	080099f5 	.word	0x080099f5
 8009a5c:	080099f5 	.word	0x080099f5
 8009a60:	08009b6f 	.word	0x08009b6f
 8009a64:	680b      	ldr	r3, [r1, #0]
 8009a66:	1d1a      	adds	r2, r3, #4
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	600a      	str	r2, [r1, #0]
 8009a6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009a70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a74:	2301      	movs	r3, #1
 8009a76:	e0a3      	b.n	8009bc0 <_printf_i+0x1f4>
 8009a78:	6825      	ldr	r5, [r4, #0]
 8009a7a:	6808      	ldr	r0, [r1, #0]
 8009a7c:	062e      	lsls	r6, r5, #24
 8009a7e:	f100 0304 	add.w	r3, r0, #4
 8009a82:	d50a      	bpl.n	8009a9a <_printf_i+0xce>
 8009a84:	6805      	ldr	r5, [r0, #0]
 8009a86:	600b      	str	r3, [r1, #0]
 8009a88:	2d00      	cmp	r5, #0
 8009a8a:	da03      	bge.n	8009a94 <_printf_i+0xc8>
 8009a8c:	232d      	movs	r3, #45	; 0x2d
 8009a8e:	426d      	negs	r5, r5
 8009a90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a94:	485e      	ldr	r0, [pc, #376]	; (8009c10 <_printf_i+0x244>)
 8009a96:	230a      	movs	r3, #10
 8009a98:	e019      	b.n	8009ace <_printf_i+0x102>
 8009a9a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009a9e:	6805      	ldr	r5, [r0, #0]
 8009aa0:	600b      	str	r3, [r1, #0]
 8009aa2:	bf18      	it	ne
 8009aa4:	b22d      	sxthne	r5, r5
 8009aa6:	e7ef      	b.n	8009a88 <_printf_i+0xbc>
 8009aa8:	680b      	ldr	r3, [r1, #0]
 8009aaa:	6825      	ldr	r5, [r4, #0]
 8009aac:	1d18      	adds	r0, r3, #4
 8009aae:	6008      	str	r0, [r1, #0]
 8009ab0:	0628      	lsls	r0, r5, #24
 8009ab2:	d501      	bpl.n	8009ab8 <_printf_i+0xec>
 8009ab4:	681d      	ldr	r5, [r3, #0]
 8009ab6:	e002      	b.n	8009abe <_printf_i+0xf2>
 8009ab8:	0669      	lsls	r1, r5, #25
 8009aba:	d5fb      	bpl.n	8009ab4 <_printf_i+0xe8>
 8009abc:	881d      	ldrh	r5, [r3, #0]
 8009abe:	4854      	ldr	r0, [pc, #336]	; (8009c10 <_printf_i+0x244>)
 8009ac0:	2f6f      	cmp	r7, #111	; 0x6f
 8009ac2:	bf0c      	ite	eq
 8009ac4:	2308      	moveq	r3, #8
 8009ac6:	230a      	movne	r3, #10
 8009ac8:	2100      	movs	r1, #0
 8009aca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ace:	6866      	ldr	r6, [r4, #4]
 8009ad0:	60a6      	str	r6, [r4, #8]
 8009ad2:	2e00      	cmp	r6, #0
 8009ad4:	bfa2      	ittt	ge
 8009ad6:	6821      	ldrge	r1, [r4, #0]
 8009ad8:	f021 0104 	bicge.w	r1, r1, #4
 8009adc:	6021      	strge	r1, [r4, #0]
 8009ade:	b90d      	cbnz	r5, 8009ae4 <_printf_i+0x118>
 8009ae0:	2e00      	cmp	r6, #0
 8009ae2:	d04d      	beq.n	8009b80 <_printf_i+0x1b4>
 8009ae4:	4616      	mov	r6, r2
 8009ae6:	fbb5 f1f3 	udiv	r1, r5, r3
 8009aea:	fb03 5711 	mls	r7, r3, r1, r5
 8009aee:	5dc7      	ldrb	r7, [r0, r7]
 8009af0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009af4:	462f      	mov	r7, r5
 8009af6:	42bb      	cmp	r3, r7
 8009af8:	460d      	mov	r5, r1
 8009afa:	d9f4      	bls.n	8009ae6 <_printf_i+0x11a>
 8009afc:	2b08      	cmp	r3, #8
 8009afe:	d10b      	bne.n	8009b18 <_printf_i+0x14c>
 8009b00:	6823      	ldr	r3, [r4, #0]
 8009b02:	07df      	lsls	r7, r3, #31
 8009b04:	d508      	bpl.n	8009b18 <_printf_i+0x14c>
 8009b06:	6923      	ldr	r3, [r4, #16]
 8009b08:	6861      	ldr	r1, [r4, #4]
 8009b0a:	4299      	cmp	r1, r3
 8009b0c:	bfde      	ittt	le
 8009b0e:	2330      	movle	r3, #48	; 0x30
 8009b10:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b14:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b18:	1b92      	subs	r2, r2, r6
 8009b1a:	6122      	str	r2, [r4, #16]
 8009b1c:	f8cd a000 	str.w	sl, [sp]
 8009b20:	464b      	mov	r3, r9
 8009b22:	aa03      	add	r2, sp, #12
 8009b24:	4621      	mov	r1, r4
 8009b26:	4640      	mov	r0, r8
 8009b28:	f7ff fee2 	bl	80098f0 <_printf_common>
 8009b2c:	3001      	adds	r0, #1
 8009b2e:	d14c      	bne.n	8009bca <_printf_i+0x1fe>
 8009b30:	f04f 30ff 	mov.w	r0, #4294967295
 8009b34:	b004      	add	sp, #16
 8009b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b3a:	4835      	ldr	r0, [pc, #212]	; (8009c10 <_printf_i+0x244>)
 8009b3c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009b40:	6823      	ldr	r3, [r4, #0]
 8009b42:	680e      	ldr	r6, [r1, #0]
 8009b44:	061f      	lsls	r7, r3, #24
 8009b46:	f856 5b04 	ldr.w	r5, [r6], #4
 8009b4a:	600e      	str	r6, [r1, #0]
 8009b4c:	d514      	bpl.n	8009b78 <_printf_i+0x1ac>
 8009b4e:	07d9      	lsls	r1, r3, #31
 8009b50:	bf44      	itt	mi
 8009b52:	f043 0320 	orrmi.w	r3, r3, #32
 8009b56:	6023      	strmi	r3, [r4, #0]
 8009b58:	b91d      	cbnz	r5, 8009b62 <_printf_i+0x196>
 8009b5a:	6823      	ldr	r3, [r4, #0]
 8009b5c:	f023 0320 	bic.w	r3, r3, #32
 8009b60:	6023      	str	r3, [r4, #0]
 8009b62:	2310      	movs	r3, #16
 8009b64:	e7b0      	b.n	8009ac8 <_printf_i+0xfc>
 8009b66:	6823      	ldr	r3, [r4, #0]
 8009b68:	f043 0320 	orr.w	r3, r3, #32
 8009b6c:	6023      	str	r3, [r4, #0]
 8009b6e:	2378      	movs	r3, #120	; 0x78
 8009b70:	4828      	ldr	r0, [pc, #160]	; (8009c14 <_printf_i+0x248>)
 8009b72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b76:	e7e3      	b.n	8009b40 <_printf_i+0x174>
 8009b78:	065e      	lsls	r6, r3, #25
 8009b7a:	bf48      	it	mi
 8009b7c:	b2ad      	uxthmi	r5, r5
 8009b7e:	e7e6      	b.n	8009b4e <_printf_i+0x182>
 8009b80:	4616      	mov	r6, r2
 8009b82:	e7bb      	b.n	8009afc <_printf_i+0x130>
 8009b84:	680b      	ldr	r3, [r1, #0]
 8009b86:	6826      	ldr	r6, [r4, #0]
 8009b88:	6960      	ldr	r0, [r4, #20]
 8009b8a:	1d1d      	adds	r5, r3, #4
 8009b8c:	600d      	str	r5, [r1, #0]
 8009b8e:	0635      	lsls	r5, r6, #24
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	d501      	bpl.n	8009b98 <_printf_i+0x1cc>
 8009b94:	6018      	str	r0, [r3, #0]
 8009b96:	e002      	b.n	8009b9e <_printf_i+0x1d2>
 8009b98:	0671      	lsls	r1, r6, #25
 8009b9a:	d5fb      	bpl.n	8009b94 <_printf_i+0x1c8>
 8009b9c:	8018      	strh	r0, [r3, #0]
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	6123      	str	r3, [r4, #16]
 8009ba2:	4616      	mov	r6, r2
 8009ba4:	e7ba      	b.n	8009b1c <_printf_i+0x150>
 8009ba6:	680b      	ldr	r3, [r1, #0]
 8009ba8:	1d1a      	adds	r2, r3, #4
 8009baa:	600a      	str	r2, [r1, #0]
 8009bac:	681e      	ldr	r6, [r3, #0]
 8009bae:	6862      	ldr	r2, [r4, #4]
 8009bb0:	2100      	movs	r1, #0
 8009bb2:	4630      	mov	r0, r6
 8009bb4:	f7f6 fb14 	bl	80001e0 <memchr>
 8009bb8:	b108      	cbz	r0, 8009bbe <_printf_i+0x1f2>
 8009bba:	1b80      	subs	r0, r0, r6
 8009bbc:	6060      	str	r0, [r4, #4]
 8009bbe:	6863      	ldr	r3, [r4, #4]
 8009bc0:	6123      	str	r3, [r4, #16]
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bc8:	e7a8      	b.n	8009b1c <_printf_i+0x150>
 8009bca:	6923      	ldr	r3, [r4, #16]
 8009bcc:	4632      	mov	r2, r6
 8009bce:	4649      	mov	r1, r9
 8009bd0:	4640      	mov	r0, r8
 8009bd2:	47d0      	blx	sl
 8009bd4:	3001      	adds	r0, #1
 8009bd6:	d0ab      	beq.n	8009b30 <_printf_i+0x164>
 8009bd8:	6823      	ldr	r3, [r4, #0]
 8009bda:	079b      	lsls	r3, r3, #30
 8009bdc:	d413      	bmi.n	8009c06 <_printf_i+0x23a>
 8009bde:	68e0      	ldr	r0, [r4, #12]
 8009be0:	9b03      	ldr	r3, [sp, #12]
 8009be2:	4298      	cmp	r0, r3
 8009be4:	bfb8      	it	lt
 8009be6:	4618      	movlt	r0, r3
 8009be8:	e7a4      	b.n	8009b34 <_printf_i+0x168>
 8009bea:	2301      	movs	r3, #1
 8009bec:	4632      	mov	r2, r6
 8009bee:	4649      	mov	r1, r9
 8009bf0:	4640      	mov	r0, r8
 8009bf2:	47d0      	blx	sl
 8009bf4:	3001      	adds	r0, #1
 8009bf6:	d09b      	beq.n	8009b30 <_printf_i+0x164>
 8009bf8:	3501      	adds	r5, #1
 8009bfa:	68e3      	ldr	r3, [r4, #12]
 8009bfc:	9903      	ldr	r1, [sp, #12]
 8009bfe:	1a5b      	subs	r3, r3, r1
 8009c00:	42ab      	cmp	r3, r5
 8009c02:	dcf2      	bgt.n	8009bea <_printf_i+0x21e>
 8009c04:	e7eb      	b.n	8009bde <_printf_i+0x212>
 8009c06:	2500      	movs	r5, #0
 8009c08:	f104 0619 	add.w	r6, r4, #25
 8009c0c:	e7f5      	b.n	8009bfa <_printf_i+0x22e>
 8009c0e:	bf00      	nop
 8009c10:	0800a32d 	.word	0x0800a32d
 8009c14:	0800a33e 	.word	0x0800a33e

08009c18 <_sbrk_r>:
 8009c18:	b538      	push	{r3, r4, r5, lr}
 8009c1a:	4d06      	ldr	r5, [pc, #24]	; (8009c34 <_sbrk_r+0x1c>)
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	4604      	mov	r4, r0
 8009c20:	4608      	mov	r0, r1
 8009c22:	602b      	str	r3, [r5, #0]
 8009c24:	f7f7 feb8 	bl	8001998 <_sbrk>
 8009c28:	1c43      	adds	r3, r0, #1
 8009c2a:	d102      	bne.n	8009c32 <_sbrk_r+0x1a>
 8009c2c:	682b      	ldr	r3, [r5, #0]
 8009c2e:	b103      	cbz	r3, 8009c32 <_sbrk_r+0x1a>
 8009c30:	6023      	str	r3, [r4, #0]
 8009c32:	bd38      	pop	{r3, r4, r5, pc}
 8009c34:	20002eac 	.word	0x20002eac

08009c38 <__sread>:
 8009c38:	b510      	push	{r4, lr}
 8009c3a:	460c      	mov	r4, r1
 8009c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c40:	f000 fab4 	bl	800a1ac <_read_r>
 8009c44:	2800      	cmp	r0, #0
 8009c46:	bfab      	itete	ge
 8009c48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c4a:	89a3      	ldrhlt	r3, [r4, #12]
 8009c4c:	181b      	addge	r3, r3, r0
 8009c4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c52:	bfac      	ite	ge
 8009c54:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c56:	81a3      	strhlt	r3, [r4, #12]
 8009c58:	bd10      	pop	{r4, pc}

08009c5a <__swrite>:
 8009c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c5e:	461f      	mov	r7, r3
 8009c60:	898b      	ldrh	r3, [r1, #12]
 8009c62:	05db      	lsls	r3, r3, #23
 8009c64:	4605      	mov	r5, r0
 8009c66:	460c      	mov	r4, r1
 8009c68:	4616      	mov	r6, r2
 8009c6a:	d505      	bpl.n	8009c78 <__swrite+0x1e>
 8009c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c70:	2302      	movs	r3, #2
 8009c72:	2200      	movs	r2, #0
 8009c74:	f000 f9c8 	bl	800a008 <_lseek_r>
 8009c78:	89a3      	ldrh	r3, [r4, #12]
 8009c7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c82:	81a3      	strh	r3, [r4, #12]
 8009c84:	4632      	mov	r2, r6
 8009c86:	463b      	mov	r3, r7
 8009c88:	4628      	mov	r0, r5
 8009c8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c8e:	f000 b869 	b.w	8009d64 <_write_r>

08009c92 <__sseek>:
 8009c92:	b510      	push	{r4, lr}
 8009c94:	460c      	mov	r4, r1
 8009c96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c9a:	f000 f9b5 	bl	800a008 <_lseek_r>
 8009c9e:	1c43      	adds	r3, r0, #1
 8009ca0:	89a3      	ldrh	r3, [r4, #12]
 8009ca2:	bf15      	itete	ne
 8009ca4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ca6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009caa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009cae:	81a3      	strheq	r3, [r4, #12]
 8009cb0:	bf18      	it	ne
 8009cb2:	81a3      	strhne	r3, [r4, #12]
 8009cb4:	bd10      	pop	{r4, pc}

08009cb6 <__sclose>:
 8009cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cba:	f000 b8d3 	b.w	8009e64 <_close_r>
	...

08009cc0 <__swbuf_r>:
 8009cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cc2:	460e      	mov	r6, r1
 8009cc4:	4614      	mov	r4, r2
 8009cc6:	4605      	mov	r5, r0
 8009cc8:	b118      	cbz	r0, 8009cd2 <__swbuf_r+0x12>
 8009cca:	6983      	ldr	r3, [r0, #24]
 8009ccc:	b90b      	cbnz	r3, 8009cd2 <__swbuf_r+0x12>
 8009cce:	f7ff fbbb 	bl	8009448 <__sinit>
 8009cd2:	4b21      	ldr	r3, [pc, #132]	; (8009d58 <__swbuf_r+0x98>)
 8009cd4:	429c      	cmp	r4, r3
 8009cd6:	d12b      	bne.n	8009d30 <__swbuf_r+0x70>
 8009cd8:	686c      	ldr	r4, [r5, #4]
 8009cda:	69a3      	ldr	r3, [r4, #24]
 8009cdc:	60a3      	str	r3, [r4, #8]
 8009cde:	89a3      	ldrh	r3, [r4, #12]
 8009ce0:	071a      	lsls	r2, r3, #28
 8009ce2:	d52f      	bpl.n	8009d44 <__swbuf_r+0x84>
 8009ce4:	6923      	ldr	r3, [r4, #16]
 8009ce6:	b36b      	cbz	r3, 8009d44 <__swbuf_r+0x84>
 8009ce8:	6923      	ldr	r3, [r4, #16]
 8009cea:	6820      	ldr	r0, [r4, #0]
 8009cec:	1ac0      	subs	r0, r0, r3
 8009cee:	6963      	ldr	r3, [r4, #20]
 8009cf0:	b2f6      	uxtb	r6, r6
 8009cf2:	4283      	cmp	r3, r0
 8009cf4:	4637      	mov	r7, r6
 8009cf6:	dc04      	bgt.n	8009d02 <__swbuf_r+0x42>
 8009cf8:	4621      	mov	r1, r4
 8009cfa:	4628      	mov	r0, r5
 8009cfc:	f000 f948 	bl	8009f90 <_fflush_r>
 8009d00:	bb30      	cbnz	r0, 8009d50 <__swbuf_r+0x90>
 8009d02:	68a3      	ldr	r3, [r4, #8]
 8009d04:	3b01      	subs	r3, #1
 8009d06:	60a3      	str	r3, [r4, #8]
 8009d08:	6823      	ldr	r3, [r4, #0]
 8009d0a:	1c5a      	adds	r2, r3, #1
 8009d0c:	6022      	str	r2, [r4, #0]
 8009d0e:	701e      	strb	r6, [r3, #0]
 8009d10:	6963      	ldr	r3, [r4, #20]
 8009d12:	3001      	adds	r0, #1
 8009d14:	4283      	cmp	r3, r0
 8009d16:	d004      	beq.n	8009d22 <__swbuf_r+0x62>
 8009d18:	89a3      	ldrh	r3, [r4, #12]
 8009d1a:	07db      	lsls	r3, r3, #31
 8009d1c:	d506      	bpl.n	8009d2c <__swbuf_r+0x6c>
 8009d1e:	2e0a      	cmp	r6, #10
 8009d20:	d104      	bne.n	8009d2c <__swbuf_r+0x6c>
 8009d22:	4621      	mov	r1, r4
 8009d24:	4628      	mov	r0, r5
 8009d26:	f000 f933 	bl	8009f90 <_fflush_r>
 8009d2a:	b988      	cbnz	r0, 8009d50 <__swbuf_r+0x90>
 8009d2c:	4638      	mov	r0, r7
 8009d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d30:	4b0a      	ldr	r3, [pc, #40]	; (8009d5c <__swbuf_r+0x9c>)
 8009d32:	429c      	cmp	r4, r3
 8009d34:	d101      	bne.n	8009d3a <__swbuf_r+0x7a>
 8009d36:	68ac      	ldr	r4, [r5, #8]
 8009d38:	e7cf      	b.n	8009cda <__swbuf_r+0x1a>
 8009d3a:	4b09      	ldr	r3, [pc, #36]	; (8009d60 <__swbuf_r+0xa0>)
 8009d3c:	429c      	cmp	r4, r3
 8009d3e:	bf08      	it	eq
 8009d40:	68ec      	ldreq	r4, [r5, #12]
 8009d42:	e7ca      	b.n	8009cda <__swbuf_r+0x1a>
 8009d44:	4621      	mov	r1, r4
 8009d46:	4628      	mov	r0, r5
 8009d48:	f000 f81e 	bl	8009d88 <__swsetup_r>
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	d0cb      	beq.n	8009ce8 <__swbuf_r+0x28>
 8009d50:	f04f 37ff 	mov.w	r7, #4294967295
 8009d54:	e7ea      	b.n	8009d2c <__swbuf_r+0x6c>
 8009d56:	bf00      	nop
 8009d58:	0800a2dc 	.word	0x0800a2dc
 8009d5c:	0800a2fc 	.word	0x0800a2fc
 8009d60:	0800a2bc 	.word	0x0800a2bc

08009d64 <_write_r>:
 8009d64:	b538      	push	{r3, r4, r5, lr}
 8009d66:	4d07      	ldr	r5, [pc, #28]	; (8009d84 <_write_r+0x20>)
 8009d68:	4604      	mov	r4, r0
 8009d6a:	4608      	mov	r0, r1
 8009d6c:	4611      	mov	r1, r2
 8009d6e:	2200      	movs	r2, #0
 8009d70:	602a      	str	r2, [r5, #0]
 8009d72:	461a      	mov	r2, r3
 8009d74:	f7f7 fdcd 	bl	8001912 <_write>
 8009d78:	1c43      	adds	r3, r0, #1
 8009d7a:	d102      	bne.n	8009d82 <_write_r+0x1e>
 8009d7c:	682b      	ldr	r3, [r5, #0]
 8009d7e:	b103      	cbz	r3, 8009d82 <_write_r+0x1e>
 8009d80:	6023      	str	r3, [r4, #0]
 8009d82:	bd38      	pop	{r3, r4, r5, pc}
 8009d84:	20002eac 	.word	0x20002eac

08009d88 <__swsetup_r>:
 8009d88:	4b32      	ldr	r3, [pc, #200]	; (8009e54 <__swsetup_r+0xcc>)
 8009d8a:	b570      	push	{r4, r5, r6, lr}
 8009d8c:	681d      	ldr	r5, [r3, #0]
 8009d8e:	4606      	mov	r6, r0
 8009d90:	460c      	mov	r4, r1
 8009d92:	b125      	cbz	r5, 8009d9e <__swsetup_r+0x16>
 8009d94:	69ab      	ldr	r3, [r5, #24]
 8009d96:	b913      	cbnz	r3, 8009d9e <__swsetup_r+0x16>
 8009d98:	4628      	mov	r0, r5
 8009d9a:	f7ff fb55 	bl	8009448 <__sinit>
 8009d9e:	4b2e      	ldr	r3, [pc, #184]	; (8009e58 <__swsetup_r+0xd0>)
 8009da0:	429c      	cmp	r4, r3
 8009da2:	d10f      	bne.n	8009dc4 <__swsetup_r+0x3c>
 8009da4:	686c      	ldr	r4, [r5, #4]
 8009da6:	89a3      	ldrh	r3, [r4, #12]
 8009da8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009dac:	0719      	lsls	r1, r3, #28
 8009dae:	d42c      	bmi.n	8009e0a <__swsetup_r+0x82>
 8009db0:	06dd      	lsls	r5, r3, #27
 8009db2:	d411      	bmi.n	8009dd8 <__swsetup_r+0x50>
 8009db4:	2309      	movs	r3, #9
 8009db6:	6033      	str	r3, [r6, #0]
 8009db8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009dbc:	81a3      	strh	r3, [r4, #12]
 8009dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc2:	e03e      	b.n	8009e42 <__swsetup_r+0xba>
 8009dc4:	4b25      	ldr	r3, [pc, #148]	; (8009e5c <__swsetup_r+0xd4>)
 8009dc6:	429c      	cmp	r4, r3
 8009dc8:	d101      	bne.n	8009dce <__swsetup_r+0x46>
 8009dca:	68ac      	ldr	r4, [r5, #8]
 8009dcc:	e7eb      	b.n	8009da6 <__swsetup_r+0x1e>
 8009dce:	4b24      	ldr	r3, [pc, #144]	; (8009e60 <__swsetup_r+0xd8>)
 8009dd0:	429c      	cmp	r4, r3
 8009dd2:	bf08      	it	eq
 8009dd4:	68ec      	ldreq	r4, [r5, #12]
 8009dd6:	e7e6      	b.n	8009da6 <__swsetup_r+0x1e>
 8009dd8:	0758      	lsls	r0, r3, #29
 8009dda:	d512      	bpl.n	8009e02 <__swsetup_r+0x7a>
 8009ddc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dde:	b141      	cbz	r1, 8009df2 <__swsetup_r+0x6a>
 8009de0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009de4:	4299      	cmp	r1, r3
 8009de6:	d002      	beq.n	8009dee <__swsetup_r+0x66>
 8009de8:	4630      	mov	r0, r6
 8009dea:	f000 f98f 	bl	800a10c <_free_r>
 8009dee:	2300      	movs	r3, #0
 8009df0:	6363      	str	r3, [r4, #52]	; 0x34
 8009df2:	89a3      	ldrh	r3, [r4, #12]
 8009df4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009df8:	81a3      	strh	r3, [r4, #12]
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	6063      	str	r3, [r4, #4]
 8009dfe:	6923      	ldr	r3, [r4, #16]
 8009e00:	6023      	str	r3, [r4, #0]
 8009e02:	89a3      	ldrh	r3, [r4, #12]
 8009e04:	f043 0308 	orr.w	r3, r3, #8
 8009e08:	81a3      	strh	r3, [r4, #12]
 8009e0a:	6923      	ldr	r3, [r4, #16]
 8009e0c:	b94b      	cbnz	r3, 8009e22 <__swsetup_r+0x9a>
 8009e0e:	89a3      	ldrh	r3, [r4, #12]
 8009e10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e18:	d003      	beq.n	8009e22 <__swsetup_r+0x9a>
 8009e1a:	4621      	mov	r1, r4
 8009e1c:	4630      	mov	r0, r6
 8009e1e:	f000 f929 	bl	800a074 <__smakebuf_r>
 8009e22:	89a0      	ldrh	r0, [r4, #12]
 8009e24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e28:	f010 0301 	ands.w	r3, r0, #1
 8009e2c:	d00a      	beq.n	8009e44 <__swsetup_r+0xbc>
 8009e2e:	2300      	movs	r3, #0
 8009e30:	60a3      	str	r3, [r4, #8]
 8009e32:	6963      	ldr	r3, [r4, #20]
 8009e34:	425b      	negs	r3, r3
 8009e36:	61a3      	str	r3, [r4, #24]
 8009e38:	6923      	ldr	r3, [r4, #16]
 8009e3a:	b943      	cbnz	r3, 8009e4e <__swsetup_r+0xc6>
 8009e3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e40:	d1ba      	bne.n	8009db8 <__swsetup_r+0x30>
 8009e42:	bd70      	pop	{r4, r5, r6, pc}
 8009e44:	0781      	lsls	r1, r0, #30
 8009e46:	bf58      	it	pl
 8009e48:	6963      	ldrpl	r3, [r4, #20]
 8009e4a:	60a3      	str	r3, [r4, #8]
 8009e4c:	e7f4      	b.n	8009e38 <__swsetup_r+0xb0>
 8009e4e:	2000      	movs	r0, #0
 8009e50:	e7f7      	b.n	8009e42 <__swsetup_r+0xba>
 8009e52:	bf00      	nop
 8009e54:	200001bc 	.word	0x200001bc
 8009e58:	0800a2dc 	.word	0x0800a2dc
 8009e5c:	0800a2fc 	.word	0x0800a2fc
 8009e60:	0800a2bc 	.word	0x0800a2bc

08009e64 <_close_r>:
 8009e64:	b538      	push	{r3, r4, r5, lr}
 8009e66:	4d06      	ldr	r5, [pc, #24]	; (8009e80 <_close_r+0x1c>)
 8009e68:	2300      	movs	r3, #0
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	4608      	mov	r0, r1
 8009e6e:	602b      	str	r3, [r5, #0]
 8009e70:	f7f7 fd5e 	bl	8001930 <_close>
 8009e74:	1c43      	adds	r3, r0, #1
 8009e76:	d102      	bne.n	8009e7e <_close_r+0x1a>
 8009e78:	682b      	ldr	r3, [r5, #0]
 8009e7a:	b103      	cbz	r3, 8009e7e <_close_r+0x1a>
 8009e7c:	6023      	str	r3, [r4, #0]
 8009e7e:	bd38      	pop	{r3, r4, r5, pc}
 8009e80:	20002eac 	.word	0x20002eac

08009e84 <__sflush_r>:
 8009e84:	898a      	ldrh	r2, [r1, #12]
 8009e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e8a:	4605      	mov	r5, r0
 8009e8c:	0710      	lsls	r0, r2, #28
 8009e8e:	460c      	mov	r4, r1
 8009e90:	d458      	bmi.n	8009f44 <__sflush_r+0xc0>
 8009e92:	684b      	ldr	r3, [r1, #4]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	dc05      	bgt.n	8009ea4 <__sflush_r+0x20>
 8009e98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	dc02      	bgt.n	8009ea4 <__sflush_r+0x20>
 8009e9e:	2000      	movs	r0, #0
 8009ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ea4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ea6:	2e00      	cmp	r6, #0
 8009ea8:	d0f9      	beq.n	8009e9e <__sflush_r+0x1a>
 8009eaa:	2300      	movs	r3, #0
 8009eac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009eb0:	682f      	ldr	r7, [r5, #0]
 8009eb2:	602b      	str	r3, [r5, #0]
 8009eb4:	d032      	beq.n	8009f1c <__sflush_r+0x98>
 8009eb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009eb8:	89a3      	ldrh	r3, [r4, #12]
 8009eba:	075a      	lsls	r2, r3, #29
 8009ebc:	d505      	bpl.n	8009eca <__sflush_r+0x46>
 8009ebe:	6863      	ldr	r3, [r4, #4]
 8009ec0:	1ac0      	subs	r0, r0, r3
 8009ec2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ec4:	b10b      	cbz	r3, 8009eca <__sflush_r+0x46>
 8009ec6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ec8:	1ac0      	subs	r0, r0, r3
 8009eca:	2300      	movs	r3, #0
 8009ecc:	4602      	mov	r2, r0
 8009ece:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ed0:	6a21      	ldr	r1, [r4, #32]
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	47b0      	blx	r6
 8009ed6:	1c43      	adds	r3, r0, #1
 8009ed8:	89a3      	ldrh	r3, [r4, #12]
 8009eda:	d106      	bne.n	8009eea <__sflush_r+0x66>
 8009edc:	6829      	ldr	r1, [r5, #0]
 8009ede:	291d      	cmp	r1, #29
 8009ee0:	d82c      	bhi.n	8009f3c <__sflush_r+0xb8>
 8009ee2:	4a2a      	ldr	r2, [pc, #168]	; (8009f8c <__sflush_r+0x108>)
 8009ee4:	40ca      	lsrs	r2, r1
 8009ee6:	07d6      	lsls	r6, r2, #31
 8009ee8:	d528      	bpl.n	8009f3c <__sflush_r+0xb8>
 8009eea:	2200      	movs	r2, #0
 8009eec:	6062      	str	r2, [r4, #4]
 8009eee:	04d9      	lsls	r1, r3, #19
 8009ef0:	6922      	ldr	r2, [r4, #16]
 8009ef2:	6022      	str	r2, [r4, #0]
 8009ef4:	d504      	bpl.n	8009f00 <__sflush_r+0x7c>
 8009ef6:	1c42      	adds	r2, r0, #1
 8009ef8:	d101      	bne.n	8009efe <__sflush_r+0x7a>
 8009efa:	682b      	ldr	r3, [r5, #0]
 8009efc:	b903      	cbnz	r3, 8009f00 <__sflush_r+0x7c>
 8009efe:	6560      	str	r0, [r4, #84]	; 0x54
 8009f00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f02:	602f      	str	r7, [r5, #0]
 8009f04:	2900      	cmp	r1, #0
 8009f06:	d0ca      	beq.n	8009e9e <__sflush_r+0x1a>
 8009f08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f0c:	4299      	cmp	r1, r3
 8009f0e:	d002      	beq.n	8009f16 <__sflush_r+0x92>
 8009f10:	4628      	mov	r0, r5
 8009f12:	f000 f8fb 	bl	800a10c <_free_r>
 8009f16:	2000      	movs	r0, #0
 8009f18:	6360      	str	r0, [r4, #52]	; 0x34
 8009f1a:	e7c1      	b.n	8009ea0 <__sflush_r+0x1c>
 8009f1c:	6a21      	ldr	r1, [r4, #32]
 8009f1e:	2301      	movs	r3, #1
 8009f20:	4628      	mov	r0, r5
 8009f22:	47b0      	blx	r6
 8009f24:	1c41      	adds	r1, r0, #1
 8009f26:	d1c7      	bne.n	8009eb8 <__sflush_r+0x34>
 8009f28:	682b      	ldr	r3, [r5, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d0c4      	beq.n	8009eb8 <__sflush_r+0x34>
 8009f2e:	2b1d      	cmp	r3, #29
 8009f30:	d001      	beq.n	8009f36 <__sflush_r+0xb2>
 8009f32:	2b16      	cmp	r3, #22
 8009f34:	d101      	bne.n	8009f3a <__sflush_r+0xb6>
 8009f36:	602f      	str	r7, [r5, #0]
 8009f38:	e7b1      	b.n	8009e9e <__sflush_r+0x1a>
 8009f3a:	89a3      	ldrh	r3, [r4, #12]
 8009f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f40:	81a3      	strh	r3, [r4, #12]
 8009f42:	e7ad      	b.n	8009ea0 <__sflush_r+0x1c>
 8009f44:	690f      	ldr	r7, [r1, #16]
 8009f46:	2f00      	cmp	r7, #0
 8009f48:	d0a9      	beq.n	8009e9e <__sflush_r+0x1a>
 8009f4a:	0793      	lsls	r3, r2, #30
 8009f4c:	680e      	ldr	r6, [r1, #0]
 8009f4e:	bf08      	it	eq
 8009f50:	694b      	ldreq	r3, [r1, #20]
 8009f52:	600f      	str	r7, [r1, #0]
 8009f54:	bf18      	it	ne
 8009f56:	2300      	movne	r3, #0
 8009f58:	eba6 0807 	sub.w	r8, r6, r7
 8009f5c:	608b      	str	r3, [r1, #8]
 8009f5e:	f1b8 0f00 	cmp.w	r8, #0
 8009f62:	dd9c      	ble.n	8009e9e <__sflush_r+0x1a>
 8009f64:	6a21      	ldr	r1, [r4, #32]
 8009f66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f68:	4643      	mov	r3, r8
 8009f6a:	463a      	mov	r2, r7
 8009f6c:	4628      	mov	r0, r5
 8009f6e:	47b0      	blx	r6
 8009f70:	2800      	cmp	r0, #0
 8009f72:	dc06      	bgt.n	8009f82 <__sflush_r+0xfe>
 8009f74:	89a3      	ldrh	r3, [r4, #12]
 8009f76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f7a:	81a3      	strh	r3, [r4, #12]
 8009f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f80:	e78e      	b.n	8009ea0 <__sflush_r+0x1c>
 8009f82:	4407      	add	r7, r0
 8009f84:	eba8 0800 	sub.w	r8, r8, r0
 8009f88:	e7e9      	b.n	8009f5e <__sflush_r+0xda>
 8009f8a:	bf00      	nop
 8009f8c:	20400001 	.word	0x20400001

08009f90 <_fflush_r>:
 8009f90:	b538      	push	{r3, r4, r5, lr}
 8009f92:	690b      	ldr	r3, [r1, #16]
 8009f94:	4605      	mov	r5, r0
 8009f96:	460c      	mov	r4, r1
 8009f98:	b913      	cbnz	r3, 8009fa0 <_fflush_r+0x10>
 8009f9a:	2500      	movs	r5, #0
 8009f9c:	4628      	mov	r0, r5
 8009f9e:	bd38      	pop	{r3, r4, r5, pc}
 8009fa0:	b118      	cbz	r0, 8009faa <_fflush_r+0x1a>
 8009fa2:	6983      	ldr	r3, [r0, #24]
 8009fa4:	b90b      	cbnz	r3, 8009faa <_fflush_r+0x1a>
 8009fa6:	f7ff fa4f 	bl	8009448 <__sinit>
 8009faa:	4b14      	ldr	r3, [pc, #80]	; (8009ffc <_fflush_r+0x6c>)
 8009fac:	429c      	cmp	r4, r3
 8009fae:	d11b      	bne.n	8009fe8 <_fflush_r+0x58>
 8009fb0:	686c      	ldr	r4, [r5, #4]
 8009fb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d0ef      	beq.n	8009f9a <_fflush_r+0xa>
 8009fba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009fbc:	07d0      	lsls	r0, r2, #31
 8009fbe:	d404      	bmi.n	8009fca <_fflush_r+0x3a>
 8009fc0:	0599      	lsls	r1, r3, #22
 8009fc2:	d402      	bmi.n	8009fca <_fflush_r+0x3a>
 8009fc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fc6:	f7ff fadd 	bl	8009584 <__retarget_lock_acquire_recursive>
 8009fca:	4628      	mov	r0, r5
 8009fcc:	4621      	mov	r1, r4
 8009fce:	f7ff ff59 	bl	8009e84 <__sflush_r>
 8009fd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fd4:	07da      	lsls	r2, r3, #31
 8009fd6:	4605      	mov	r5, r0
 8009fd8:	d4e0      	bmi.n	8009f9c <_fflush_r+0xc>
 8009fda:	89a3      	ldrh	r3, [r4, #12]
 8009fdc:	059b      	lsls	r3, r3, #22
 8009fde:	d4dd      	bmi.n	8009f9c <_fflush_r+0xc>
 8009fe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fe2:	f7ff fad0 	bl	8009586 <__retarget_lock_release_recursive>
 8009fe6:	e7d9      	b.n	8009f9c <_fflush_r+0xc>
 8009fe8:	4b05      	ldr	r3, [pc, #20]	; (800a000 <_fflush_r+0x70>)
 8009fea:	429c      	cmp	r4, r3
 8009fec:	d101      	bne.n	8009ff2 <_fflush_r+0x62>
 8009fee:	68ac      	ldr	r4, [r5, #8]
 8009ff0:	e7df      	b.n	8009fb2 <_fflush_r+0x22>
 8009ff2:	4b04      	ldr	r3, [pc, #16]	; (800a004 <_fflush_r+0x74>)
 8009ff4:	429c      	cmp	r4, r3
 8009ff6:	bf08      	it	eq
 8009ff8:	68ec      	ldreq	r4, [r5, #12]
 8009ffa:	e7da      	b.n	8009fb2 <_fflush_r+0x22>
 8009ffc:	0800a2dc 	.word	0x0800a2dc
 800a000:	0800a2fc 	.word	0x0800a2fc
 800a004:	0800a2bc 	.word	0x0800a2bc

0800a008 <_lseek_r>:
 800a008:	b538      	push	{r3, r4, r5, lr}
 800a00a:	4d07      	ldr	r5, [pc, #28]	; (800a028 <_lseek_r+0x20>)
 800a00c:	4604      	mov	r4, r0
 800a00e:	4608      	mov	r0, r1
 800a010:	4611      	mov	r1, r2
 800a012:	2200      	movs	r2, #0
 800a014:	602a      	str	r2, [r5, #0]
 800a016:	461a      	mov	r2, r3
 800a018:	f7f7 fcb1 	bl	800197e <_lseek>
 800a01c:	1c43      	adds	r3, r0, #1
 800a01e:	d102      	bne.n	800a026 <_lseek_r+0x1e>
 800a020:	682b      	ldr	r3, [r5, #0]
 800a022:	b103      	cbz	r3, 800a026 <_lseek_r+0x1e>
 800a024:	6023      	str	r3, [r4, #0]
 800a026:	bd38      	pop	{r3, r4, r5, pc}
 800a028:	20002eac 	.word	0x20002eac

0800a02c <__swhatbuf_r>:
 800a02c:	b570      	push	{r4, r5, r6, lr}
 800a02e:	460e      	mov	r6, r1
 800a030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a034:	2900      	cmp	r1, #0
 800a036:	b096      	sub	sp, #88	; 0x58
 800a038:	4614      	mov	r4, r2
 800a03a:	461d      	mov	r5, r3
 800a03c:	da07      	bge.n	800a04e <__swhatbuf_r+0x22>
 800a03e:	2300      	movs	r3, #0
 800a040:	602b      	str	r3, [r5, #0]
 800a042:	89b3      	ldrh	r3, [r6, #12]
 800a044:	061a      	lsls	r2, r3, #24
 800a046:	d410      	bmi.n	800a06a <__swhatbuf_r+0x3e>
 800a048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a04c:	e00e      	b.n	800a06c <__swhatbuf_r+0x40>
 800a04e:	466a      	mov	r2, sp
 800a050:	f000 f8be 	bl	800a1d0 <_fstat_r>
 800a054:	2800      	cmp	r0, #0
 800a056:	dbf2      	blt.n	800a03e <__swhatbuf_r+0x12>
 800a058:	9a01      	ldr	r2, [sp, #4]
 800a05a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a05e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a062:	425a      	negs	r2, r3
 800a064:	415a      	adcs	r2, r3
 800a066:	602a      	str	r2, [r5, #0]
 800a068:	e7ee      	b.n	800a048 <__swhatbuf_r+0x1c>
 800a06a:	2340      	movs	r3, #64	; 0x40
 800a06c:	2000      	movs	r0, #0
 800a06e:	6023      	str	r3, [r4, #0]
 800a070:	b016      	add	sp, #88	; 0x58
 800a072:	bd70      	pop	{r4, r5, r6, pc}

0800a074 <__smakebuf_r>:
 800a074:	898b      	ldrh	r3, [r1, #12]
 800a076:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a078:	079d      	lsls	r5, r3, #30
 800a07a:	4606      	mov	r6, r0
 800a07c:	460c      	mov	r4, r1
 800a07e:	d507      	bpl.n	800a090 <__smakebuf_r+0x1c>
 800a080:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a084:	6023      	str	r3, [r4, #0]
 800a086:	6123      	str	r3, [r4, #16]
 800a088:	2301      	movs	r3, #1
 800a08a:	6163      	str	r3, [r4, #20]
 800a08c:	b002      	add	sp, #8
 800a08e:	bd70      	pop	{r4, r5, r6, pc}
 800a090:	ab01      	add	r3, sp, #4
 800a092:	466a      	mov	r2, sp
 800a094:	f7ff ffca 	bl	800a02c <__swhatbuf_r>
 800a098:	9900      	ldr	r1, [sp, #0]
 800a09a:	4605      	mov	r5, r0
 800a09c:	4630      	mov	r0, r6
 800a09e:	f7ff fa73 	bl	8009588 <_malloc_r>
 800a0a2:	b948      	cbnz	r0, 800a0b8 <__smakebuf_r+0x44>
 800a0a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0a8:	059a      	lsls	r2, r3, #22
 800a0aa:	d4ef      	bmi.n	800a08c <__smakebuf_r+0x18>
 800a0ac:	f023 0303 	bic.w	r3, r3, #3
 800a0b0:	f043 0302 	orr.w	r3, r3, #2
 800a0b4:	81a3      	strh	r3, [r4, #12]
 800a0b6:	e7e3      	b.n	800a080 <__smakebuf_r+0xc>
 800a0b8:	4b0d      	ldr	r3, [pc, #52]	; (800a0f0 <__smakebuf_r+0x7c>)
 800a0ba:	62b3      	str	r3, [r6, #40]	; 0x28
 800a0bc:	89a3      	ldrh	r3, [r4, #12]
 800a0be:	6020      	str	r0, [r4, #0]
 800a0c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0c4:	81a3      	strh	r3, [r4, #12]
 800a0c6:	9b00      	ldr	r3, [sp, #0]
 800a0c8:	6163      	str	r3, [r4, #20]
 800a0ca:	9b01      	ldr	r3, [sp, #4]
 800a0cc:	6120      	str	r0, [r4, #16]
 800a0ce:	b15b      	cbz	r3, 800a0e8 <__smakebuf_r+0x74>
 800a0d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0d4:	4630      	mov	r0, r6
 800a0d6:	f000 f88d 	bl	800a1f4 <_isatty_r>
 800a0da:	b128      	cbz	r0, 800a0e8 <__smakebuf_r+0x74>
 800a0dc:	89a3      	ldrh	r3, [r4, #12]
 800a0de:	f023 0303 	bic.w	r3, r3, #3
 800a0e2:	f043 0301 	orr.w	r3, r3, #1
 800a0e6:	81a3      	strh	r3, [r4, #12]
 800a0e8:	89a0      	ldrh	r0, [r4, #12]
 800a0ea:	4305      	orrs	r5, r0
 800a0ec:	81a5      	strh	r5, [r4, #12]
 800a0ee:	e7cd      	b.n	800a08c <__smakebuf_r+0x18>
 800a0f0:	080093e1 	.word	0x080093e1

0800a0f4 <__malloc_lock>:
 800a0f4:	4801      	ldr	r0, [pc, #4]	; (800a0fc <__malloc_lock+0x8>)
 800a0f6:	f7ff ba45 	b.w	8009584 <__retarget_lock_acquire_recursive>
 800a0fa:	bf00      	nop
 800a0fc:	20002ea4 	.word	0x20002ea4

0800a100 <__malloc_unlock>:
 800a100:	4801      	ldr	r0, [pc, #4]	; (800a108 <__malloc_unlock+0x8>)
 800a102:	f7ff ba40 	b.w	8009586 <__retarget_lock_release_recursive>
 800a106:	bf00      	nop
 800a108:	20002ea4 	.word	0x20002ea4

0800a10c <_free_r>:
 800a10c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a10e:	2900      	cmp	r1, #0
 800a110:	d048      	beq.n	800a1a4 <_free_r+0x98>
 800a112:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a116:	9001      	str	r0, [sp, #4]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	f1a1 0404 	sub.w	r4, r1, #4
 800a11e:	bfb8      	it	lt
 800a120:	18e4      	addlt	r4, r4, r3
 800a122:	f7ff ffe7 	bl	800a0f4 <__malloc_lock>
 800a126:	4a20      	ldr	r2, [pc, #128]	; (800a1a8 <_free_r+0x9c>)
 800a128:	9801      	ldr	r0, [sp, #4]
 800a12a:	6813      	ldr	r3, [r2, #0]
 800a12c:	4615      	mov	r5, r2
 800a12e:	b933      	cbnz	r3, 800a13e <_free_r+0x32>
 800a130:	6063      	str	r3, [r4, #4]
 800a132:	6014      	str	r4, [r2, #0]
 800a134:	b003      	add	sp, #12
 800a136:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a13a:	f7ff bfe1 	b.w	800a100 <__malloc_unlock>
 800a13e:	42a3      	cmp	r3, r4
 800a140:	d90b      	bls.n	800a15a <_free_r+0x4e>
 800a142:	6821      	ldr	r1, [r4, #0]
 800a144:	1862      	adds	r2, r4, r1
 800a146:	4293      	cmp	r3, r2
 800a148:	bf04      	itt	eq
 800a14a:	681a      	ldreq	r2, [r3, #0]
 800a14c:	685b      	ldreq	r3, [r3, #4]
 800a14e:	6063      	str	r3, [r4, #4]
 800a150:	bf04      	itt	eq
 800a152:	1852      	addeq	r2, r2, r1
 800a154:	6022      	streq	r2, [r4, #0]
 800a156:	602c      	str	r4, [r5, #0]
 800a158:	e7ec      	b.n	800a134 <_free_r+0x28>
 800a15a:	461a      	mov	r2, r3
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	b10b      	cbz	r3, 800a164 <_free_r+0x58>
 800a160:	42a3      	cmp	r3, r4
 800a162:	d9fa      	bls.n	800a15a <_free_r+0x4e>
 800a164:	6811      	ldr	r1, [r2, #0]
 800a166:	1855      	adds	r5, r2, r1
 800a168:	42a5      	cmp	r5, r4
 800a16a:	d10b      	bne.n	800a184 <_free_r+0x78>
 800a16c:	6824      	ldr	r4, [r4, #0]
 800a16e:	4421      	add	r1, r4
 800a170:	1854      	adds	r4, r2, r1
 800a172:	42a3      	cmp	r3, r4
 800a174:	6011      	str	r1, [r2, #0]
 800a176:	d1dd      	bne.n	800a134 <_free_r+0x28>
 800a178:	681c      	ldr	r4, [r3, #0]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	6053      	str	r3, [r2, #4]
 800a17e:	4421      	add	r1, r4
 800a180:	6011      	str	r1, [r2, #0]
 800a182:	e7d7      	b.n	800a134 <_free_r+0x28>
 800a184:	d902      	bls.n	800a18c <_free_r+0x80>
 800a186:	230c      	movs	r3, #12
 800a188:	6003      	str	r3, [r0, #0]
 800a18a:	e7d3      	b.n	800a134 <_free_r+0x28>
 800a18c:	6825      	ldr	r5, [r4, #0]
 800a18e:	1961      	adds	r1, r4, r5
 800a190:	428b      	cmp	r3, r1
 800a192:	bf04      	itt	eq
 800a194:	6819      	ldreq	r1, [r3, #0]
 800a196:	685b      	ldreq	r3, [r3, #4]
 800a198:	6063      	str	r3, [r4, #4]
 800a19a:	bf04      	itt	eq
 800a19c:	1949      	addeq	r1, r1, r5
 800a19e:	6021      	streq	r1, [r4, #0]
 800a1a0:	6054      	str	r4, [r2, #4]
 800a1a2:	e7c7      	b.n	800a134 <_free_r+0x28>
 800a1a4:	b003      	add	sp, #12
 800a1a6:	bd30      	pop	{r4, r5, pc}
 800a1a8:	2000048c 	.word	0x2000048c

0800a1ac <_read_r>:
 800a1ac:	b538      	push	{r3, r4, r5, lr}
 800a1ae:	4d07      	ldr	r5, [pc, #28]	; (800a1cc <_read_r+0x20>)
 800a1b0:	4604      	mov	r4, r0
 800a1b2:	4608      	mov	r0, r1
 800a1b4:	4611      	mov	r1, r2
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	602a      	str	r2, [r5, #0]
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	f7f7 fb8c 	bl	80018d8 <_read>
 800a1c0:	1c43      	adds	r3, r0, #1
 800a1c2:	d102      	bne.n	800a1ca <_read_r+0x1e>
 800a1c4:	682b      	ldr	r3, [r5, #0]
 800a1c6:	b103      	cbz	r3, 800a1ca <_read_r+0x1e>
 800a1c8:	6023      	str	r3, [r4, #0]
 800a1ca:	bd38      	pop	{r3, r4, r5, pc}
 800a1cc:	20002eac 	.word	0x20002eac

0800a1d0 <_fstat_r>:
 800a1d0:	b538      	push	{r3, r4, r5, lr}
 800a1d2:	4d07      	ldr	r5, [pc, #28]	; (800a1f0 <_fstat_r+0x20>)
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	4604      	mov	r4, r0
 800a1d8:	4608      	mov	r0, r1
 800a1da:	4611      	mov	r1, r2
 800a1dc:	602b      	str	r3, [r5, #0]
 800a1de:	f7f7 fbb3 	bl	8001948 <_fstat>
 800a1e2:	1c43      	adds	r3, r0, #1
 800a1e4:	d102      	bne.n	800a1ec <_fstat_r+0x1c>
 800a1e6:	682b      	ldr	r3, [r5, #0]
 800a1e8:	b103      	cbz	r3, 800a1ec <_fstat_r+0x1c>
 800a1ea:	6023      	str	r3, [r4, #0]
 800a1ec:	bd38      	pop	{r3, r4, r5, pc}
 800a1ee:	bf00      	nop
 800a1f0:	20002eac 	.word	0x20002eac

0800a1f4 <_isatty_r>:
 800a1f4:	b538      	push	{r3, r4, r5, lr}
 800a1f6:	4d06      	ldr	r5, [pc, #24]	; (800a210 <_isatty_r+0x1c>)
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	4604      	mov	r4, r0
 800a1fc:	4608      	mov	r0, r1
 800a1fe:	602b      	str	r3, [r5, #0]
 800a200:	f7f7 fbb2 	bl	8001968 <_isatty>
 800a204:	1c43      	adds	r3, r0, #1
 800a206:	d102      	bne.n	800a20e <_isatty_r+0x1a>
 800a208:	682b      	ldr	r3, [r5, #0]
 800a20a:	b103      	cbz	r3, 800a20e <_isatty_r+0x1a>
 800a20c:	6023      	str	r3, [r4, #0]
 800a20e:	bd38      	pop	{r3, r4, r5, pc}
 800a210:	20002eac 	.word	0x20002eac

0800a214 <_init>:
 800a214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a216:	bf00      	nop
 800a218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a21a:	bc08      	pop	{r3}
 800a21c:	469e      	mov	lr, r3
 800a21e:	4770      	bx	lr

0800a220 <_fini>:
 800a220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a222:	bf00      	nop
 800a224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a226:	bc08      	pop	{r3}
 800a228:	469e      	mov	lr, r3
 800a22a:	4770      	bx	lr
